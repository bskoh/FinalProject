
Stage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00001022  000010b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001022  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000090  00800160  00800160  00001116  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001116  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001174  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000011b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011b0  00000000  00000000  00001284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aaf  00000000  00000000  00002434  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009b1  00000000  00000000  00002ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  00003894  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000648  00000000  00000000  00003b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a0  00000000  00000000  00004180  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004820  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	aa c0       	rjmp	.+340    	; 0x156 <__ctors_end>
       2:	00 00       	nop
       4:	c5 c0       	rjmp	.+394    	; 0x190 <__bad_interrupt>
       6:	00 00       	nop
       8:	c3 c0       	rjmp	.+390    	; 0x190 <__bad_interrupt>
       a:	00 00       	nop
       c:	c1 c0       	rjmp	.+386    	; 0x190 <__bad_interrupt>
       e:	00 00       	nop
      10:	bf c0       	rjmp	.+382    	; 0x190 <__bad_interrupt>
      12:	00 00       	nop
      14:	bd c0       	rjmp	.+378    	; 0x190 <__bad_interrupt>
      16:	00 00       	nop
      18:	bb c0       	rjmp	.+374    	; 0x190 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b9 c0       	rjmp	.+370    	; 0x190 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b7 c0       	rjmp	.+366    	; 0x190 <__bad_interrupt>
      22:	00 00       	nop
      24:	b5 c0       	rjmp	.+362    	; 0x190 <__bad_interrupt>
      26:	00 00       	nop
      28:	b3 c0       	rjmp	.+358    	; 0x190 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b1 c0       	rjmp	.+354    	; 0x190 <__bad_interrupt>
      2e:	00 00       	nop
      30:	af c0       	rjmp	.+350    	; 0x190 <__bad_interrupt>
      32:	00 00       	nop
      34:	ad c0       	rjmp	.+346    	; 0x190 <__bad_interrupt>
      36:	00 00       	nop
      38:	ab c0       	rjmp	.+342    	; 0x190 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a9 c0       	rjmp	.+338    	; 0x190 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ed c0       	rjmp	.+474    	; 0x21c <__vector_16>
      42:	00 00       	nop
      44:	a5 c0       	rjmp	.+330    	; 0x190 <__bad_interrupt>
      46:	00 00       	nop
      48:	c2 c0       	rjmp	.+388    	; 0x1ce <__vector_18>
      4a:	00 00       	nop
      4c:	a1 c0       	rjmp	.+322    	; 0x190 <__bad_interrupt>
      4e:	00 00       	nop
      50:	9f c0       	rjmp	.+318    	; 0x190 <__bad_interrupt>
      52:	00 00       	nop
      54:	9d c0       	rjmp	.+314    	; 0x190 <__bad_interrupt>
      56:	00 00       	nop
      58:	9b c0       	rjmp	.+310    	; 0x190 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	99 c0       	rjmp	.+306    	; 0x190 <__bad_interrupt>
      5e:	00 00       	nop
      60:	97 c0       	rjmp	.+302    	; 0x190 <__bad_interrupt>
      62:	00 00       	nop
      64:	95 c0       	rjmp	.+298    	; 0x190 <__bad_interrupt>
      66:	00 00       	nop
      68:	93 c0       	rjmp	.+294    	; 0x190 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	91 c0       	rjmp	.+290    	; 0x190 <__bad_interrupt>
      6e:	00 00       	nop
      70:	8f c0       	rjmp	.+286    	; 0x190 <__bad_interrupt>
      72:	00 00       	nop
      74:	8d c0       	rjmp	.+282    	; 0x190 <__bad_interrupt>
      76:	00 00       	nop
      78:	8b c0       	rjmp	.+278    	; 0x190 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	89 c0       	rjmp	.+274    	; 0x190 <__bad_interrupt>
      7e:	00 00       	nop
      80:	87 c0       	rjmp	.+270    	; 0x190 <__bad_interrupt>
      82:	00 00       	nop
      84:	85 c0       	rjmp	.+266    	; 0x190 <__bad_interrupt>
      86:	00 00       	nop
      88:	83 c0       	rjmp	.+262    	; 0x190 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	a3 03       	fmuls	r18, r19
      8e:	af 03       	fmulsu	r18, r23
      90:	b8 03       	fmulsu	r19, r16
      92:	d8 03       	fmulsu	r21, r16
      94:	f5 03       	fmuls	r23, r21
      96:	04 04       	cpc	r0, r4
      98:	1d 04       	cpc	r1, r13
      9a:	46 04       	cpc	r4, r6
      9c:	a6 02       	muls	r26, r22
      9e:	a6 02       	muls	r26, r22
      a0:	52 04       	cpc	r5, r2
      a2:	6b 04       	cpc	r6, r11
      a4:	a6 02       	muls	r26, r22
      a6:	a6 02       	muls	r26, r22
      a8:	a6 02       	muls	r26, r22
      aa:	a6 02       	muls	r26, r22
      ac:	a6 02       	muls	r26, r22
      ae:	a6 02       	muls	r26, r22
      b0:	a6 02       	muls	r26, r22
      b2:	a6 02       	muls	r26, r22
      b4:	a6 02       	muls	r26, r22
      b6:	a6 02       	muls	r26, r22
      b8:	a6 02       	muls	r26, r22
      ba:	a6 02       	muls	r26, r22
      bc:	a6 02       	muls	r26, r22
      be:	a6 02       	muls	r26, r22
      c0:	a6 02       	muls	r26, r22
      c2:	a6 02       	muls	r26, r22
      c4:	a6 02       	muls	r26, r22
      c6:	a6 02       	muls	r26, r22
      c8:	a6 02       	muls	r26, r22
      ca:	a6 02       	muls	r26, r22
      cc:	a6 02       	muls	r26, r22
      ce:	a6 02       	muls	r26, r22
      d0:	a6 02       	muls	r26, r22
      d2:	a6 02       	muls	r26, r22
      d4:	a6 02       	muls	r26, r22
      d6:	a6 02       	muls	r26, r22
      d8:	a6 02       	muls	r26, r22
      da:	a6 02       	muls	r26, r22
      dc:	a6 02       	muls	r26, r22
      de:	a6 02       	muls	r26, r22
      e0:	a6 02       	muls	r26, r22
      e2:	a6 02       	muls	r26, r22
      e4:	a6 02       	muls	r26, r22
      e6:	a6 02       	muls	r26, r22
      e8:	a6 02       	muls	r26, r22
      ea:	a6 02       	muls	r26, r22
      ec:	a6 02       	muls	r26, r22
      ee:	a6 02       	muls	r26, r22
      f0:	a6 02       	muls	r26, r22
      f2:	a6 02       	muls	r26, r22
      f4:	a6 02       	muls	r26, r22
      f6:	a6 02       	muls	r26, r22
      f8:	a6 02       	muls	r26, r22
      fa:	a6 02       	muls	r26, r22
      fc:	a6 02       	muls	r26, r22
      fe:	a6 02       	muls	r26, r22
     100:	a6 02       	muls	r26, r22
     102:	a6 02       	muls	r26, r22
     104:	a6 02       	muls	r26, r22
     106:	a6 02       	muls	r26, r22
     108:	a6 02       	muls	r26, r22
     10a:	a6 02       	muls	r26, r22
     10c:	a6 02       	muls	r26, r22
     10e:	a6 02       	muls	r26, r22
     110:	a6 02       	muls	r26, r22
     112:	a6 02       	muls	r26, r22
     114:	a6 02       	muls	r26, r22
     116:	a6 02       	muls	r26, r22
     118:	a6 02       	muls	r26, r22
     11a:	a6 02       	muls	r26, r22
     11c:	a6 02       	muls	r26, r22
     11e:	a6 02       	muls	r26, r22
     120:	a6 02       	muls	r26, r22
     122:	a6 02       	muls	r26, r22
     124:	a6 02       	muls	r26, r22
     126:	a6 02       	muls	r26, r22
     128:	a6 02       	muls	r26, r22
     12a:	a6 02       	muls	r26, r22
     12c:	a6 02       	muls	r26, r22
     12e:	a6 02       	muls	r26, r22
     130:	a6 02       	muls	r26, r22
     132:	a6 02       	muls	r26, r22
     134:	a6 02       	muls	r26, r22
     136:	a6 02       	muls	r26, r22
     138:	a6 02       	muls	r26, r22
     13a:	a6 02       	muls	r26, r22
     13c:	a6 02       	muls	r26, r22
     13e:	a6 02       	muls	r26, r22
     140:	a6 02       	muls	r26, r22
     142:	a6 02       	muls	r26, r22
     144:	a6 02       	muls	r26, r22
     146:	a6 02       	muls	r26, r22
     148:	a6 02       	muls	r26, r22
     14a:	a6 02       	muls	r26, r22
     14c:	a6 02       	muls	r26, r22
     14e:	a6 02       	muls	r26, r22
     150:	a6 02       	muls	r26, r22
     152:	a6 02       	muls	r26, r22
     154:	92 04       	cpc	r9, r2

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf ef       	ldi	r28, 0xFF	; 255
     15c:	d0 e1       	ldi	r29, 0x10	; 16
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
     162:	11 e0       	ldi	r17, 0x01	; 1
     164:	a0 e0       	ldi	r26, 0x00	; 0
     166:	b1 e0       	ldi	r27, 0x01	; 1
     168:	e2 e2       	ldi	r30, 0x22	; 34
     16a:	f0 e1       	ldi	r31, 0x10	; 16
     16c:	00 e0       	ldi	r16, 0x00	; 0
     16e:	0b bf       	out	0x3b, r16	; 59
     170:	02 c0       	rjmp	.+4      	; 0x176 <__do_copy_data+0x14>
     172:	07 90       	elpm	r0, Z+
     174:	0d 92       	st	X+, r0
     176:	a0 36       	cpi	r26, 0x60	; 96
     178:	b1 07       	cpc	r27, r17
     17a:	d9 f7       	brne	.-10     	; 0x172 <__do_copy_data+0x10>

0000017c <__do_clear_bss>:
     17c:	21 e0       	ldi	r18, 0x01	; 1
     17e:	a0 e6       	ldi	r26, 0x60	; 96
     180:	b1 e0       	ldi	r27, 0x01	; 1
     182:	01 c0       	rjmp	.+2      	; 0x186 <.do_clear_bss_start>

00000184 <.do_clear_bss_loop>:
     184:	1d 92       	st	X+, r1

00000186 <.do_clear_bss_start>:
     186:	a0 3f       	cpi	r26, 0xF0	; 240
     188:	b2 07       	cpc	r27, r18
     18a:	e1 f7       	brne	.-8      	; 0x184 <.do_clear_bss_loop>
     18c:	b0 d1       	rcall	.+864    	; 0x4ee <main>
     18e:	47 c7       	rjmp	.+3726   	; 0x101e <_exit>

00000190 <__bad_interrupt>:
     190:	37 cf       	rjmp	.-402    	; 0x0 <__vectors>

00000192 <init_timer>:
	}
	else
	{
		return 1;
	}
}
     192:	83 b7       	in	r24, 0x33	; 51
     194:	87 60       	ori	r24, 0x07	; 7
     196:	83 bf       	out	0x33, r24	; 51
     198:	87 b7       	in	r24, 0x37	; 55
     19a:	81 60       	ori	r24, 0x01	; 1
     19c:	87 bf       	out	0x37, r24	; 55
     19e:	08 95       	ret

000001a0 <init_pwm>:
     1a0:	8f b5       	in	r24, 0x2f	; 47
     1a2:	82 60       	ori	r24, 0x02	; 2
     1a4:	8f bd       	out	0x2f, r24	; 47
     1a6:	8e b5       	in	r24, 0x2e	; 46
     1a8:	88 61       	ori	r24, 0x18	; 24
     1aa:	8e bd       	out	0x2e, r24	; 46
     1ac:	8f b5       	in	r24, 0x2f	; 47
     1ae:	88 60       	ori	r24, 0x08	; 8
     1b0:	8f bd       	out	0x2f, r24	; 47
     1b2:	8e b5       	in	r24, 0x2e	; 46
     1b4:	82 60       	ori	r24, 0x02	; 2
     1b6:	8e bd       	out	0x2e, r24	; 46
     1b8:	8f e3       	ldi	r24, 0x3F	; 63
     1ba:	9c e9       	ldi	r25, 0x9C	; 156
     1bc:	97 bd       	out	0x27, r25	; 39
     1be:	86 bd       	out	0x26, r24	; 38
     1c0:	88 e8       	ldi	r24, 0x88	; 136
     1c2:	93 e1       	ldi	r25, 0x13	; 19
     1c4:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     1c8:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     1cc:	08 95       	ret

000001ce <__vector_18>:
     1ce:	1f 92       	push	r1
     1d0:	0f 92       	push	r0
     1d2:	0f b6       	in	r0, 0x3f	; 63
     1d4:	0f 92       	push	r0
     1d6:	11 24       	eor	r1, r1
     1d8:	0b b6       	in	r0, 0x3b	; 59
     1da:	0f 92       	push	r0
     1dc:	2f 93       	push	r18
     1de:	3f 93       	push	r19
     1e0:	4f 93       	push	r20
     1e2:	5f 93       	push	r21
     1e4:	6f 93       	push	r22
     1e6:	7f 93       	push	r23
     1e8:	8f 93       	push	r24
     1ea:	9f 93       	push	r25
     1ec:	af 93       	push	r26
     1ee:	bf 93       	push	r27
     1f0:	ef 93       	push	r30
     1f2:	ff 93       	push	r31
     1f4:	d0 d3       	rcall	.+1952   	; 0x996 <UART0_ISR_Receive>
     1f6:	ff 91       	pop	r31
     1f8:	ef 91       	pop	r30
     1fa:	bf 91       	pop	r27
     1fc:	af 91       	pop	r26
     1fe:	9f 91       	pop	r25
     200:	8f 91       	pop	r24
     202:	7f 91       	pop	r23
     204:	6f 91       	pop	r22
     206:	5f 91       	pop	r21
     208:	4f 91       	pop	r20
     20a:	3f 91       	pop	r19
     20c:	2f 91       	pop	r18
     20e:	0f 90       	pop	r0
     210:	0b be       	out	0x3b, r0	; 59
     212:	0f 90       	pop	r0
     214:	0f be       	out	0x3f, r0	; 63
     216:	0f 90       	pop	r0
     218:	1f 90       	pop	r1
     21a:	18 95       	reti

0000021c <__vector_16>:
     21c:	1f 92       	push	r1
     21e:	0f 92       	push	r0
     220:	0f b6       	in	r0, 0x3f	; 63
     222:	0f 92       	push	r0
     224:	11 24       	eor	r1, r1
     226:	8f 93       	push	r24
     228:	9f 93       	push	r25
     22a:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <delay>
     22e:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <delay+0x1>
     232:	01 96       	adiw	r24, 0x01	; 1
     234:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <delay+0x1>
     238:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <delay>
     23c:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <tmr>
     240:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <tmr+0x1>
     244:	01 96       	adiw	r24, 0x01	; 1
     246:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <tmr+0x1>
     24a:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <tmr>
     24e:	9f 91       	pop	r25
     250:	8f 91       	pop	r24
     252:	0f 90       	pop	r0
     254:	0f be       	out	0x3f, r0	; 63
     256:	0f 90       	pop	r0
     258:	1f 90       	pop	r1
     25a:	18 95       	reti

0000025c <Update_Value>:
     25c:	e6 e1       	ldi	r30, 0x16	; 22
     25e:	f1 e0       	ldi	r31, 0x01	; 1
     260:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <Seqeunce>
     264:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <Seqeunce+0x1>
     268:	91 83       	std	Z+1, r25	; 0x01
     26a:	80 83       	st	Z, r24
     26c:	90 b1       	in	r25, 0x00	; 0
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	98 27       	eor	r25, r24
     272:	91 70       	andi	r25, 0x01	; 1
     274:	92 83       	std	Z+2, r25	; 0x02
     276:	13 82       	std	Z+3, r1	; 0x03
     278:	90 b1       	in	r25, 0x00	; 0
     27a:	96 95       	lsr	r25
     27c:	98 27       	eor	r25, r24
     27e:	91 70       	andi	r25, 0x01	; 1
     280:	94 83       	std	Z+4, r25	; 0x04
     282:	15 82       	std	Z+5, r1	; 0x05
     284:	90 b1       	in	r25, 0x00	; 0
     286:	96 95       	lsr	r25
     288:	96 95       	lsr	r25
     28a:	98 27       	eor	r25, r24
     28c:	91 70       	andi	r25, 0x01	; 1
     28e:	96 83       	std	Z+6, r25	; 0x06
     290:	17 82       	std	Z+7, r1	; 0x07
     292:	90 b1       	in	r25, 0x00	; 0
     294:	96 95       	lsr	r25
     296:	96 95       	lsr	r25
     298:	96 95       	lsr	r25
     29a:	98 27       	eor	r25, r24
     29c:	91 70       	andi	r25, 0x01	; 1
     29e:	90 87       	std	Z+8, r25	; 0x08
     2a0:	11 86       	std	Z+9, r1	; 0x09
     2a2:	90 b1       	in	r25, 0x00	; 0
     2a4:	92 95       	swap	r25
     2a6:	9f 70       	andi	r25, 0x0F	; 15
     2a8:	89 27       	eor	r24, r25
     2aa:	81 70       	andi	r24, 0x01	; 1
     2ac:	82 87       	std	Z+10, r24	; 0x0a
     2ae:	13 86       	std	Z+11, r1	; 0x0b
     2b0:	88 b3       	in	r24, 0x18	; 24
     2b2:	98 b3       	in	r25, 0x18	; 24
     2b4:	92 70       	andi	r25, 0x02	; 2
     2b6:	81 70       	andi	r24, 0x01	; 1
     2b8:	89 2b       	or	r24, r25
     2ba:	21 e0       	ldi	r18, 0x01	; 1
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	81 30       	cpi	r24, 0x01	; 1
     2c0:	11 f0       	breq	.+4      	; 0x2c6 <Update_Value+0x6a>
     2c2:	20 e0       	ldi	r18, 0x00	; 0
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	30 93 23 01 	sts	0x0123, r19	; 0x800123 <value+0xd>
     2ca:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <value+0xc>
     2ce:	88 b3       	in	r24, 0x18	; 24
     2d0:	98 b3       	in	r25, 0x18	; 24
     2d2:	98 70       	andi	r25, 0x08	; 8
     2d4:	84 70       	andi	r24, 0x04	; 4
     2d6:	89 2b       	or	r24, r25
     2d8:	21 e0       	ldi	r18, 0x01	; 1
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	84 30       	cpi	r24, 0x04	; 4
     2de:	11 f0       	breq	.+4      	; 0x2e4 <Update_Value+0x88>
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	30 93 25 01 	sts	0x0125, r19	; 0x800125 <value+0xf>
     2e8:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <value+0xe>
     2ec:	e6 e1       	ldi	r30, 0x16	; 22
     2ee:	f1 e0       	ldi	r31, 0x01	; 1
     2f0:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <Drop_ready>
     2f4:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <Drop_ready+0x1>
     2f8:	91 8b       	std	Z+17, r25	; 0x11
     2fa:	80 8b       	std	Z+16, r24	; 0x10
     2fc:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <Pick_ready>
     300:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <Pick_ready+0x1>
     304:	93 8b       	std	Z+19, r25	; 0x13
     306:	82 8b       	std	Z+18, r24	; 0x12
     308:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <Motor_Stopper_open>
     30c:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <Motor_Stopper_open+0x1>
     310:	95 8b       	std	Z+21, r25	; 0x15
     312:	84 8b       	std	Z+20, r24	; 0x14
     314:	08 95       	ret

00000316 <Send_Value>:
     316:	6f 92       	push	r6
     318:	7f 92       	push	r7
     31a:	8f 92       	push	r8
     31c:	9f 92       	push	r9
     31e:	af 92       	push	r10
     320:	bf 92       	push	r11
     322:	cf 92       	push	r12
     324:	df 92       	push	r13
     326:	ef 92       	push	r14
     328:	ff 92       	push	r15
     32a:	0f 93       	push	r16
     32c:	1f 93       	push	r17
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	0f 2e       	mov	r0, r31
     334:	f6 e1       	ldi	r31, 0x16	; 22
     336:	ef 2e       	mov	r14, r31
     338:	f1 e0       	ldi	r31, 0x01	; 1
     33a:	ff 2e       	mov	r15, r31
     33c:	f0 2d       	mov	r31, r0
     33e:	01 e0       	ldi	r16, 0x01	; 1
     340:	10 e0       	ldi	r17, 0x00	; 0
     342:	c0 e0       	ldi	r28, 0x00	; 0
     344:	d0 e0       	ldi	r29, 0x00	; 0
     346:	0f 2e       	mov	r0, r31
     348:	f2 e3       	ldi	r31, 0x32	; 50
     34a:	8f 2e       	mov	r8, r31
     34c:	f1 e0       	ldi	r31, 0x01	; 1
     34e:	9f 2e       	mov	r9, r31
     350:	f0 2d       	mov	r31, r0
     352:	0f 2e       	mov	r0, r31
     354:	f2 e6       	ldi	r31, 0x62	; 98
     356:	cf 2e       	mov	r12, r31
     358:	f1 e0       	ldi	r31, 0x01	; 1
     35a:	df 2e       	mov	r13, r31
     35c:	f0 2d       	mov	r31, r0
     35e:	57 01       	movw	r10, r14
     360:	0f 2e       	mov	r0, r31
     362:	fc e2       	ldi	r31, 0x2C	; 44
     364:	6f 2e       	mov	r6, r31
     366:	f1 e0       	ldi	r31, 0x01	; 1
     368:	7f 2e       	mov	r7, r31
     36a:	f0 2d       	mov	r31, r0
     36c:	06 c0       	rjmp	.+12     	; 0x37a <Send_Value+0x64>
     36e:	21 96       	adiw	r28, 0x01	; 1
     370:	0f 5f       	subi	r16, 0xFF	; 255
     372:	1f 4f       	sbci	r17, 0xFF	; 255
     374:	82 e0       	ldi	r24, 0x02	; 2
     376:	e8 0e       	add	r14, r24
     378:	f1 1c       	adc	r15, r1
     37a:	20 97       	sbiw	r28, 0x00	; 0
     37c:	99 f4       	brne	.+38     	; 0x3a4 <Send_Value+0x8e>
     37e:	f5 01       	movw	r30, r10
     380:	81 81       	ldd	r24, Z+1	; 0x01
     382:	8f 93       	push	r24
     384:	80 81       	ld	r24, Z
     386:	8f 93       	push	r24
     388:	7f 92       	push	r7
     38a:	6f 92       	push	r6
     38c:	df 92       	push	r13
     38e:	cf 92       	push	r12
     390:	6b d3       	rcall	.+1750   	; 0xa68 <sprintf>
     392:	c6 01       	movw	r24, r12
     394:	ea d2       	rcall	.+1492   	; 0x96a <UART0_printf_string>
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	e5 cf       	rjmp	.-54     	; 0x36e <Send_Value+0x58>
     3a4:	9e 01       	movw	r18, r28
     3a6:	21 50       	subi	r18, 0x01	; 1
     3a8:	31 09       	sbc	r19, r1
     3aa:	29 30       	cpi	r18, 0x09	; 9
     3ac:	31 05       	cpc	r19, r1
     3ae:	98 f4       	brcc	.+38     	; 0x3d6 <Send_Value+0xc0>
     3b0:	f7 01       	movw	r30, r14
     3b2:	81 81       	ldd	r24, Z+1	; 0x01
     3b4:	8f 93       	push	r24
     3b6:	80 81       	ld	r24, Z
     3b8:	8f 93       	push	r24
     3ba:	9f 92       	push	r9
     3bc:	8f 92       	push	r8
     3be:	df 92       	push	r13
     3c0:	cf 92       	push	r12
     3c2:	52 d3       	rcall	.+1700   	; 0xa68 <sprintf>
     3c4:	c6 01       	movw	r24, r12
     3c6:	d1 d2       	rcall	.+1442   	; 0x96a <UART0_printf_string>
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
     3d4:	1c c0       	rjmp	.+56     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3d6:	ca 30       	cpi	r28, 0x0A	; 10
     3d8:	d1 05       	cpc	r29, r1
     3da:	c9 f4       	brne	.+50     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3dc:	e6 e1       	ldi	r30, 0x16	; 22
     3de:	f1 e0       	ldi	r31, 0x01	; 1
     3e0:	85 89       	ldd	r24, Z+21	; 0x15
     3e2:	8f 93       	push	r24
     3e4:	84 89       	ldd	r24, Z+20	; 0x14
     3e6:	8f 93       	push	r24
     3e8:	86 e3       	ldi	r24, 0x36	; 54
     3ea:	91 e0       	ldi	r25, 0x01	; 1
     3ec:	9f 93       	push	r25
     3ee:	8f 93       	push	r24
     3f0:	82 e6       	ldi	r24, 0x62	; 98
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	9f 93       	push	r25
     3f6:	8f 93       	push	r24
     3f8:	37 d3       	rcall	.+1646   	; 0xa68 <sprintf>
     3fa:	82 e6       	ldi	r24, 0x62	; 98
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	b5 d2       	rcall	.+1386   	; 0x96a <UART0_printf_string>
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	0f 90       	pop	r0
     40c:	04 c0       	rjmp	.+8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     40e:	0b 30       	cpi	r16, 0x0B	; 11
     410:	11 05       	cpc	r17, r1
     412:	0c f4       	brge	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     414:	ac cf       	rjmp	.-168    	; 0x36e <Send_Value+0x58>
     416:	89 e3       	ldi	r24, 0x39	; 57
     418:	91 e0       	ldi	r25, 0x01	; 1
     41a:	a7 d2       	rcall	.+1358   	; 0x96a <UART0_printf_string>
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	1f 91       	pop	r17
     422:	0f 91       	pop	r16
     424:	ff 90       	pop	r15
     426:	ef 90       	pop	r14
     428:	df 90       	pop	r13
     42a:	cf 90       	pop	r12
     42c:	bf 90       	pop	r11
     42e:	af 90       	pop	r10
     430:	9f 90       	pop	r9
     432:	8f 90       	pop	r8
     434:	7f 90       	pop	r7
     436:	6f 90       	pop	r6
     438:	08 95       	ret

0000043a <Send_Event_Value>:
     43a:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <cnt_event+0x1>
     43e:	8f 93       	push	r24
     440:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <cnt_event>
     444:	8f 93       	push	r24
     446:	8b e3       	ldi	r24, 0x3B	; 59
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	9f 93       	push	r25
     44c:	8f 93       	push	r24
     44e:	82 e6       	ldi	r24, 0x62	; 98
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	9f 93       	push	r25
     454:	8f 93       	push	r24
     456:	08 d3       	rcall	.+1552   	; 0xa68 <sprintf>
     458:	82 e6       	ldi	r24, 0x62	; 98
     45a:	91 e0       	ldi	r25, 0x01	; 1
     45c:	86 d2       	rcall	.+1292   	; 0x96a <UART0_printf_string>
     45e:	5b df       	rcall	.-330    	; 0x316 <Send_Value>
     460:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <cnt_event>
     464:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <cnt_event+0x1>
     468:	01 96       	adiw	r24, 0x01	; 1
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	84 36       	cpi	r24, 0x64	; 100
     478:	91 05       	cpc	r25, r1
     47a:	2c f4       	brge	.+10     	; 0x486 <Send_Event_Value+0x4c>
     47c:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <cnt_event+0x1>
     480:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <cnt_event>
     484:	08 95       	ret
     486:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <cnt_event+0x1>
     48a:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <cnt_event>
     48e:	08 95       	ret

00000490 <Diff_Value>:
     490:	dc 01       	movw	r26, r24
     492:	fb 01       	movw	r30, r22
     494:	50 96       	adiw	r26, 0x10	; 16
     496:	2d 91       	ld	r18, X+
     498:	3c 91       	ld	r19, X
     49a:	51 97       	sbiw	r26, 0x11	; 17
     49c:	80 89       	ldd	r24, Z+16	; 0x10
     49e:	91 89       	ldd	r25, Z+17	; 0x11
     4a0:	28 17       	cp	r18, r24
     4a2:	39 07       	cpc	r19, r25
     4a4:	c1 f4       	brne	.+48     	; 0x4d6 <Diff_Value+0x46>
     4a6:	52 96       	adiw	r26, 0x12	; 18
     4a8:	2d 91       	ld	r18, X+
     4aa:	3c 91       	ld	r19, X
     4ac:	53 97       	sbiw	r26, 0x13	; 19
     4ae:	82 89       	ldd	r24, Z+18	; 0x12
     4b0:	93 89       	ldd	r25, Z+19	; 0x13
     4b2:	28 17       	cp	r18, r24
     4b4:	39 07       	cpc	r19, r25
     4b6:	91 f4       	brne	.+36     	; 0x4dc <Diff_Value+0x4c>
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	54 96       	adiw	r26, 0x14	; 20
     4be:	4d 91       	ld	r20, X+
     4c0:	5c 91       	ld	r21, X
     4c2:	55 97       	sbiw	r26, 0x15	; 21
     4c4:	24 89       	ldd	r18, Z+20	; 0x14
     4c6:	35 89       	ldd	r19, Z+21	; 0x15
     4c8:	42 17       	cp	r20, r18
     4ca:	53 07       	cpc	r21, r19
     4cc:	09 f4       	brne	.+2      	; 0x4d0 <Diff_Value+0x40>
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	29 2f       	mov	r18, r25
     4d2:	38 2f       	mov	r19, r24
     4d4:	05 c0       	rjmp	.+10     	; 0x4e0 <Diff_Value+0x50>
     4d6:	21 e0       	ldi	r18, 0x01	; 1
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	02 c0       	rjmp	.+4      	; 0x4e0 <Diff_Value+0x50>
     4dc:	21 e0       	ldi	r18, 0x01	; 1
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	23 2b       	or	r18, r19
     4e6:	11 f4       	brne	.+4      	; 0x4ec <Diff_Value+0x5c>
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	08 95       	ret

000004ee <main>:

int main(void)
{		
	DDRB |= (1 << PORTB0) | (1 << PORTB1) | (1 << PORTB2) | (1 << PORTB3);
     4ee:	87 b3       	in	r24, 0x17	; 23
     4f0:	8f 60       	ori	r24, 0x0F	; 15
     4f2:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1 << PORTB5) | (1 << PORTB6) | (1 << PORTB7);
     4f4:	87 b3       	in	r24, 0x17	; 23
     4f6:	80 6e       	ori	r24, 0xE0	; 224
     4f8:	87 bb       	out	0x17, r24	; 23
	
	uint8_t *receiveData;
	
	init_uart0();
     4fa:	26 d2       	rcall	.+1100   	; 0x948 <init_uart0>
	init_timer();
     4fc:	4a de       	rcall	.-876    	; 0x192 <init_timer>
	init_pwm();
     4fe:	50 de       	rcall	.-864    	; 0x1a0 <init_pwm>
     500:	78 94       	sei
	
	sei();
     502:	68 94       	set
			{
				Flag_ProdDefect = NORMAL;
			}
			if(strncmp(cmd, "pdno", 4) == 0)
			{
				Flag_ProdDefect = DEFECT;
     504:	cc 24       	eor	r12, r12
     506:	c1 f8       	bld	r12, 1
     508:	d1 2c       	mov	r13, r1
     50a:	ee 24       	eor	r14, r14
				PORTE = 0x00;
				asm("jmp 0");
			}
			if(strncmp(cmd, "pdok", 4) == 0)
			{
				Flag_ProdDefect = NORMAL;
     50c:	e3 94       	inc	r14
     50e:	f1 2c       	mov	r15, r1
     510:	0c e2       	ldi	r16, 0x2C	; 44
     512:	11 e0       	ldi	r17, 0x01	; 1
     514:	0f 2e       	mov	r0, r31
				{
					//buffer에 제품 없어짐, Drop Conv 정지, Stopper close
					if (delay >= Delay_Conv)
					{
						Motor_Port &= ~Motor_Conv_Drop1;
						Motor_Stopper = Pos_Stopper_Close;
     516:	f8 e7       	ldi	r31, 0x78	; 120
     518:	af 2e       	mov	r10, r31
     51a:	b1 2c       	mov	r11, r1
     51c:	f0 2d       	mov	r31, r0
     51e:	0f 2e       	mov	r0, r31
     520:	f8 e8       	ldi	r31, 0x88	; 136
     522:	4f 2e       	mov	r4, r31
     524:	f3 e1       	ldi	r31, 0x13	; 19
     526:	5f 2e       	mov	r5, r31
     528:	f0 2d       	mov	r31, r0
     52a:	0f 2e       	mov	r0, r31
					Seqeunce = 100;
				}
			break;
			
			case 10:	// 제품이 불량일 경우
				Motor_Stopper = Pos_Stopper_Throw;
     52c:	fc e3       	ldi	r31, 0x3C	; 60
     52e:	8f 2e       	mov	r8, r31
     530:	ff e0       	ldi	r31, 0x0F	; 15
     532:	9f 2e       	mov	r9, r31
     534:	f0 2d       	mov	r31, r0
     536:	0f 2e       	mov	r0, r31
				}
			break;
			
			
			case 5:		//Stopper open
				Motor_Stopper = Pos_Stopper_Open;
     538:	f8 eb       	ldi	r31, 0xB8	; 184
     53a:	6f 2e       	mov	r6, r31
     53c:	fb e0       	ldi	r31, 0x0B	; 11
     53e:	7f 2e       	mov	r7, r31
     540:	f0 2d       	mov	r31, r0
     542:	0f 2e       	mov	r0, r31
						Seqeunce++;
					}
					else if(Flag_ProdDefect == DEFECT)
					{
						delay = 0;
						Seqeunce = 10;
     544:	fa e0       	ldi	r31, 0x0A	; 10
     546:	2f 2e       	mov	r2, r31
     548:	31 2c       	mov	r3, r1
     54a:	f0 2d       	mov	r31, r0
	
	while(1)
	{
		/////////////////////////////////////////////////////////////////////////////
		//MES에서 현재 AGV 위치 보내줌(Pick/Drop Stage일 경우)		
		if (isRxString())    // PC로 부터 수신된 Data가 존재 하는지 확인 있으면 아래를 수행 한다.
     54c:	1c d2       	rcall	.+1080   	; 0x986 <isRxString>
     54e:	88 23       	and	r24, r24
     550:	09 f4       	brne	.+2      	; 0x554 <main+0x66>
     552:	a8 c0       	rjmp	.+336    	; 0x6a4 <main+0x1b6>
		{
			receiveData = getRxString();
     554:	1b d2       	rcall	.+1078   	; 0x98c <getRxString>
     556:	64 e3       	ldi	r22, 0x34	; 52
			
			ptr_receiveData = strtok(receiveData, ",");
     558:	71 e0       	ldi	r23, 0x01	; 1
     55a:	4e d2       	rcall	.+1180   	; 0x9f8 <strtok>
     55c:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <ptr_receiveData+0x1>
     560:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <ptr_receiveData>
     564:	00 97       	sbiw	r24, 0x00	; 0
     566:	41 f1       	breq	.+80     	; 0x5b8 <main+0xca>
			while(ptr_receiveData != NULL) {
     568:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <ptr_cnt>
				if(ptr_cnt == 0) {
     56c:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <ptr_cnt+0x1>
     570:	21 15       	cp	r18, r1
     572:	31 05       	cpc	r19, r1
     574:	29 f4       	brne	.+10     	; 0x580 <main+0x92>
     576:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <cnt+0x1>
					cnt = ptr_receiveData;
     57a:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <cnt>
     57e:	07 c0       	rjmp	.+14     	; 0x58e <main+0xa0>
     580:	21 30       	cpi	r18, 0x01	; 1
     582:	31 05       	cpc	r19, r1
				}
				else if(ptr_cnt == 1) {
     584:	21 f4       	brne	.+8      	; 0x58e <main+0xa0>
     586:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <cmd+0x1>
					cmd = ptr_receiveData;
     58a:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <cmd>
     58e:	64 e3       	ldi	r22, 0x34	; 52
				}
				ptr_receiveData = strtok(NULL, ",");
     590:	71 e0       	ldi	r23, 0x01	; 1
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	30 d2       	rcall	.+1120   	; 0x9f8 <strtok>
     598:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <ptr_receiveData+0x1>
     59c:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <ptr_receiveData>
     5a0:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <ptr_cnt>
				ptr_cnt++;
     5a4:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <ptr_cnt+0x1>
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	30 93 99 01 	sts	0x0199, r19	; 0x800199 <ptr_cnt+0x1>
     5b0:	20 93 98 01 	sts	0x0198, r18	; 0x800198 <ptr_cnt>
     5b4:	00 97       	sbiw	r24, 0x00	; 0
     5b6:	c1 f6       	brne	.-80     	; 0x568 <main+0x7a>
		if (isRxString())    // PC로 부터 수신된 Data가 존재 하는지 확인 있으면 아래를 수행 한다.
		{
			receiveData = getRxString();
			
			ptr_receiveData = strtok(receiveData, ",");
			while(ptr_receiveData != NULL) {
     5b8:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <ptr_cnt+0x1>
					cmd = ptr_receiveData;
				}
				ptr_receiveData = strtok(NULL, ",");
				ptr_cnt++;
			}
			ptr_cnt = 0;
     5bc:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <ptr_cnt>
     5c0:	44 e0       	ldi	r20, 0x04	; 4
     5c2:	50 e0       	ldi	r21, 0x00	; 0
			
			if(strncmp(cmd,"auto",4) == 0)
     5c4:	62 e4       	ldi	r22, 0x42	; 66
     5c6:	71 e0       	ldi	r23, 0x01	; 1
     5c8:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <cmd>
     5cc:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <cmd+0x1>
     5d0:	16 d2       	rcall	.+1068   	; 0x9fe <strncmp>
     5d2:	89 2b       	or	r24, r25
     5d4:	69 f4       	brne	.+26     	; 0x5f0 <main+0x102>
     5d6:	f0 92 a7 01 	sts	0x01A7, r15	; 0x8001a7 <Flag_AutoMode+0x1>
			{
				Flag_AutoMode = 1;
     5da:	e0 92 a6 01 	sts	0x01A6, r14	; 0x8001a6 <Flag_AutoMode>
     5de:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <cnt>
				UART0_printf_string(cnt);
     5e2:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <cnt+0x1>
     5e6:	c1 d1       	rcall	.+898    	; 0x96a <UART0_printf_string>
     5e8:	84 e3       	ldi	r24, 0x34	; 52
				UART0_printf_string(",");
     5ea:	91 e0       	ldi	r25, 0x01	; 1
     5ec:	be d1       	rcall	.+892    	; 0x96a <UART0_printf_string>
     5ee:	93 de       	rcall	.-730    	; 0x316 <Send_Value>
				Send_Value();
     5f0:	44 e0       	ldi	r20, 0x04	; 4
     5f2:	50 e0       	ldi	r21, 0x00	; 0
			}
			if(strncmp(cmd,"manu",4) == 0)
     5f4:	67 e4       	ldi	r22, 0x47	; 71
     5f6:	71 e0       	ldi	r23, 0x01	; 1
     5f8:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <cmd>
     5fc:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <cmd+0x1>
     600:	fe d1       	rcall	.+1020   	; 0x9fe <strncmp>
     602:	89 2b       	or	r24, r25
     604:	69 f4       	brne	.+26     	; 0x620 <main+0x132>
     606:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <Flag_AutoMode+0x1>
			{
				Flag_AutoMode = 0;
     60a:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <Flag_AutoMode>
     60e:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <cnt>
				UART0_printf_string(cnt);
     612:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <cnt+0x1>
     616:	a9 d1       	rcall	.+850    	; 0x96a <UART0_printf_string>
     618:	84 e3       	ldi	r24, 0x34	; 52
				UART0_printf_string(",");
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	a6 d1       	rcall	.+844    	; 0x96a <UART0_printf_string>
     61e:	7b de       	rcall	.-778    	; 0x316 <Send_Value>
     620:	44 e0       	ldi	r20, 0x04	; 4
				Send_Value();
     622:	50 e0       	ldi	r21, 0x00	; 0
     624:	6c e4       	ldi	r22, 0x4C	; 76
			}
			if(strncmp(cmd, "stat", 4) == 0)
     626:	71 e0       	ldi	r23, 0x01	; 1
     628:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <cmd>
     62c:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <cmd+0x1>
     630:	e6 d1       	rcall	.+972    	; 0x9fe <strncmp>
     632:	89 2b       	or	r24, r25
     634:	49 f4       	brne	.+18     	; 0x648 <main+0x15a>
     636:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <cnt>
			{
				UART0_printf_string(cnt);
     63a:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <cnt+0x1>
     63e:	95 d1       	rcall	.+810    	; 0x96a <UART0_printf_string>
     640:	84 e3       	ldi	r24, 0x34	; 52
				UART0_printf_string(",");
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	92 d1       	rcall	.+804    	; 0x96a <UART0_printf_string>
     646:	67 de       	rcall	.-818    	; 0x316 <Send_Value>
     648:	44 e0       	ldi	r20, 0x04	; 4
				Send_Value();
     64a:	50 e0       	ldi	r21, 0x00	; 0
     64c:	61 e5       	ldi	r22, 0x51	; 81
			}
			if(strncmp(cmd, "rset", 4) == 0)		// AVR Reset
     64e:	71 e0       	ldi	r23, 0x01	; 1
     650:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <cmd>
     654:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <cmd+0x1>
     658:	d2 d1       	rcall	.+932    	; 0x9fe <strncmp>
     65a:	89 2b       	or	r24, r25
     65c:	39 f4       	brne	.+14     	; 0x66c <main+0x17e>
     65e:	1b ba       	out	0x1b, r1	; 27
     660:	18 ba       	out	0x18, r1	; 24
     662:	15 ba       	out	0x15, r1	; 21
			{
				PORTA = 0x00;
     664:	12 ba       	out	0x12, r1	; 18
				PORTB = 0x00;
     666:	13 b8       	out	0x03, r1	; 3
				PORTC = 0x00;
     668:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
				PORTD = 0x00;
				PORTE = 0x00;
     66c:	c0 91 ee 01 	lds	r28, 0x01EE	; 0x8001ee <cmd>
				asm("jmp 0");
     670:	d0 91 ef 01 	lds	r29, 0x01EF	; 0x8001ef <cmd+0x1>
			}
			if(strncmp(cmd, "pdok", 4) == 0)
     674:	44 e0       	ldi	r20, 0x04	; 4
     676:	50 e0       	ldi	r21, 0x00	; 0
     678:	66 e5       	ldi	r22, 0x56	; 86
     67a:	71 e0       	ldi	r23, 0x01	; 1
     67c:	ce 01       	movw	r24, r28
     67e:	bf d1       	rcall	.+894    	; 0x9fe <strncmp>
     680:	89 2b       	or	r24, r25
     682:	21 f4       	brne	.+8      	; 0x68c <main+0x19e>
     684:	f0 92 a5 01 	sts	0x01A5, r15	; 0x8001a5 <Flag_ProdDefect+0x1>
			{
				Flag_ProdDefect = NORMAL;
     688:	e0 92 a4 01 	sts	0x01A4, r14	; 0x8001a4 <Flag_ProdDefect>
     68c:	44 e0       	ldi	r20, 0x04	; 4
			}
			if(strncmp(cmd, "pdno", 4) == 0)
     68e:	50 e0       	ldi	r21, 0x00	; 0
     690:	6b e5       	ldi	r22, 0x5B	; 91
     692:	71 e0       	ldi	r23, 0x01	; 1
     694:	ce 01       	movw	r24, r28
     696:	b3 d1       	rcall	.+870    	; 0x9fe <strncmp>
     698:	89 2b       	or	r24, r25
     69a:	21 f4       	brne	.+8      	; 0x6a4 <main+0x1b6>
     69c:	d0 92 a5 01 	sts	0x01A5, r13	; 0x8001a5 <Flag_ProdDefect+0x1>
			{
				Flag_ProdDefect = DEFECT;
     6a0:	c0 92 a4 01 	sts	0x01A4, r12	; 0x8001a4 <Flag_ProdDefect>
     6a4:	db dd       	rcall	.-1098   	; 0x25c <Update_Value>
			}
		}
		/////////////////////////////////////////////////////////////////////////////
		// MES에 보내는 데이터 값 상시 업데이트
		Update_Value();		
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	71 e0       	ldi	r23, 0x01	; 1
		
		/////////////////////////////////////////////////////////////////////////////
		// 데이터 값이 변할 시 Event 값으로 MES로 전송
		if(Diff_Value(value, comp_value) == 1)
     6aa:	86 e1       	ldi	r24, 0x16	; 22
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	f0 de       	rcall	.-544    	; 0x490 <Diff_Value>
     6b0:	01 97       	sbiw	r24, 0x01	; 1
     6b2:	81 f4       	brne	.+32     	; 0x6d4 <main+0x1e6>
     6b4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
     6b8:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__DATA_REGION_ORIGIN__+0xd>
		{
			if(comp_value[6] != -1)		// 초기 부팅 시 제외
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	09 f4       	brne	.+2      	; 0x6c2 <main+0x1d4>
     6c0:	3e c1       	rjmp	.+636    	; 0x93e <main+0x450>
     6c2:	bb de       	rcall	.-650    	; 0x43a <Send_Event_Value>
     6c4:	3c c1       	rjmp	.+632    	; 0x93e <main+0x450>
     6c6:	81 91       	ld	r24, Z+
			{
				Send_Event_Value();
     6c8:	91 91       	ld	r25, Z+
     6ca:	8d 93       	st	X+, r24
     6cc:	9d 93       	st	X+, r25
			}
			for(int i = 6; i < VALUE_SIZE; i++)
			{
				comp_value[i] = value[i];
     6ce:	e0 17       	cp	r30, r16
     6d0:	f1 07       	cpc	r31, r17
     6d2:	c9 f7       	brne	.-14     	; 0x6c6 <main+0x1d8>
     6d4:	04 9b       	sbis	0x00, 4	; 0
		{
			if(comp_value[6] != -1)		// 초기 부팅 시 제외
			{
				Send_Event_Value();
			}
			for(int i = 6; i < VALUE_SIZE; i++)
     6d6:	0d c0       	rjmp	.+26     	; 0x6f2 <main+0x204>
     6d8:	03 99       	sbic	0x00, 3	; 0
     6da:	0b c0       	rjmp	.+22     	; 0x6f2 <main+0x204>
			}
		}
		
		/////////////////////////////////////////////////////////////////////////////
		// Pick, Drop ready 상태 초기화
		if ((Sensor_Port & Sensor_Pick_AGV) == Sensor_Pick_AGV &&							// Pick stage에 AGV가 없고
     6dc:	88 b3       	in	r24, 0x18	; 24
     6de:	98 b3       	in	r25, 0x18	; 24
     6e0:	98 70       	andi	r25, 0x08	; 8
     6e2:	84 70       	andi	r24, 0x04	; 4
			(Sensor_Port & Sensor_Pick_stage) == 0 &&										// Pick stage에 물건이 있고
			(((Motor_Port & Motor_Conv_Pick1) | (Motor_Port & Motor_Conv_Pick2)) == 0))		// Pick Conv가 돌지 않으면
     6e4:	89 2b       	or	r24, r25
     6e6:	29 f4       	brne	.+10     	; 0x6f2 <main+0x204>
		}
		
		/////////////////////////////////////////////////////////////////////////////
		// Pick, Drop ready 상태 초기화
		if ((Sensor_Port & Sensor_Pick_AGV) == Sensor_Pick_AGV &&							// Pick stage에 AGV가 없고
			(Sensor_Port & Sensor_Pick_stage) == 0 &&										// Pick stage에 물건이 있고
     6e8:	f0 92 a1 01 	sts	0x01A1, r15	; 0x8001a1 <Pick_ready+0x1>
     6ec:	e0 92 a0 01 	sts	0x01A0, r14	; 0x8001a0 <Pick_ready>
			(((Motor_Port & Motor_Conv_Pick1) | (Motor_Port & Motor_Conv_Pick2)) == 0))		// Pick Conv가 돌지 않으면
		{
			Pick_ready = 1;
     6f0:	04 c0       	rjmp	.+8      	; 0x6fa <main+0x20c>
     6f2:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <Pick_ready+0x1>
     6f6:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <Pick_ready>
		}
		else
		{
			Pick_ready = 0;
     6fa:	00 9b       	sbis	0x00, 0	; 0
     6fc:	15 c0       	rjmp	.+42     	; 0x728 <main+0x23a>
     6fe:	01 9b       	sbis	0x00, 1	; 0
     700:	13 c0       	rjmp	.+38     	; 0x728 <main+0x23a>
		}
		if ((Sensor_Port & Sensor_Drop_AGV) == Sensor_Drop_AGV &&							// Drop stage에 AGV가 없고
     702:	02 9b       	sbis	0x00, 2	; 0
     704:	11 c0       	rjmp	.+34     	; 0x728 <main+0x23a>
     706:	88 b3       	in	r24, 0x18	; 24
     708:	98 b3       	in	r25, 0x18	; 24
			(Sensor_Port & Sensor_Drop_stage) == Sensor_Drop_stage &&						// Drop stage에 물건이 없고
     70a:	92 70       	andi	r25, 0x02	; 2
     70c:	81 70       	andi	r24, 0x01	; 1
			(Sensor_Port & Sensor_Buffer_stage) == Sensor_Buffer_stage &&					// Buffer stage에 물건이 없고
			(((Motor_Port & Motor_Conv_Drop1) | (Motor_Port & Motor_Conv_Drop2)) == 0) &&	// Drop Conv가 돌지 않고
     70e:	89 2b       	or	r24, r25
     710:	59 f4       	brne	.+22     	; 0x728 <main+0x23a>
		{
			Pick_ready = 0;
		}
		if ((Sensor_Port & Sensor_Drop_AGV) == Sensor_Drop_AGV &&							// Drop stage에 AGV가 없고
			(Sensor_Port & Sensor_Drop_stage) == Sensor_Drop_stage &&						// Drop stage에 물건이 없고
			(Sensor_Port & Sensor_Buffer_stage) == Sensor_Buffer_stage &&					// Buffer stage에 물건이 없고
     712:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <Motor_Stopper_open>
     716:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <Motor_Stopper_open+0x1>
			(((Motor_Port & Motor_Conv_Drop1) | (Motor_Port & Motor_Conv_Drop2)) == 0) &&	// Drop Conv가 돌지 않고
     71a:	89 2b       	or	r24, r25
     71c:	29 f4       	brne	.+10     	; 0x728 <main+0x23a>
     71e:	f0 92 a3 01 	sts	0x01A3, r15	; 0x8001a3 <Drop_ready+0x1>
     722:	e0 92 a2 01 	sts	0x01A2, r14	; 0x8001a2 <Drop_ready>
			(Motor_Stopper_open == 0))														// Stopper가 닫혀 있으면
		{
			Drop_ready = 1;
     726:	04 c0       	rjmp	.+8      	; 0x730 <main+0x242>
     728:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <Drop_ready+0x1>
     72c:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <Drop_ready>
		}
		else
		{
			Drop_ready = 0;
     730:	e0 91 9c 01 	lds	r30, 0x019C	; 0x80019c <Seqeunce>
     734:	f0 91 9d 01 	lds	r31, 0x019D	; 0x80019d <Seqeunce+0x1>
		}
				
		/////////////////////////////////////////////////////////////////////////////
		//Sequence		
		switch (Seqeunce)
     738:	e5 36       	cpi	r30, 0x65	; 101
     73a:	f1 05       	cpc	r31, r1
     73c:	08 f0       	brcs	.+2      	; 0x740 <main+0x252>
     73e:	06 cf       	rjmp	.-500    	; 0x54c <main+0x5e>
     740:	ea 5b       	subi	r30, 0xBA	; 186
     742:	ff 4f       	sbci	r31, 0xFF	; 255
     744:	50 c1       	rjmp	.+672    	; 0x9e6 <__tablejump2__>
     746:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <Flag_AutoMode>
     74a:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <Flag_AutoMode+0x1>
		{
			case 0:		// seq start
				if (Flag_AutoMode == 1)
     74e:	01 97       	sbiw	r24, 0x01	; 1
     750:	09 f0       	breq	.+2      	; 0x754 <main+0x266>
     752:	fc ce       	rjmp	.-520    	; 0x54c <main+0x5e>
     754:	f0 92 9d 01 	sts	0x019D, r15	; 0x80019d <Seqeunce+0x1>
     758:	e0 92 9c 01 	sts	0x019C, r14	; 0x80019c <Seqeunce>
				{
					Seqeunce++;
     75c:	f7 ce       	rjmp	.-530    	; 0x54c <main+0x5e>
     75e:	00 9b       	sbis	0x00, 0	; 0
     760:	f5 ce       	rjmp	.-534    	; 0x54c <main+0x5e>
     762:	01 99       	sbic	0x00, 1	; 0
     764:	f3 ce       	rjmp	.-538    	; 0x54c <main+0x5e>
				}
			break;
			
			case 1:		//Drop stage에 제품이 있고, AGV가 없을 때
				if((Sensor_Port & Sensor_Drop_AGV) == Sensor_Drop_AGV && (Sensor_Port & Sensor_Drop_stage) == 0)
     766:	d0 92 9d 01 	sts	0x019D, r13	; 0x80019d <Seqeunce+0x1>
     76a:	c0 92 9c 01 	sts	0x019C, r12	; 0x80019c <Seqeunce>
				{
					Seqeunce++;
     76e:	ee ce       	rjmp	.-548    	; 0x54c <main+0x5e>
     770:	02 9b       	sbis	0x00, 2	; 0
     772:	06 c0       	rjmp	.+12     	; 0x780 <main+0x292>
     774:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <tmr+0x1>
				} 
			break;
			
			case 2:		// buffer sensor 들어올때까지 Drop Conv 구동
				if((Sensor_Port & Sensor_Buffer_stage) == Sensor_Buffer_stage)
     778:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <tmr>
				{
					tmr = 0;
     77c:	c0 9a       	sbi	0x18, 0	; 24
     77e:	e6 ce       	rjmp	.-564    	; 0x54c <main+0x5e>
     780:	02 99       	sbic	0x00, 2	; 0
     782:	e4 ce       	rjmp	.-568    	; 0x54c <main+0x5e>
					Motor_Port |= Motor_Conv_Drop1;
     784:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <tmr>
				}
				else if((Sensor_Port & Sensor_Buffer_stage) == 0)
     788:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <tmr+0x1>
				{
					if(tmr >= 32) {
     78c:	80 97       	sbiw	r24, 0x20	; 32
     78e:	0c f4       	brge	.+2      	; 0x792 <main+0x2a4>
     790:	dd ce       	rjmp	.-582    	; 0x54c <main+0x5e>
     792:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <tmr+0x1>
     796:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <tmr>
						tmr = 0;
     79a:	c0 98       	cbi	0x18, 0	; 24
     79c:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <Seqeunce>
     7a0:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <Seqeunce+0x1>
						Motor_Port &= ~Motor_Conv_Drop1;
						Seqeunce++;
     7a4:	01 96       	adiw	r24, 0x01	; 1
     7a6:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <Seqeunce+0x1>
     7aa:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <Seqeunce>
     7ae:	ce ce       	rjmp	.-612    	; 0x54c <main+0x5e>
     7b0:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <Flag_ProdDefect>
     7b4:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <Flag_ProdDefect+0x1>
					}
				}
			break;
			
			case 3:		// 제품 불량 판단
				if(Flag_ProdDefect != INITIAL)
     7b8:	00 97       	sbiw	r24, 0x00	; 0
     7ba:	09 f4       	brne	.+2      	; 0x7be <main+0x2d0>
     7bc:	c7 ce       	rjmp	.-626    	; 0x54c <main+0x5e>
     7be:	81 30       	cpi	r24, 0x01	; 1
     7c0:	91 05       	cpc	r25, r1
     7c2:	39 f4       	brne	.+14     	; 0x7d2 <main+0x2e4>
     7c4:	84 e0       	ldi	r24, 0x04	; 4
				{
					if(Flag_ProdDefect == NORMAL)
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <Seqeunce+0x1>
					{
						Seqeunce++;
     7cc:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <Seqeunce>
     7d0:	bd ce       	rjmp	.-646    	; 0x54c <main+0x5e>
     7d2:	02 97       	sbiw	r24, 0x02	; 2
     7d4:	09 f0       	breq	.+2      	; 0x7d8 <main+0x2ea>
     7d6:	ba ce       	rjmp	.-652    	; 0x54c <main+0x5e>
     7d8:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <delay+0x1>
					}
					else if(Flag_ProdDefect == DEFECT)
     7dc:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <delay>
					{
						delay = 0;
     7e0:	30 92 9d 01 	sts	0x019D, r3	; 0x80019d <Seqeunce+0x1>
     7e4:	20 92 9c 01 	sts	0x019C, r2	; 0x80019c <Seqeunce>
						Seqeunce = 10;
     7e8:	b1 ce       	rjmp	.-670    	; 0x54c <main+0x5e>
     7ea:	03 9b       	sbis	0x00, 3	; 0
     7ec:	af ce       	rjmp	.-674    	; 0x54c <main+0x5e>
     7ee:	04 9b       	sbis	0x00, 4	; 0
     7f0:	ad ce       	rjmp	.-678    	; 0x54c <main+0x5e>
					}
				}
			break;
			
			case 4:		//Pick stage로 보내기 전에 확인(제품, AGV X)
				if((Sensor_Port & Sensor_Pick_stage) == Sensor_Pick_stage && (Sensor_Port & Sensor_Pick_AGV) == Sensor_Pick_AGV)
     7f2:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <delay+0x1>
     7f6:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <delay>
				{
					delay = 0;
     7fa:	85 e0       	ldi	r24, 0x05	; 5
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <Seqeunce+0x1>
					Seqeunce++;
     802:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <Seqeunce>
     806:	a2 ce       	rjmp	.-700    	; 0x54c <main+0x5e>
     808:	f5 01       	movw	r30, r10
     80a:	71 82       	std	Z+1, r7	; 0x01
     80c:	60 82       	st	Z, r6
     80e:	f0 92 9f 01 	sts	0x019F, r15	; 0x80019f <Motor_Stopper_open+0x1>
				}
			break;
			
			
			case 5:		//Stopper open
				Motor_Stopper = Pos_Stopper_Open;
     812:	e0 92 9e 01 	sts	0x019E, r14	; 0x80019e <Motor_Stopper_open>
				Motor_Stopper_open = 1;
     816:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <delay>
     81a:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <delay+0x1>
				if(delay >= Delay_Stopper)
     81e:	80 34       	cpi	r24, 0x40	; 64
     820:	91 05       	cpc	r25, r1
     822:	0c f4       	brge	.+2      	; 0x826 <main+0x338>
     824:	93 ce       	rjmp	.-730    	; 0x54c <main+0x5e>
     826:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <Seqeunce>
     82a:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <Seqeunce+0x1>
				{
					Seqeunce++;
     82e:	01 96       	adiw	r24, 0x01	; 1
     830:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <Seqeunce+0x1>
     834:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <Seqeunce>
     838:	89 ce       	rjmp	.-750    	; 0x54c <main+0x5e>
     83a:	02 99       	sbic	0x00, 2	; 0
     83c:	07 c0       	rjmp	.+14     	; 0x84c <main+0x35e>
     83e:	c0 9a       	sbi	0x18, 0	; 24
     840:	c2 9a       	sbi	0x18, 2	; 24
				}
			break;
			
			case 6:		//Buffer stage에서 Pick stage로 제품 보내기
				if((Sensor_Port & Sensor_Buffer_stage) == 0)
     842:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <delay+0x1>
				{
					//buffer에 제품 있으므로 Drop, Pick Conv 계속 구동
					Motor_Port |= Motor_Conv_Drop1;
     846:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <delay>
					Motor_Port |= Motor_Conv_Pick1;
					delay = 0;
     84a:	80 ce       	rjmp	.-768    	; 0x54c <main+0x5e>
     84c:	02 9b       	sbis	0x00, 2	; 0
     84e:	7e ce       	rjmp	.-772    	; 0x54c <main+0x5e>
     850:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <delay>
				}
				else if((Sensor_Port & Sensor_Buffer_stage) == Sensor_Buffer_stage)
     854:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <delay+0x1>
				{
					//buffer에 제품 없어짐, Drop Conv 정지, Stopper close
					if (delay >= Delay_Conv)
     858:	80 34       	cpi	r24, 0x40	; 64
     85a:	91 05       	cpc	r25, r1
     85c:	0c f4       	brge	.+2      	; 0x860 <main+0x372>
     85e:	76 ce       	rjmp	.-788    	; 0x54c <main+0x5e>
     860:	c0 98       	cbi	0x18, 0	; 24
     862:	f5 01       	movw	r30, r10
     864:	51 82       	std	Z+1, r5	; 0x01
     866:	40 82       	st	Z, r4
					{
						Motor_Port &= ~Motor_Conv_Drop1;
     868:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <Motor_Stopper_open+0x1>
						
						Motor_Stopper = Pos_Stopper_Close;
     86c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <Motor_Stopper_open>
						Motor_Stopper_open = 0;
     870:	f0 92 a3 01 	sts	0x01A3, r15	; 0x8001a3 <Drop_ready+0x1>
     874:	e0 92 a2 01 	sts	0x01A2, r14	; 0x8001a2 <Drop_ready>
						Drop_ready = 1;
     878:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <Seqeunce>
     87c:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <Seqeunce+0x1>
						
						Seqeunce++;
     880:	01 96       	adiw	r24, 0x01	; 1
     882:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <Seqeunce+0x1>
     886:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <Seqeunce>
     88a:	60 ce       	rjmp	.-832    	; 0x54c <main+0x5e>
     88c:	03 99       	sbic	0x00, 3	; 0
     88e:	5e ce       	rjmp	.-836    	; 0x54c <main+0x5e>
     890:	03 99       	sbic	0x00, 3	; 0
     892:	5c ce       	rjmp	.-840    	; 0x54c <main+0x5e>
					}
				}
			break;
			
			case 7:		// Pick stage 감지 후 Pick Conv 정지
				if((Sensor_Port & Sensor_Pick_stage) == Sensor_Pick_stage)
     894:	c2 98       	cbi	0x18, 2	; 24
     896:	84 e6       	ldi	r24, 0x64	; 100
				{
					//pick stage에 제품 도착 안했으므로 Pick Conv 계속 구동
				}
				else if((Sensor_Port & Sensor_Pick_stage) == 0)
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <Seqeunce+0x1>
				{
					//pick stage 제품 도착 완료, Pick Conv 정지
					Motor_Port &= ~Motor_Conv_Pick1;
					Seqeunce = 100;
     89e:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <Seqeunce>
     8a2:	54 ce       	rjmp	.-856    	; 0x54c <main+0x5e>
     8a4:	f5 01       	movw	r30, r10
     8a6:	91 82       	std	Z+1, r9	; 0x01
     8a8:	80 82       	st	Z, r8
     8aa:	f0 92 9f 01 	sts	0x019F, r15	; 0x80019f <Motor_Stopper_open+0x1>
				}
			break;
			
			case 10:	// 제품이 불량일 경우
				Motor_Stopper = Pos_Stopper_Throw;
     8ae:	e0 92 9e 01 	sts	0x019E, r14	; 0x80019e <Motor_Stopper_open>
				Motor_Stopper_open = 1;
     8b2:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <delay>
     8b6:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <delay+0x1>
				if(delay >= Delay_Stopper)
     8ba:	80 34       	cpi	r24, 0x40	; 64
     8bc:	91 05       	cpc	r25, r1
     8be:	0c f4       	brge	.+2      	; 0x8c2 <main+0x3d4>
     8c0:	45 ce       	rjmp	.-886    	; 0x54c <main+0x5e>
     8c2:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <Seqeunce>
     8c6:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <Seqeunce+0x1>
				{
					Seqeunce++;
     8ca:	01 96       	adiw	r24, 0x01	; 1
     8cc:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <Seqeunce+0x1>
     8d0:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <Seqeunce>
     8d4:	3b ce       	rjmp	.-906    	; 0x54c <main+0x5e>
     8d6:	02 99       	sbic	0x00, 2	; 0
     8d8:	06 c0       	rjmp	.+12     	; 0x8e6 <main+0x3f8>
     8da:	c0 9a       	sbi	0x18, 0	; 24
     8dc:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <delay+0x1>
				}
			break;
			
			case 11:	// 제품 버리기
				if((Sensor_Port & Sensor_Buffer_stage) == 0)
     8e0:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <delay>
				{
					//buffer에 제품 있으므로 Drop, Pick Conv 계속 구동
					Motor_Port |= Motor_Conv_Drop1;
					delay = 0;
     8e4:	33 ce       	rjmp	.-922    	; 0x54c <main+0x5e>
     8e6:	02 9b       	sbis	0x00, 2	; 0
     8e8:	31 ce       	rjmp	.-926    	; 0x54c <main+0x5e>
     8ea:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <delay>
				}
				else if((Sensor_Port & Sensor_Buffer_stage) == Sensor_Buffer_stage)
     8ee:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <delay+0x1>
				{
					//buffer에 제품 없어짐, Drop Conv 정지, Stopper close
					if (delay >= Delay_Conv)
     8f2:	80 34       	cpi	r24, 0x40	; 64
     8f4:	91 05       	cpc	r25, r1
     8f6:	0c f4       	brge	.+2      	; 0x8fa <main+0x40c>
     8f8:	29 ce       	rjmp	.-942    	; 0x54c <main+0x5e>
     8fa:	c0 98       	cbi	0x18, 0	; 24
     8fc:	f5 01       	movw	r30, r10
     8fe:	51 82       	std	Z+1, r5	; 0x01
     900:	40 82       	st	Z, r4
					{
						Motor_Port &= ~Motor_Conv_Drop1;
     902:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <Motor_Stopper_open+0x1>
						Motor_Stopper = Pos_Stopper_Close;
     906:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <Motor_Stopper_open>
						Motor_Stopper_open = 0;
     90a:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <Flag_ProdDefect+0x1>
     90e:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <Flag_ProdDefect>
						
						Flag_ProdDefect = INITIAL;
     912:	f0 92 a3 01 	sts	0x01A3, r15	; 0x8001a3 <Drop_ready+0x1>
     916:	e0 92 a2 01 	sts	0x01A2, r14	; 0x8001a2 <Drop_ready>
						Drop_ready = 1;
     91a:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <Seqeunce+0x1>
     91e:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Seqeunce>
						Seqeunce = 0;
     922:	14 ce       	rjmp	.-984    	; 0x54c <main+0x5e>
     924:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <Flag_ProdDefect+0x1>
     928:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <Flag_ProdDefect>
					}
				}
			break;
			
			case 100:		//pick ready
				Flag_ProdDefect = INITIAL;
     92c:	f0 92 a1 01 	sts	0x01A1, r15	; 0x8001a1 <Pick_ready+0x1>
     930:	e0 92 a0 01 	sts	0x01A0, r14	; 0x8001a0 <Pick_ready>
				Pick_ready = 1;
     934:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <Seqeunce+0x1>
     938:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Seqeunce>
				Seqeunce = 0;
     93c:	07 ce       	rjmp	.-1010   	; 0x54c <main+0x5e>
     93e:	e2 e2       	ldi	r30, 0x22	; 34
     940:	f1 e0       	ldi	r31, 0x01	; 1
     942:	ac e0       	ldi	r26, 0x0C	; 12
			break;
     944:	b1 e0       	ldi	r27, 0x01	; 1
     946:	bf ce       	rjmp	.-642    	; 0x6c6 <main+0x1d8>

00000948 <init_uart0>:
     948:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     94c:	8f ec       	ldi	r24, 0xCF	; 207
     94e:	89 b9       	out	0x09, r24	; 9
     950:	59 9a       	sbi	0x0b, 1	; 11
     952:	e5 e9       	ldi	r30, 0x95	; 149
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	80 81       	ld	r24, Z
     958:	86 60       	ori	r24, 0x06	; 6
     95a:	80 83       	st	Z, r24
     95c:	88 e9       	ldi	r24, 0x98	; 152
     95e:	8a b9       	out	0x0a, r24	; 10
     960:	08 95       	ret

00000962 <UART0_transmit>:
     962:	5d 9b       	sbis	0x0b, 5	; 11
     964:	fe cf       	rjmp	.-4      	; 0x962 <UART0_transmit>
     966:	8c b9       	out	0x0c, r24	; 12
     968:	08 95       	ret

0000096a <UART0_printf_string>:
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	ec 01       	movw	r28, r24
     970:	88 81       	ld	r24, Y
     972:	88 23       	and	r24, r24
     974:	29 f0       	breq	.+10     	; 0x980 <UART0_printf_string+0x16>
     976:	21 96       	adiw	r28, 0x01	; 1
     978:	f4 df       	rcall	.-24     	; 0x962 <UART0_transmit>
     97a:	89 91       	ld	r24, Y+
     97c:	81 11       	cpse	r24, r1
     97e:	fc cf       	rjmp	.-8      	; 0x978 <UART0_printf_string+0xe>
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	08 95       	ret

00000986 <isRxString>:
     986:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <rxReadyFlag>
     98a:	08 95       	ret

0000098c <getRxString>:
     98c:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <rxReadyFlag>
     990:	8a ea       	ldi	r24, 0xAA	; 170
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	08 95       	ret

00000996 <UART0_ISR_Receive>:
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	1f 92       	push	r1
     99c:	cd b7       	in	r28, 0x3d	; 61
     99e:	de b7       	in	r29, 0x3e	; 62
     9a0:	8c b1       	in	r24, 0x0c	; 12
     9a2:	89 83       	std	Y+1, r24	; 0x01
     9a4:	89 81       	ldd	r24, Y+1	; 0x01
     9a6:	8a 30       	cpi	r24, 0x0A	; 10
     9a8:	19 f0       	breq	.+6      	; 0x9b0 <UART0_ISR_Receive+0x1a>
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	8d 30       	cpi	r24, 0x0D	; 13
     9ae:	61 f4       	brne	.+24     	; 0x9c8 <UART0_ISR_Receive+0x32>
     9b0:	e0 91 a8 01 	lds	r30, 0x01A8	; 0x8001a8 <head.1771>
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	e6 55       	subi	r30, 0x56	; 86
     9b8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ba:	10 82       	st	Z, r1
     9bc:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <head.1771>
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <rxReadyFlag>
     9c6:	0b c0       	rjmp	.+22     	; 0x9de <UART0_ISR_Receive+0x48>
     9c8:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <head.1771>
     9cc:	e8 2f       	mov	r30, r24
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	99 81       	ldd	r25, Y+1	; 0x01
     9d2:	e6 55       	subi	r30, 0x56	; 86
     9d4:	fe 4f       	sbci	r31, 0xFE	; 254
     9d6:	90 83       	st	Z, r25
     9d8:	8f 5f       	subi	r24, 0xFF	; 255
     9da:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <head.1771>
     9de:	0f 90       	pop	r0
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	08 95       	ret

000009e6 <__tablejump2__>:
     9e6:	ee 0f       	add	r30, r30
     9e8:	ff 1f       	adc	r31, r31
     9ea:	00 24       	eor	r0, r0
     9ec:	00 1c       	adc	r0, r0
     9ee:	0b be       	out	0x3b, r0	; 59
     9f0:	07 90       	elpm	r0, Z+
     9f2:	f6 91       	elpm	r31, Z
     9f4:	e0 2d       	mov	r30, r0
     9f6:	09 94       	ijmp

000009f8 <strtok>:
     9f8:	40 e6       	ldi	r20, 0x60	; 96
     9fa:	51 e0       	ldi	r21, 0x01	; 1
     9fc:	0e c0       	rjmp	.+28     	; 0xa1a <strtok_r>

000009fe <strncmp>:
     9fe:	fb 01       	movw	r30, r22
     a00:	dc 01       	movw	r26, r24
     a02:	41 50       	subi	r20, 0x01	; 1
     a04:	50 40       	sbci	r21, 0x00	; 0
     a06:	30 f0       	brcs	.+12     	; 0xa14 <strncmp+0x16>
     a08:	8d 91       	ld	r24, X+
     a0a:	01 90       	ld	r0, Z+
     a0c:	80 19       	sub	r24, r0
     a0e:	19 f4       	brne	.+6      	; 0xa16 <strncmp+0x18>
     a10:	00 20       	and	r0, r0
     a12:	b9 f7       	brne	.-18     	; 0xa02 <strncmp+0x4>
     a14:	88 1b       	sub	r24, r24
     a16:	99 0b       	sbc	r25, r25
     a18:	08 95       	ret

00000a1a <strtok_r>:
     a1a:	fa 01       	movw	r30, r20
     a1c:	a1 91       	ld	r26, Z+
     a1e:	b0 81       	ld	r27, Z
     a20:	00 97       	sbiw	r24, 0x00	; 0
     a22:	19 f4       	brne	.+6      	; 0xa2a <strtok_r+0x10>
     a24:	10 97       	sbiw	r26, 0x00	; 0
     a26:	e1 f0       	breq	.+56     	; 0xa60 <strtok_r+0x46>
     a28:	cd 01       	movw	r24, r26
     a2a:	dc 01       	movw	r26, r24
     a2c:	cd 01       	movw	r24, r26
     a2e:	0d 90       	ld	r0, X+
     a30:	00 20       	and	r0, r0
     a32:	11 f4       	brne	.+4      	; 0xa38 <strtok_r+0x1e>
     a34:	c0 01       	movw	r24, r0
     a36:	13 c0       	rjmp	.+38     	; 0xa5e <strtok_r+0x44>
     a38:	fb 01       	movw	r30, r22
     a3a:	21 91       	ld	r18, Z+
     a3c:	22 23       	and	r18, r18
     a3e:	19 f0       	breq	.+6      	; 0xa46 <strtok_r+0x2c>
     a40:	20 15       	cp	r18, r0
     a42:	d9 f7       	brne	.-10     	; 0xa3a <strtok_r+0x20>
     a44:	f3 cf       	rjmp	.-26     	; 0xa2c <strtok_r+0x12>
     a46:	fb 01       	movw	r30, r22
     a48:	21 91       	ld	r18, Z+
     a4a:	20 15       	cp	r18, r0
     a4c:	19 f4       	brne	.+6      	; 0xa54 <strtok_r+0x3a>
     a4e:	1e 92       	st	-X, r1
     a50:	11 96       	adiw	r26, 0x01	; 1
     a52:	06 c0       	rjmp	.+12     	; 0xa60 <strtok_r+0x46>
     a54:	22 23       	and	r18, r18
     a56:	c1 f7       	brne	.-16     	; 0xa48 <strtok_r+0x2e>
     a58:	0d 90       	ld	r0, X+
     a5a:	00 20       	and	r0, r0
     a5c:	a1 f7       	brne	.-24     	; 0xa46 <strtok_r+0x2c>
     a5e:	d0 01       	movw	r26, r0
     a60:	fa 01       	movw	r30, r20
     a62:	a1 93       	st	Z+, r26
     a64:	b0 83       	st	Z, r27
     a66:	08 95       	ret

00000a68 <sprintf>:
     a68:	0f 93       	push	r16
     a6a:	1f 93       	push	r17
     a6c:	cf 93       	push	r28
     a6e:	df 93       	push	r29
     a70:	cd b7       	in	r28, 0x3d	; 61
     a72:	de b7       	in	r29, 0x3e	; 62
     a74:	2e 97       	sbiw	r28, 0x0e	; 14
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	f8 94       	cli
     a7a:	de bf       	out	0x3e, r29	; 62
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	cd bf       	out	0x3d, r28	; 61
     a80:	0d 89       	ldd	r16, Y+21	; 0x15
     a82:	1e 89       	ldd	r17, Y+22	; 0x16
     a84:	86 e0       	ldi	r24, 0x06	; 6
     a86:	8c 83       	std	Y+4, r24	; 0x04
     a88:	1a 83       	std	Y+2, r17	; 0x02
     a8a:	09 83       	std	Y+1, r16	; 0x01
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
     a8e:	9f e7       	ldi	r25, 0x7F	; 127
     a90:	9e 83       	std	Y+6, r25	; 0x06
     a92:	8d 83       	std	Y+5, r24	; 0x05
     a94:	ae 01       	movw	r20, r28
     a96:	47 5e       	subi	r20, 0xE7	; 231
     a98:	5f 4f       	sbci	r21, 0xFF	; 255
     a9a:	6f 89       	ldd	r22, Y+23	; 0x17
     a9c:	78 8d       	ldd	r23, Y+24	; 0x18
     a9e:	ce 01       	movw	r24, r28
     aa0:	01 96       	adiw	r24, 0x01	; 1
     aa2:	10 d0       	rcall	.+32     	; 0xac4 <vfprintf>
     aa4:	ef 81       	ldd	r30, Y+7	; 0x07
     aa6:	f8 85       	ldd	r31, Y+8	; 0x08
     aa8:	e0 0f       	add	r30, r16
     aaa:	f1 1f       	adc	r31, r17
     aac:	10 82       	st	Z, r1
     aae:	2e 96       	adiw	r28, 0x0e	; 14
     ab0:	0f b6       	in	r0, 0x3f	; 63
     ab2:	f8 94       	cli
     ab4:	de bf       	out	0x3e, r29	; 62
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	cd bf       	out	0x3d, r28	; 61
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	1f 91       	pop	r17
     ac0:	0f 91       	pop	r16
     ac2:	08 95       	ret

00000ac4 <vfprintf>:
     ac4:	2f 92       	push	r2
     ac6:	3f 92       	push	r3
     ac8:	4f 92       	push	r4
     aca:	5f 92       	push	r5
     acc:	6f 92       	push	r6
     ace:	7f 92       	push	r7
     ad0:	8f 92       	push	r8
     ad2:	9f 92       	push	r9
     ad4:	af 92       	push	r10
     ad6:	bf 92       	push	r11
     ad8:	cf 92       	push	r12
     ada:	df 92       	push	r13
     adc:	ef 92       	push	r14
     ade:	ff 92       	push	r15
     ae0:	0f 93       	push	r16
     ae2:	1f 93       	push	r17
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	2b 97       	sbiw	r28, 0x0b	; 11
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	f8 94       	cli
     af2:	de bf       	out	0x3e, r29	; 62
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	cd bf       	out	0x3d, r28	; 61
     af8:	6c 01       	movw	r12, r24
     afa:	7b 01       	movw	r14, r22
     afc:	8a 01       	movw	r16, r20
     afe:	fc 01       	movw	r30, r24
     b00:	17 82       	std	Z+7, r1	; 0x07
     b02:	16 82       	std	Z+6, r1	; 0x06
     b04:	83 81       	ldd	r24, Z+3	; 0x03
     b06:	81 ff       	sbrs	r24, 1
     b08:	bf c1       	rjmp	.+894    	; 0xe88 <vfprintf+0x3c4>
     b0a:	ce 01       	movw	r24, r28
     b0c:	01 96       	adiw	r24, 0x01	; 1
     b0e:	3c 01       	movw	r6, r24
     b10:	f6 01       	movw	r30, r12
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	f7 01       	movw	r30, r14
     b16:	93 fd       	sbrc	r25, 3
     b18:	85 91       	lpm	r24, Z+
     b1a:	93 ff       	sbrs	r25, 3
     b1c:	81 91       	ld	r24, Z+
     b1e:	7f 01       	movw	r14, r30
     b20:	88 23       	and	r24, r24
     b22:	09 f4       	brne	.+2      	; 0xb26 <vfprintf+0x62>
     b24:	ad c1       	rjmp	.+858    	; 0xe80 <vfprintf+0x3bc>
     b26:	85 32       	cpi	r24, 0x25	; 37
     b28:	39 f4       	brne	.+14     	; 0xb38 <vfprintf+0x74>
     b2a:	93 fd       	sbrc	r25, 3
     b2c:	85 91       	lpm	r24, Z+
     b2e:	93 ff       	sbrs	r25, 3
     b30:	81 91       	ld	r24, Z+
     b32:	7f 01       	movw	r14, r30
     b34:	85 32       	cpi	r24, 0x25	; 37
     b36:	21 f4       	brne	.+8      	; 0xb40 <vfprintf+0x7c>
     b38:	b6 01       	movw	r22, r12
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	d6 d1       	rcall	.+940    	; 0xeea <fputc>
     b3e:	e8 cf       	rjmp	.-48     	; 0xb10 <vfprintf+0x4c>
     b40:	91 2c       	mov	r9, r1
     b42:	21 2c       	mov	r2, r1
     b44:	31 2c       	mov	r3, r1
     b46:	ff e1       	ldi	r31, 0x1F	; 31
     b48:	f3 15       	cp	r31, r3
     b4a:	d8 f0       	brcs	.+54     	; 0xb82 <vfprintf+0xbe>
     b4c:	8b 32       	cpi	r24, 0x2B	; 43
     b4e:	79 f0       	breq	.+30     	; 0xb6e <vfprintf+0xaa>
     b50:	38 f4       	brcc	.+14     	; 0xb60 <vfprintf+0x9c>
     b52:	80 32       	cpi	r24, 0x20	; 32
     b54:	79 f0       	breq	.+30     	; 0xb74 <vfprintf+0xb0>
     b56:	83 32       	cpi	r24, 0x23	; 35
     b58:	a1 f4       	brne	.+40     	; 0xb82 <vfprintf+0xbe>
     b5a:	23 2d       	mov	r18, r3
     b5c:	20 61       	ori	r18, 0x10	; 16
     b5e:	1d c0       	rjmp	.+58     	; 0xb9a <vfprintf+0xd6>
     b60:	8d 32       	cpi	r24, 0x2D	; 45
     b62:	61 f0       	breq	.+24     	; 0xb7c <vfprintf+0xb8>
     b64:	80 33       	cpi	r24, 0x30	; 48
     b66:	69 f4       	brne	.+26     	; 0xb82 <vfprintf+0xbe>
     b68:	23 2d       	mov	r18, r3
     b6a:	21 60       	ori	r18, 0x01	; 1
     b6c:	16 c0       	rjmp	.+44     	; 0xb9a <vfprintf+0xd6>
     b6e:	83 2d       	mov	r24, r3
     b70:	82 60       	ori	r24, 0x02	; 2
     b72:	38 2e       	mov	r3, r24
     b74:	e3 2d       	mov	r30, r3
     b76:	e4 60       	ori	r30, 0x04	; 4
     b78:	3e 2e       	mov	r3, r30
     b7a:	2a c0       	rjmp	.+84     	; 0xbd0 <vfprintf+0x10c>
     b7c:	f3 2d       	mov	r31, r3
     b7e:	f8 60       	ori	r31, 0x08	; 8
     b80:	1d c0       	rjmp	.+58     	; 0xbbc <vfprintf+0xf8>
     b82:	37 fc       	sbrc	r3, 7
     b84:	2d c0       	rjmp	.+90     	; 0xbe0 <vfprintf+0x11c>
     b86:	20 ed       	ldi	r18, 0xD0	; 208
     b88:	28 0f       	add	r18, r24
     b8a:	2a 30       	cpi	r18, 0x0A	; 10
     b8c:	40 f0       	brcs	.+16     	; 0xb9e <vfprintf+0xda>
     b8e:	8e 32       	cpi	r24, 0x2E	; 46
     b90:	b9 f4       	brne	.+46     	; 0xbc0 <vfprintf+0xfc>
     b92:	36 fc       	sbrc	r3, 6
     b94:	75 c1       	rjmp	.+746    	; 0xe80 <vfprintf+0x3bc>
     b96:	23 2d       	mov	r18, r3
     b98:	20 64       	ori	r18, 0x40	; 64
     b9a:	32 2e       	mov	r3, r18
     b9c:	19 c0       	rjmp	.+50     	; 0xbd0 <vfprintf+0x10c>
     b9e:	36 fe       	sbrs	r3, 6
     ba0:	06 c0       	rjmp	.+12     	; 0xbae <vfprintf+0xea>
     ba2:	8a e0       	ldi	r24, 0x0A	; 10
     ba4:	98 9e       	mul	r9, r24
     ba6:	20 0d       	add	r18, r0
     ba8:	11 24       	eor	r1, r1
     baa:	92 2e       	mov	r9, r18
     bac:	11 c0       	rjmp	.+34     	; 0xbd0 <vfprintf+0x10c>
     bae:	ea e0       	ldi	r30, 0x0A	; 10
     bb0:	2e 9e       	mul	r2, r30
     bb2:	20 0d       	add	r18, r0
     bb4:	11 24       	eor	r1, r1
     bb6:	22 2e       	mov	r2, r18
     bb8:	f3 2d       	mov	r31, r3
     bba:	f0 62       	ori	r31, 0x20	; 32
     bbc:	3f 2e       	mov	r3, r31
     bbe:	08 c0       	rjmp	.+16     	; 0xbd0 <vfprintf+0x10c>
     bc0:	8c 36       	cpi	r24, 0x6C	; 108
     bc2:	21 f4       	brne	.+8      	; 0xbcc <vfprintf+0x108>
     bc4:	83 2d       	mov	r24, r3
     bc6:	80 68       	ori	r24, 0x80	; 128
     bc8:	38 2e       	mov	r3, r24
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <vfprintf+0x10c>
     bcc:	88 36       	cpi	r24, 0x68	; 104
     bce:	41 f4       	brne	.+16     	; 0xbe0 <vfprintf+0x11c>
     bd0:	f7 01       	movw	r30, r14
     bd2:	93 fd       	sbrc	r25, 3
     bd4:	85 91       	lpm	r24, Z+
     bd6:	93 ff       	sbrs	r25, 3
     bd8:	81 91       	ld	r24, Z+
     bda:	7f 01       	movw	r14, r30
     bdc:	81 11       	cpse	r24, r1
     bde:	b3 cf       	rjmp	.-154    	; 0xb46 <vfprintf+0x82>
     be0:	98 2f       	mov	r25, r24
     be2:	9f 7d       	andi	r25, 0xDF	; 223
     be4:	95 54       	subi	r25, 0x45	; 69
     be6:	93 30       	cpi	r25, 0x03	; 3
     be8:	28 f4       	brcc	.+10     	; 0xbf4 <vfprintf+0x130>
     bea:	0c 5f       	subi	r16, 0xFC	; 252
     bec:	1f 4f       	sbci	r17, 0xFF	; 255
     bee:	9f e3       	ldi	r25, 0x3F	; 63
     bf0:	99 83       	std	Y+1, r25	; 0x01
     bf2:	0d c0       	rjmp	.+26     	; 0xc0e <vfprintf+0x14a>
     bf4:	83 36       	cpi	r24, 0x63	; 99
     bf6:	31 f0       	breq	.+12     	; 0xc04 <vfprintf+0x140>
     bf8:	83 37       	cpi	r24, 0x73	; 115
     bfa:	71 f0       	breq	.+28     	; 0xc18 <vfprintf+0x154>
     bfc:	83 35       	cpi	r24, 0x53	; 83
     bfe:	09 f0       	breq	.+2      	; 0xc02 <vfprintf+0x13e>
     c00:	55 c0       	rjmp	.+170    	; 0xcac <vfprintf+0x1e8>
     c02:	20 c0       	rjmp	.+64     	; 0xc44 <vfprintf+0x180>
     c04:	f8 01       	movw	r30, r16
     c06:	80 81       	ld	r24, Z
     c08:	89 83       	std	Y+1, r24	; 0x01
     c0a:	0e 5f       	subi	r16, 0xFE	; 254
     c0c:	1f 4f       	sbci	r17, 0xFF	; 255
     c0e:	88 24       	eor	r8, r8
     c10:	83 94       	inc	r8
     c12:	91 2c       	mov	r9, r1
     c14:	53 01       	movw	r10, r6
     c16:	12 c0       	rjmp	.+36     	; 0xc3c <vfprintf+0x178>
     c18:	28 01       	movw	r4, r16
     c1a:	f2 e0       	ldi	r31, 0x02	; 2
     c1c:	4f 0e       	add	r4, r31
     c1e:	51 1c       	adc	r5, r1
     c20:	f8 01       	movw	r30, r16
     c22:	a0 80       	ld	r10, Z
     c24:	b1 80       	ldd	r11, Z+1	; 0x01
     c26:	36 fe       	sbrs	r3, 6
     c28:	03 c0       	rjmp	.+6      	; 0xc30 <vfprintf+0x16c>
     c2a:	69 2d       	mov	r22, r9
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <vfprintf+0x170>
     c30:	6f ef       	ldi	r22, 0xFF	; 255
     c32:	7f ef       	ldi	r23, 0xFF	; 255
     c34:	c5 01       	movw	r24, r10
     c36:	4e d1       	rcall	.+668    	; 0xed4 <strnlen>
     c38:	4c 01       	movw	r8, r24
     c3a:	82 01       	movw	r16, r4
     c3c:	f3 2d       	mov	r31, r3
     c3e:	ff 77       	andi	r31, 0x7F	; 127
     c40:	3f 2e       	mov	r3, r31
     c42:	15 c0       	rjmp	.+42     	; 0xc6e <vfprintf+0x1aa>
     c44:	28 01       	movw	r4, r16
     c46:	22 e0       	ldi	r18, 0x02	; 2
     c48:	42 0e       	add	r4, r18
     c4a:	51 1c       	adc	r5, r1
     c4c:	f8 01       	movw	r30, r16
     c4e:	a0 80       	ld	r10, Z
     c50:	b1 80       	ldd	r11, Z+1	; 0x01
     c52:	36 fe       	sbrs	r3, 6
     c54:	03 c0       	rjmp	.+6      	; 0xc5c <vfprintf+0x198>
     c56:	69 2d       	mov	r22, r9
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <vfprintf+0x19c>
     c5c:	6f ef       	ldi	r22, 0xFF	; 255
     c5e:	7f ef       	ldi	r23, 0xFF	; 255
     c60:	c5 01       	movw	r24, r10
     c62:	2d d1       	rcall	.+602    	; 0xebe <strnlen_P>
     c64:	4c 01       	movw	r8, r24
     c66:	f3 2d       	mov	r31, r3
     c68:	f0 68       	ori	r31, 0x80	; 128
     c6a:	3f 2e       	mov	r3, r31
     c6c:	82 01       	movw	r16, r4
     c6e:	33 fc       	sbrc	r3, 3
     c70:	19 c0       	rjmp	.+50     	; 0xca4 <vfprintf+0x1e0>
     c72:	82 2d       	mov	r24, r2
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	88 16       	cp	r8, r24
     c78:	99 06       	cpc	r9, r25
     c7a:	a0 f4       	brcc	.+40     	; 0xca4 <vfprintf+0x1e0>
     c7c:	b6 01       	movw	r22, r12
     c7e:	80 e2       	ldi	r24, 0x20	; 32
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	33 d1       	rcall	.+614    	; 0xeea <fputc>
     c84:	2a 94       	dec	r2
     c86:	f5 cf       	rjmp	.-22     	; 0xc72 <vfprintf+0x1ae>
     c88:	f5 01       	movw	r30, r10
     c8a:	37 fc       	sbrc	r3, 7
     c8c:	85 91       	lpm	r24, Z+
     c8e:	37 fe       	sbrs	r3, 7
     c90:	81 91       	ld	r24, Z+
     c92:	5f 01       	movw	r10, r30
     c94:	b6 01       	movw	r22, r12
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	28 d1       	rcall	.+592    	; 0xeea <fputc>
     c9a:	21 10       	cpse	r2, r1
     c9c:	2a 94       	dec	r2
     c9e:	21 e0       	ldi	r18, 0x01	; 1
     ca0:	82 1a       	sub	r8, r18
     ca2:	91 08       	sbc	r9, r1
     ca4:	81 14       	cp	r8, r1
     ca6:	91 04       	cpc	r9, r1
     ca8:	79 f7       	brne	.-34     	; 0xc88 <vfprintf+0x1c4>
     caa:	e1 c0       	rjmp	.+450    	; 0xe6e <vfprintf+0x3aa>
     cac:	84 36       	cpi	r24, 0x64	; 100
     cae:	11 f0       	breq	.+4      	; 0xcb4 <vfprintf+0x1f0>
     cb0:	89 36       	cpi	r24, 0x69	; 105
     cb2:	39 f5       	brne	.+78     	; 0xd02 <vfprintf+0x23e>
     cb4:	f8 01       	movw	r30, r16
     cb6:	37 fe       	sbrs	r3, 7
     cb8:	07 c0       	rjmp	.+14     	; 0xcc8 <vfprintf+0x204>
     cba:	60 81       	ld	r22, Z
     cbc:	71 81       	ldd	r23, Z+1	; 0x01
     cbe:	82 81       	ldd	r24, Z+2	; 0x02
     cc0:	93 81       	ldd	r25, Z+3	; 0x03
     cc2:	0c 5f       	subi	r16, 0xFC	; 252
     cc4:	1f 4f       	sbci	r17, 0xFF	; 255
     cc6:	08 c0       	rjmp	.+16     	; 0xcd8 <vfprintf+0x214>
     cc8:	60 81       	ld	r22, Z
     cca:	71 81       	ldd	r23, Z+1	; 0x01
     ccc:	07 2e       	mov	r0, r23
     cce:	00 0c       	add	r0, r0
     cd0:	88 0b       	sbc	r24, r24
     cd2:	99 0b       	sbc	r25, r25
     cd4:	0e 5f       	subi	r16, 0xFE	; 254
     cd6:	1f 4f       	sbci	r17, 0xFF	; 255
     cd8:	f3 2d       	mov	r31, r3
     cda:	ff 76       	andi	r31, 0x6F	; 111
     cdc:	3f 2e       	mov	r3, r31
     cde:	97 ff       	sbrs	r25, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <vfprintf+0x230>
     ce2:	90 95       	com	r25
     ce4:	80 95       	com	r24
     ce6:	70 95       	com	r23
     ce8:	61 95       	neg	r22
     cea:	7f 4f       	sbci	r23, 0xFF	; 255
     cec:	8f 4f       	sbci	r24, 0xFF	; 255
     cee:	9f 4f       	sbci	r25, 0xFF	; 255
     cf0:	f0 68       	ori	r31, 0x80	; 128
     cf2:	3f 2e       	mov	r3, r31
     cf4:	2a e0       	ldi	r18, 0x0A	; 10
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	a3 01       	movw	r20, r6
     cfa:	33 d1       	rcall	.+614    	; 0xf62 <__ultoa_invert>
     cfc:	88 2e       	mov	r8, r24
     cfe:	86 18       	sub	r8, r6
     d00:	44 c0       	rjmp	.+136    	; 0xd8a <vfprintf+0x2c6>
     d02:	85 37       	cpi	r24, 0x75	; 117
     d04:	31 f4       	brne	.+12     	; 0xd12 <vfprintf+0x24e>
     d06:	23 2d       	mov	r18, r3
     d08:	2f 7e       	andi	r18, 0xEF	; 239
     d0a:	b2 2e       	mov	r11, r18
     d0c:	2a e0       	ldi	r18, 0x0A	; 10
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	25 c0       	rjmp	.+74     	; 0xd5c <vfprintf+0x298>
     d12:	93 2d       	mov	r25, r3
     d14:	99 7f       	andi	r25, 0xF9	; 249
     d16:	b9 2e       	mov	r11, r25
     d18:	8f 36       	cpi	r24, 0x6F	; 111
     d1a:	c1 f0       	breq	.+48     	; 0xd4c <vfprintf+0x288>
     d1c:	18 f4       	brcc	.+6      	; 0xd24 <vfprintf+0x260>
     d1e:	88 35       	cpi	r24, 0x58	; 88
     d20:	79 f0       	breq	.+30     	; 0xd40 <vfprintf+0x27c>
     d22:	ae c0       	rjmp	.+348    	; 0xe80 <vfprintf+0x3bc>
     d24:	80 37       	cpi	r24, 0x70	; 112
     d26:	19 f0       	breq	.+6      	; 0xd2e <vfprintf+0x26a>
     d28:	88 37       	cpi	r24, 0x78	; 120
     d2a:	21 f0       	breq	.+8      	; 0xd34 <vfprintf+0x270>
     d2c:	a9 c0       	rjmp	.+338    	; 0xe80 <vfprintf+0x3bc>
     d2e:	e9 2f       	mov	r30, r25
     d30:	e0 61       	ori	r30, 0x10	; 16
     d32:	be 2e       	mov	r11, r30
     d34:	b4 fe       	sbrs	r11, 4
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <vfprintf+0x28e>
     d38:	fb 2d       	mov	r31, r11
     d3a:	f4 60       	ori	r31, 0x04	; 4
     d3c:	bf 2e       	mov	r11, r31
     d3e:	09 c0       	rjmp	.+18     	; 0xd52 <vfprintf+0x28e>
     d40:	34 fe       	sbrs	r3, 4
     d42:	0a c0       	rjmp	.+20     	; 0xd58 <vfprintf+0x294>
     d44:	29 2f       	mov	r18, r25
     d46:	26 60       	ori	r18, 0x06	; 6
     d48:	b2 2e       	mov	r11, r18
     d4a:	06 c0       	rjmp	.+12     	; 0xd58 <vfprintf+0x294>
     d4c:	28 e0       	ldi	r18, 0x08	; 8
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	05 c0       	rjmp	.+10     	; 0xd5c <vfprintf+0x298>
     d52:	20 e1       	ldi	r18, 0x10	; 16
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <vfprintf+0x298>
     d58:	20 e1       	ldi	r18, 0x10	; 16
     d5a:	32 e0       	ldi	r19, 0x02	; 2
     d5c:	f8 01       	movw	r30, r16
     d5e:	b7 fe       	sbrs	r11, 7
     d60:	07 c0       	rjmp	.+14     	; 0xd70 <vfprintf+0x2ac>
     d62:	60 81       	ld	r22, Z
     d64:	71 81       	ldd	r23, Z+1	; 0x01
     d66:	82 81       	ldd	r24, Z+2	; 0x02
     d68:	93 81       	ldd	r25, Z+3	; 0x03
     d6a:	0c 5f       	subi	r16, 0xFC	; 252
     d6c:	1f 4f       	sbci	r17, 0xFF	; 255
     d6e:	06 c0       	rjmp	.+12     	; 0xd7c <vfprintf+0x2b8>
     d70:	60 81       	ld	r22, Z
     d72:	71 81       	ldd	r23, Z+1	; 0x01
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	0e 5f       	subi	r16, 0xFE	; 254
     d7a:	1f 4f       	sbci	r17, 0xFF	; 255
     d7c:	a3 01       	movw	r20, r6
     d7e:	f1 d0       	rcall	.+482    	; 0xf62 <__ultoa_invert>
     d80:	88 2e       	mov	r8, r24
     d82:	86 18       	sub	r8, r6
     d84:	fb 2d       	mov	r31, r11
     d86:	ff 77       	andi	r31, 0x7F	; 127
     d88:	3f 2e       	mov	r3, r31
     d8a:	36 fe       	sbrs	r3, 6
     d8c:	0d c0       	rjmp	.+26     	; 0xda8 <vfprintf+0x2e4>
     d8e:	23 2d       	mov	r18, r3
     d90:	2e 7f       	andi	r18, 0xFE	; 254
     d92:	a2 2e       	mov	r10, r18
     d94:	89 14       	cp	r8, r9
     d96:	58 f4       	brcc	.+22     	; 0xdae <vfprintf+0x2ea>
     d98:	34 fe       	sbrs	r3, 4
     d9a:	0b c0       	rjmp	.+22     	; 0xdb2 <vfprintf+0x2ee>
     d9c:	32 fc       	sbrc	r3, 2
     d9e:	09 c0       	rjmp	.+18     	; 0xdb2 <vfprintf+0x2ee>
     da0:	83 2d       	mov	r24, r3
     da2:	8e 7e       	andi	r24, 0xEE	; 238
     da4:	a8 2e       	mov	r10, r24
     da6:	05 c0       	rjmp	.+10     	; 0xdb2 <vfprintf+0x2ee>
     da8:	b8 2c       	mov	r11, r8
     daa:	a3 2c       	mov	r10, r3
     dac:	03 c0       	rjmp	.+6      	; 0xdb4 <vfprintf+0x2f0>
     dae:	b8 2c       	mov	r11, r8
     db0:	01 c0       	rjmp	.+2      	; 0xdb4 <vfprintf+0x2f0>
     db2:	b9 2c       	mov	r11, r9
     db4:	a4 fe       	sbrs	r10, 4
     db6:	0f c0       	rjmp	.+30     	; 0xdd6 <vfprintf+0x312>
     db8:	fe 01       	movw	r30, r28
     dba:	e8 0d       	add	r30, r8
     dbc:	f1 1d       	adc	r31, r1
     dbe:	80 81       	ld	r24, Z
     dc0:	80 33       	cpi	r24, 0x30	; 48
     dc2:	21 f4       	brne	.+8      	; 0xdcc <vfprintf+0x308>
     dc4:	9a 2d       	mov	r25, r10
     dc6:	99 7e       	andi	r25, 0xE9	; 233
     dc8:	a9 2e       	mov	r10, r25
     dca:	09 c0       	rjmp	.+18     	; 0xdde <vfprintf+0x31a>
     dcc:	a2 fe       	sbrs	r10, 2
     dce:	06 c0       	rjmp	.+12     	; 0xddc <vfprintf+0x318>
     dd0:	b3 94       	inc	r11
     dd2:	b3 94       	inc	r11
     dd4:	04 c0       	rjmp	.+8      	; 0xdde <vfprintf+0x31a>
     dd6:	8a 2d       	mov	r24, r10
     dd8:	86 78       	andi	r24, 0x86	; 134
     dda:	09 f0       	breq	.+2      	; 0xdde <vfprintf+0x31a>
     ddc:	b3 94       	inc	r11
     dde:	a3 fc       	sbrc	r10, 3
     de0:	10 c0       	rjmp	.+32     	; 0xe02 <vfprintf+0x33e>
     de2:	a0 fe       	sbrs	r10, 0
     de4:	06 c0       	rjmp	.+12     	; 0xdf2 <vfprintf+0x32e>
     de6:	b2 14       	cp	r11, r2
     de8:	80 f4       	brcc	.+32     	; 0xe0a <vfprintf+0x346>
     dea:	28 0c       	add	r2, r8
     dec:	92 2c       	mov	r9, r2
     dee:	9b 18       	sub	r9, r11
     df0:	0d c0       	rjmp	.+26     	; 0xe0c <vfprintf+0x348>
     df2:	b2 14       	cp	r11, r2
     df4:	58 f4       	brcc	.+22     	; 0xe0c <vfprintf+0x348>
     df6:	b6 01       	movw	r22, r12
     df8:	80 e2       	ldi	r24, 0x20	; 32
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	76 d0       	rcall	.+236    	; 0xeea <fputc>
     dfe:	b3 94       	inc	r11
     e00:	f8 cf       	rjmp	.-16     	; 0xdf2 <vfprintf+0x32e>
     e02:	b2 14       	cp	r11, r2
     e04:	18 f4       	brcc	.+6      	; 0xe0c <vfprintf+0x348>
     e06:	2b 18       	sub	r2, r11
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <vfprintf+0x34a>
     e0a:	98 2c       	mov	r9, r8
     e0c:	21 2c       	mov	r2, r1
     e0e:	a4 fe       	sbrs	r10, 4
     e10:	0f c0       	rjmp	.+30     	; 0xe30 <vfprintf+0x36c>
     e12:	b6 01       	movw	r22, r12
     e14:	80 e3       	ldi	r24, 0x30	; 48
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	68 d0       	rcall	.+208    	; 0xeea <fputc>
     e1a:	a2 fe       	sbrs	r10, 2
     e1c:	16 c0       	rjmp	.+44     	; 0xe4a <vfprintf+0x386>
     e1e:	a1 fc       	sbrc	r10, 1
     e20:	03 c0       	rjmp	.+6      	; 0xe28 <vfprintf+0x364>
     e22:	88 e7       	ldi	r24, 0x78	; 120
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <vfprintf+0x368>
     e28:	88 e5       	ldi	r24, 0x58	; 88
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	b6 01       	movw	r22, r12
     e2e:	0c c0       	rjmp	.+24     	; 0xe48 <vfprintf+0x384>
     e30:	8a 2d       	mov	r24, r10
     e32:	86 78       	andi	r24, 0x86	; 134
     e34:	51 f0       	breq	.+20     	; 0xe4a <vfprintf+0x386>
     e36:	a1 fe       	sbrs	r10, 1
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <vfprintf+0x37a>
     e3a:	8b e2       	ldi	r24, 0x2B	; 43
     e3c:	01 c0       	rjmp	.+2      	; 0xe40 <vfprintf+0x37c>
     e3e:	80 e2       	ldi	r24, 0x20	; 32
     e40:	a7 fc       	sbrc	r10, 7
     e42:	8d e2       	ldi	r24, 0x2D	; 45
     e44:	b6 01       	movw	r22, r12
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	50 d0       	rcall	.+160    	; 0xeea <fputc>
     e4a:	89 14       	cp	r8, r9
     e4c:	30 f4       	brcc	.+12     	; 0xe5a <vfprintf+0x396>
     e4e:	b6 01       	movw	r22, r12
     e50:	80 e3       	ldi	r24, 0x30	; 48
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	4a d0       	rcall	.+148    	; 0xeea <fputc>
     e56:	9a 94       	dec	r9
     e58:	f8 cf       	rjmp	.-16     	; 0xe4a <vfprintf+0x386>
     e5a:	8a 94       	dec	r8
     e5c:	f3 01       	movw	r30, r6
     e5e:	e8 0d       	add	r30, r8
     e60:	f1 1d       	adc	r31, r1
     e62:	80 81       	ld	r24, Z
     e64:	b6 01       	movw	r22, r12
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	40 d0       	rcall	.+128    	; 0xeea <fputc>
     e6a:	81 10       	cpse	r8, r1
     e6c:	f6 cf       	rjmp	.-20     	; 0xe5a <vfprintf+0x396>
     e6e:	22 20       	and	r2, r2
     e70:	09 f4       	brne	.+2      	; 0xe74 <vfprintf+0x3b0>
     e72:	4e ce       	rjmp	.-868    	; 0xb10 <vfprintf+0x4c>
     e74:	b6 01       	movw	r22, r12
     e76:	80 e2       	ldi	r24, 0x20	; 32
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	37 d0       	rcall	.+110    	; 0xeea <fputc>
     e7c:	2a 94       	dec	r2
     e7e:	f7 cf       	rjmp	.-18     	; 0xe6e <vfprintf+0x3aa>
     e80:	f6 01       	movw	r30, r12
     e82:	86 81       	ldd	r24, Z+6	; 0x06
     e84:	97 81       	ldd	r25, Z+7	; 0x07
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <vfprintf+0x3c8>
     e88:	8f ef       	ldi	r24, 0xFF	; 255
     e8a:	9f ef       	ldi	r25, 0xFF	; 255
     e8c:	2b 96       	adiw	r28, 0x0b	; 11
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	1f 91       	pop	r17
     e9e:	0f 91       	pop	r16
     ea0:	ff 90       	pop	r15
     ea2:	ef 90       	pop	r14
     ea4:	df 90       	pop	r13
     ea6:	cf 90       	pop	r12
     ea8:	bf 90       	pop	r11
     eaa:	af 90       	pop	r10
     eac:	9f 90       	pop	r9
     eae:	8f 90       	pop	r8
     eb0:	7f 90       	pop	r7
     eb2:	6f 90       	pop	r6
     eb4:	5f 90       	pop	r5
     eb6:	4f 90       	pop	r4
     eb8:	3f 90       	pop	r3
     eba:	2f 90       	pop	r2
     ebc:	08 95       	ret

00000ebe <strnlen_P>:
     ebe:	fc 01       	movw	r30, r24
     ec0:	05 90       	lpm	r0, Z+
     ec2:	61 50       	subi	r22, 0x01	; 1
     ec4:	70 40       	sbci	r23, 0x00	; 0
     ec6:	01 10       	cpse	r0, r1
     ec8:	d8 f7       	brcc	.-10     	; 0xec0 <strnlen_P+0x2>
     eca:	80 95       	com	r24
     ecc:	90 95       	com	r25
     ece:	8e 0f       	add	r24, r30
     ed0:	9f 1f       	adc	r25, r31
     ed2:	08 95       	ret

00000ed4 <strnlen>:
     ed4:	fc 01       	movw	r30, r24
     ed6:	61 50       	subi	r22, 0x01	; 1
     ed8:	70 40       	sbci	r23, 0x00	; 0
     eda:	01 90       	ld	r0, Z+
     edc:	01 10       	cpse	r0, r1
     ede:	d8 f7       	brcc	.-10     	; 0xed6 <strnlen+0x2>
     ee0:	80 95       	com	r24
     ee2:	90 95       	com	r25
     ee4:	8e 0f       	add	r24, r30
     ee6:	9f 1f       	adc	r25, r31
     ee8:	08 95       	ret

00000eea <fputc>:
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	fb 01       	movw	r30, r22
     ef4:	23 81       	ldd	r18, Z+3	; 0x03
     ef6:	21 fd       	sbrc	r18, 1
     ef8:	03 c0       	rjmp	.+6      	; 0xf00 <fputc+0x16>
     efa:	8f ef       	ldi	r24, 0xFF	; 255
     efc:	9f ef       	ldi	r25, 0xFF	; 255
     efe:	2c c0       	rjmp	.+88     	; 0xf58 <fputc+0x6e>
     f00:	22 ff       	sbrs	r18, 2
     f02:	16 c0       	rjmp	.+44     	; 0xf30 <fputc+0x46>
     f04:	46 81       	ldd	r20, Z+6	; 0x06
     f06:	57 81       	ldd	r21, Z+7	; 0x07
     f08:	24 81       	ldd	r18, Z+4	; 0x04
     f0a:	35 81       	ldd	r19, Z+5	; 0x05
     f0c:	42 17       	cp	r20, r18
     f0e:	53 07       	cpc	r21, r19
     f10:	44 f4       	brge	.+16     	; 0xf22 <fputc+0x38>
     f12:	a0 81       	ld	r26, Z
     f14:	b1 81       	ldd	r27, Z+1	; 0x01
     f16:	9d 01       	movw	r18, r26
     f18:	2f 5f       	subi	r18, 0xFF	; 255
     f1a:	3f 4f       	sbci	r19, 0xFF	; 255
     f1c:	31 83       	std	Z+1, r19	; 0x01
     f1e:	20 83       	st	Z, r18
     f20:	8c 93       	st	X, r24
     f22:	26 81       	ldd	r18, Z+6	; 0x06
     f24:	37 81       	ldd	r19, Z+7	; 0x07
     f26:	2f 5f       	subi	r18, 0xFF	; 255
     f28:	3f 4f       	sbci	r19, 0xFF	; 255
     f2a:	37 83       	std	Z+7, r19	; 0x07
     f2c:	26 83       	std	Z+6, r18	; 0x06
     f2e:	14 c0       	rjmp	.+40     	; 0xf58 <fputc+0x6e>
     f30:	8b 01       	movw	r16, r22
     f32:	ec 01       	movw	r28, r24
     f34:	fb 01       	movw	r30, r22
     f36:	00 84       	ldd	r0, Z+8	; 0x08
     f38:	f1 85       	ldd	r31, Z+9	; 0x09
     f3a:	e0 2d       	mov	r30, r0
     f3c:	09 95       	icall
     f3e:	89 2b       	or	r24, r25
     f40:	e1 f6       	brne	.-72     	; 0xefa <fputc+0x10>
     f42:	d8 01       	movw	r26, r16
     f44:	16 96       	adiw	r26, 0x06	; 6
     f46:	8d 91       	ld	r24, X+
     f48:	9c 91       	ld	r25, X
     f4a:	17 97       	sbiw	r26, 0x07	; 7
     f4c:	01 96       	adiw	r24, 0x01	; 1
     f4e:	17 96       	adiw	r26, 0x07	; 7
     f50:	9c 93       	st	X, r25
     f52:	8e 93       	st	-X, r24
     f54:	16 97       	sbiw	r26, 0x06	; 6
     f56:	ce 01       	movw	r24, r28
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	1f 91       	pop	r17
     f5e:	0f 91       	pop	r16
     f60:	08 95       	ret

00000f62 <__ultoa_invert>:
     f62:	fa 01       	movw	r30, r20
     f64:	aa 27       	eor	r26, r26
     f66:	28 30       	cpi	r18, 0x08	; 8
     f68:	51 f1       	breq	.+84     	; 0xfbe <__ultoa_invert+0x5c>
     f6a:	20 31       	cpi	r18, 0x10	; 16
     f6c:	81 f1       	breq	.+96     	; 0xfce <__ultoa_invert+0x6c>
     f6e:	e8 94       	clt
     f70:	6f 93       	push	r22
     f72:	6e 7f       	andi	r22, 0xFE	; 254
     f74:	6e 5f       	subi	r22, 0xFE	; 254
     f76:	7f 4f       	sbci	r23, 0xFF	; 255
     f78:	8f 4f       	sbci	r24, 0xFF	; 255
     f7a:	9f 4f       	sbci	r25, 0xFF	; 255
     f7c:	af 4f       	sbci	r26, 0xFF	; 255
     f7e:	b1 e0       	ldi	r27, 0x01	; 1
     f80:	3e d0       	rcall	.+124    	; 0xffe <__ultoa_invert+0x9c>
     f82:	b4 e0       	ldi	r27, 0x04	; 4
     f84:	3c d0       	rcall	.+120    	; 0xffe <__ultoa_invert+0x9c>
     f86:	67 0f       	add	r22, r23
     f88:	78 1f       	adc	r23, r24
     f8a:	89 1f       	adc	r24, r25
     f8c:	9a 1f       	adc	r25, r26
     f8e:	a1 1d       	adc	r26, r1
     f90:	68 0f       	add	r22, r24
     f92:	79 1f       	adc	r23, r25
     f94:	8a 1f       	adc	r24, r26
     f96:	91 1d       	adc	r25, r1
     f98:	a1 1d       	adc	r26, r1
     f9a:	6a 0f       	add	r22, r26
     f9c:	71 1d       	adc	r23, r1
     f9e:	81 1d       	adc	r24, r1
     fa0:	91 1d       	adc	r25, r1
     fa2:	a1 1d       	adc	r26, r1
     fa4:	20 d0       	rcall	.+64     	; 0xfe6 <__ultoa_invert+0x84>
     fa6:	09 f4       	brne	.+2      	; 0xfaa <__ultoa_invert+0x48>
     fa8:	68 94       	set
     faa:	3f 91       	pop	r19
     fac:	2a e0       	ldi	r18, 0x0A	; 10
     fae:	26 9f       	mul	r18, r22
     fb0:	11 24       	eor	r1, r1
     fb2:	30 19       	sub	r19, r0
     fb4:	30 5d       	subi	r19, 0xD0	; 208
     fb6:	31 93       	st	Z+, r19
     fb8:	de f6       	brtc	.-74     	; 0xf70 <__ultoa_invert+0xe>
     fba:	cf 01       	movw	r24, r30
     fbc:	08 95       	ret
     fbe:	46 2f       	mov	r20, r22
     fc0:	47 70       	andi	r20, 0x07	; 7
     fc2:	40 5d       	subi	r20, 0xD0	; 208
     fc4:	41 93       	st	Z+, r20
     fc6:	b3 e0       	ldi	r27, 0x03	; 3
     fc8:	0f d0       	rcall	.+30     	; 0xfe8 <__ultoa_invert+0x86>
     fca:	c9 f7       	brne	.-14     	; 0xfbe <__ultoa_invert+0x5c>
     fcc:	f6 cf       	rjmp	.-20     	; 0xfba <__ultoa_invert+0x58>
     fce:	46 2f       	mov	r20, r22
     fd0:	4f 70       	andi	r20, 0x0F	; 15
     fd2:	40 5d       	subi	r20, 0xD0	; 208
     fd4:	4a 33       	cpi	r20, 0x3A	; 58
     fd6:	18 f0       	brcs	.+6      	; 0xfde <__ultoa_invert+0x7c>
     fd8:	49 5d       	subi	r20, 0xD9	; 217
     fda:	31 fd       	sbrc	r19, 1
     fdc:	40 52       	subi	r20, 0x20	; 32
     fde:	41 93       	st	Z+, r20
     fe0:	02 d0       	rcall	.+4      	; 0xfe6 <__ultoa_invert+0x84>
     fe2:	a9 f7       	brne	.-22     	; 0xfce <__ultoa_invert+0x6c>
     fe4:	ea cf       	rjmp	.-44     	; 0xfba <__ultoa_invert+0x58>
     fe6:	b4 e0       	ldi	r27, 0x04	; 4
     fe8:	a6 95       	lsr	r26
     fea:	97 95       	ror	r25
     fec:	87 95       	ror	r24
     fee:	77 95       	ror	r23
     ff0:	67 95       	ror	r22
     ff2:	ba 95       	dec	r27
     ff4:	c9 f7       	brne	.-14     	; 0xfe8 <__ultoa_invert+0x86>
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	61 05       	cpc	r22, r1
     ffa:	71 05       	cpc	r23, r1
     ffc:	08 95       	ret
     ffe:	9b 01       	movw	r18, r22
    1000:	ac 01       	movw	r20, r24
    1002:	0a 2e       	mov	r0, r26
    1004:	06 94       	lsr	r0
    1006:	57 95       	ror	r21
    1008:	47 95       	ror	r20
    100a:	37 95       	ror	r19
    100c:	27 95       	ror	r18
    100e:	ba 95       	dec	r27
    1010:	c9 f7       	brne	.-14     	; 0x1004 <__ultoa_invert+0xa2>
    1012:	62 0f       	add	r22, r18
    1014:	73 1f       	adc	r23, r19
    1016:	84 1f       	adc	r24, r20
    1018:	95 1f       	adc	r25, r21
    101a:	a0 1d       	adc	r26, r0
    101c:	08 95       	ret

0000101e <_exit>:
    101e:	f8 94       	cli

00001020 <__stop_program>:
    1020:	ff cf       	rjmp	.-2      	; 0x1020 <__stop_program>
