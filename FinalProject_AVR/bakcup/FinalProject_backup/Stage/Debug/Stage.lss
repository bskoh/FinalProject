
Stage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00000d92  00000e26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008c  0080014c  0080014c  00000e72  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e72  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ed0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011cf  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa0  00000000  00000000  000021af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000877  00000000  00000000  00002c4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000270  00000000  00000000  000034c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070c  00000000  00000000  00003738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005d7  00000000  00000000  00003e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000441b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	8c c0       	rjmp	.+280    	; 0x15a <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	61 c0       	rjmp	.+194    	; 0x10c <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e9       	ldi	r30, 0x92	; 146
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 34       	cpi	r26, 0x4C	; 76
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e4       	ldi	r26, 0x4C	; 76
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 3d       	cpi	r26, 0xD8	; 216
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	94 d1       	rcall	.+808    	; 0x3ec <main>
  c4:	64 c6       	rjmp	.+3272   	; 0xd8e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_timer0>:
FILE OUTPUT = FDEV_SETUP_STREAM(UART0_transmit, NULL, _FDEV_SETUP_WRITE);
FILE INPUT = FDEV_SETUP_STREAM(NULL, UART0_receive, _FDEV_SETUP_READ);

void init_timer0(void)
{
	TCCR0 |= (1 << CS02) | (1 << CS01) | (1 << CS00);
  c8:	83 b7       	in	r24, 0x33	; 51
  ca:	87 60       	ori	r24, 0x07	; 7
  cc:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);
  ce:	87 b7       	in	r24, 0x37	; 55
  d0:	81 60       	ori	r24, 0x01	; 1
  d2:	87 bf       	out	0x37, r24	; 55
  d4:	08 95       	ret

000000d6 <init_timer1>:
}

void init_timer1(void)
{
	TCCR1A |= (1 << WGM11);
  d6:	8f b5       	in	r24, 0x2f	; 47
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12) | (1 << WGM13);
  dc:	8e b5       	in	r24, 0x2e	; 46
  de:	88 61       	ori	r24, 0x18	; 24
  e0:	8e bd       	out	0x2e, r24	; 46
	
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1);
  e2:	8f b5       	in	r24, 0x2f	; 47
  e4:	88 6a       	ori	r24, 0xA8	; 168
  e6:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << CS11);
  e8:	8e b5       	in	r24, 0x2e	; 46
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 39999;
  ee:	8f e3       	ldi	r24, 0x3F	; 63
  f0:	9c e9       	ldi	r25, 0x9C	; 156
  f2:	97 bd       	out	0x27, r25	; 39
  f4:	86 bd       	out	0x26, r24	; 38
	
	OCR1A = 1000;
  f6:	28 ee       	ldi	r18, 0xE8	; 232
  f8:	33 e0       	ldi	r19, 0x03	; 3
  fa:	3b bd       	out	0x2b, r19	; 43
  fc:	2a bd       	out	0x2a, r18	; 42
	OCR1B = 39999;
  fe:	99 bd       	out	0x29, r25	; 41
 100:	88 bd       	out	0x28, r24	; 40
	OCR1C = 39999;
 102:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 106:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 10a:	08 95       	ret

0000010c <__vector_18>:
}

ISR(USART0_RX_vect)
{
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	0b b6       	in	r0, 0x3b	; 59
 118:	0f 92       	push	r0
 11a:	2f 93       	push	r18
 11c:	3f 93       	push	r19
 11e:	4f 93       	push	r20
 120:	5f 93       	push	r21
 122:	6f 93       	push	r22
 124:	7f 93       	push	r23
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
 12a:	af 93       	push	r26
 12c:	bf 93       	push	r27
 12e:	ef 93       	push	r30
 130:	ff 93       	push	r31
	UART0_ISR_Receive();
 132:	f2 d2       	rcall	.+1508   	; 0x718 <UART0_ISR_Receive>
}
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	bf 91       	pop	r27
 13a:	af 91       	pop	r26
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	7f 91       	pop	r23
 142:	6f 91       	pop	r22
 144:	5f 91       	pop	r21
 146:	4f 91       	pop	r20
 148:	3f 91       	pop	r19
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	0b be       	out	0x3b, r0	; 59
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
	delay++;
 168:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <delay>
 16c:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <delay+0x1>
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <delay+0x1>
 176:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <delay>
}
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <Update_Value>:

void Update_Value(void) 
{
	value[0]	 = Seqeunce;
 188:	e6 e1       	ldi	r30, 0x16	; 22
 18a:	f1 e0       	ldi	r31, 0x01	; 1
 18c:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <Seqeunce>
 190:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <Seqeunce+0x1>
 194:	91 83       	std	Z+1, r25	; 0x01
 196:	80 83       	st	Z, r24
	value[1]	 = (PINE&0x01) == 0;
 198:	91 b1       	in	r25, 0x01	; 1
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	98 27       	eor	r25, r24
 19e:	91 70       	andi	r25, 0x01	; 1
 1a0:	92 83       	std	Z+2, r25	; 0x02
 1a2:	13 82       	std	Z+3, r1	; 0x03
	value[2]	 = (PINE&0x02) == 0;
 1a4:	91 b1       	in	r25, 0x01	; 1
 1a6:	96 95       	lsr	r25
 1a8:	98 27       	eor	r25, r24
 1aa:	91 70       	andi	r25, 0x01	; 1
 1ac:	94 83       	std	Z+4, r25	; 0x04
 1ae:	15 82       	std	Z+5, r1	; 0x05
	value[3]	 = (PINE&0x04) == 0;
 1b0:	91 b1       	in	r25, 0x01	; 1
 1b2:	96 95       	lsr	r25
 1b4:	96 95       	lsr	r25
 1b6:	98 27       	eor	r25, r24
 1b8:	91 70       	andi	r25, 0x01	; 1
 1ba:	96 83       	std	Z+6, r25	; 0x06
 1bc:	17 82       	std	Z+7, r1	; 0x07
	value[4]	 = (PINE&0x08) == 0;
 1be:	91 b1       	in	r25, 0x01	; 1
 1c0:	96 95       	lsr	r25
 1c2:	96 95       	lsr	r25
 1c4:	96 95       	lsr	r25
 1c6:	98 27       	eor	r25, r24
 1c8:	91 70       	andi	r25, 0x01	; 1
 1ca:	90 87       	std	Z+8, r25	; 0x08
 1cc:	11 86       	std	Z+9, r1	; 0x09
	value[5]	 = (PINE&0x10) == 0;
 1ce:	91 b1       	in	r25, 0x01	; 1
 1d0:	92 95       	swap	r25
 1d2:	9f 70       	andi	r25, 0x0F	; 15
 1d4:	89 27       	eor	r24, r25
 1d6:	81 70       	andi	r24, 0x01	; 1
 1d8:	82 87       	std	Z+10, r24	; 0x0a
 1da:	13 86       	std	Z+11, r1	; 0x0b
	// TODO : 모터 출력 1,0으로 나오게 하는 연산이 이 연산식이 맞는지 확인 Value 6, 7
	value[6]	 = ((Motor_Port & Motor_Conv_Drop1) | (Motor_Port & Motor_Conv_Drop2))
 1dc:	88 b3       	in	r24, 0x18	; 24
 1de:	98 b3       	in	r25, 0x18	; 24
 1e0:	92 70       	andi	r25, 0x02	; 2
 1e2:	81 70       	andi	r24, 0x01	; 1
 1e4:	89 2b       	or	r24, r25
 1e6:	21 e0       	ldi	r18, 0x01	; 1
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	11 f0       	breq	.+4      	; 0x1f2 <Update_Value+0x6a>
 1ee:	20 e0       	ldi	r18, 0x00	; 0
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	30 93 23 01 	sts	0x0123, r19	; 0x800123 <value+0xd>
 1f6:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <value+0xc>
					== Motor_Conv_Drop1;
	value[7]	 = ((Motor_Port & Motor_Conv_Pick1) | (Motor_Port & Motor_Conv_Pick2))
 1fa:	88 b3       	in	r24, 0x18	; 24
 1fc:	98 b3       	in	r25, 0x18	; 24
 1fe:	98 70       	andi	r25, 0x08	; 8
 200:	84 70       	andi	r24, 0x04	; 4
 202:	89 2b       	or	r24, r25
 204:	21 e0       	ldi	r18, 0x01	; 1
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	84 30       	cpi	r24, 0x04	; 4
 20a:	11 f0       	breq	.+4      	; 0x210 <Update_Value+0x88>
 20c:	20 e0       	ldi	r18, 0x00	; 0
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	30 93 25 01 	sts	0x0125, r19	; 0x800125 <value+0xf>
 214:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <value+0xe>
					== Motor_Conv_Pick1;
	
	value[8]	 = Drop_ready;
 218:	e6 e1       	ldi	r30, 0x16	; 22
 21a:	f1 e0       	ldi	r31, 0x01	; 1
 21c:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <Drop_ready>
 220:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <Drop_ready+0x1>
 224:	91 8b       	std	Z+17, r25	; 0x11
 226:	80 8b       	std	Z+16, r24	; 0x10
	value[9]	 = Pick_ready;
 228:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <Pick_ready>
 22c:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <Pick_ready+0x1>
 230:	93 8b       	std	Z+19, r25	; 0x13
 232:	82 8b       	std	Z+18, r24	; 0x12
	value[10]	 = Motor_Stopper_open;
 234:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Motor_Stopper_open>
 238:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <Motor_Stopper_open+0x1>
 23c:	95 8b       	std	Z+21, r25	; 0x15
 23e:	84 8b       	std	Z+20, r24	; 0x14
 240:	08 95       	ret

00000242 <Send_Value>:
}
void Send_Value(void)
{	
 242:	cf 92       	push	r12
 244:	df 92       	push	r13
 246:	ef 92       	push	r14
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	08 e1       	ldi	r16, 0x18	; 24
 254:	11 e0       	ldi	r17, 0x01	; 1
	for (int i = 1 ; i < 11 ; i++)
 256:	c1 e0       	ldi	r28, 0x01	; 1
 258:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(i < 10) {
			sprintf(buffer, "%d,", value[i]);
 25a:	0f 2e       	mov	r0, r31
 25c:	fc e2       	ldi	r31, 0x2C	; 44
 25e:	cf 2e       	mov	r12, r31
 260:	f1 e0       	ldi	r31, 0x01	; 1
 262:	df 2e       	mov	r13, r31
 264:	f0 2d       	mov	r31, r0
 266:	0f 2e       	mov	r0, r31
 268:	fe e4       	ldi	r31, 0x4E	; 78
 26a:	ef 2e       	mov	r14, r31
 26c:	f1 e0       	ldi	r31, 0x01	; 1
 26e:	ff 2e       	mov	r15, r31
 270:	f0 2d       	mov	r31, r0
}
void Send_Value(void)
{	
	for (int i = 1 ; i < 11 ; i++)
	{
		if(i < 10) {
 272:	ca 30       	cpi	r28, 0x0A	; 10
 274:	d1 05       	cpc	r29, r1
 276:	9c f4       	brge	.+38     	; 0x29e <Send_Value+0x5c>
			sprintf(buffer, "%d,", value[i]);
 278:	f8 01       	movw	r30, r16
 27a:	81 81       	ldd	r24, Z+1	; 0x01
 27c:	8f 93       	push	r24
 27e:	80 81       	ld	r24, Z
 280:	8f 93       	push	r24
 282:	df 92       	push	r13
 284:	cf 92       	push	r12
 286:	ff 92       	push	r15
 288:	ef 92       	push	r14
 28a:	a6 d2       	rcall	.+1356   	; 0x7d8 <sprintf>
			UART0_printf_string(buffer);
 28c:	c7 01       	movw	r24, r14
 28e:	2e d2       	rcall	.+1116   	; 0x6ec <UART0_printf_string>
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
 29c:	1c c0       	rjmp	.+56     	; 0x2d6 <Send_Value+0x94>
		}
		else if(i == 10) {
 29e:	ca 30       	cpi	r28, 0x0A	; 10
 2a0:	d1 05       	cpc	r29, r1
 2a2:	c9 f4       	brne	.+50     	; 0x2d6 <Send_Value+0x94>
			sprintf(buffer, "%d", value[i]);
 2a4:	e6 e1       	ldi	r30, 0x16	; 22
 2a6:	f1 e0       	ldi	r31, 0x01	; 1
 2a8:	85 89       	ldd	r24, Z+21	; 0x15
 2aa:	8f 93       	push	r24
 2ac:	84 89       	ldd	r24, Z+20	; 0x14
 2ae:	8f 93       	push	r24
 2b0:	80 e3       	ldi	r24, 0x30	; 48
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	9f 93       	push	r25
 2b6:	8f 93       	push	r24
 2b8:	8e e4       	ldi	r24, 0x4E	; 78
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	9f 93       	push	r25
 2be:	8f 93       	push	r24
 2c0:	8b d2       	rcall	.+1302   	; 0x7d8 <sprintf>
			UART0_printf_string(buffer);
 2c2:	8e e4       	ldi	r24, 0x4E	; 78
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	12 d2       	rcall	.+1060   	; 0x6ec <UART0_printf_string>
 2c8:	0f 90       	pop	r0
 2ca:	0f 90       	pop	r0
 2cc:	0f 90       	pop	r0
 2ce:	0f 90       	pop	r0
 2d0:	0f 90       	pop	r0
 2d2:	0f 90       	pop	r0
 2d4:	06 c0       	rjmp	.+12     	; 0x2e2 <Send_Value+0xa0>
 2d6:	21 96       	adiw	r28, 0x01	; 1
	value[9]	 = Pick_ready;
	value[10]	 = Motor_Stopper_open;
}
void Send_Value(void)
{	
	for (int i = 1 ; i < 11 ; i++)
 2d8:	0e 5f       	subi	r16, 0xFE	; 254
 2da:	1f 4f       	sbci	r17, 0xFF	; 255
 2dc:	cb 30       	cpi	r28, 0x0B	; 11
 2de:	d1 05       	cpc	r29, r1
 2e0:	41 f6       	brne	.-112    	; 0x272 <Send_Value+0x30>
		else if(i == 10) {
			sprintf(buffer, "%d", value[i]);
			UART0_printf_string(buffer);
		}
	}
	UART0_printf_string("\n\r");
 2e2:	83 e3       	ldi	r24, 0x33	; 51
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	02 d2       	rcall	.+1028   	; 0x6ec <UART0_printf_string>
 2e8:	df 91       	pop	r29
}
 2ea:	cf 91       	pop	r28
 2ec:	1f 91       	pop	r17
 2ee:	0f 91       	pop	r16
 2f0:	ff 90       	pop	r15
 2f2:	ef 90       	pop	r14
 2f4:	df 90       	pop	r13
 2f6:	cf 90       	pop	r12
 2f8:	08 95       	ret

000002fa <Send_Event_Value>:
 2fa:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <cnt_event+0x1>

void Send_Event_Value(void)
{
	sprintf(buffer, "e%2d,", cnt_event);
 2fe:	8f 93       	push	r24
 300:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <cnt_event>
 304:	8f 93       	push	r24
 306:	86 e3       	ldi	r24, 0x36	; 54
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	9f 93       	push	r25
 30c:	8f 93       	push	r24
 30e:	8e e4       	ldi	r24, 0x4E	; 78
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	9f 93       	push	r25
 314:	8f 93       	push	r24
 316:	60 d2       	rcall	.+1216   	; 0x7d8 <sprintf>
	UART0_printf_string(buffer);
 318:	8e e4       	ldi	r24, 0x4E	; 78
 31a:	91 e0       	ldi	r25, 0x01	; 1
	Send_Value();
 31c:	e7 d1       	rcall	.+974    	; 0x6ec <UART0_printf_string>
 31e:	91 df       	rcall	.-222    	; 0x242 <Send_Value>
	cnt_event++;
 320:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <cnt_event>
 324:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <cnt_event+0x1>
 328:	01 96       	adiw	r24, 0x01	; 1
	if(cnt_event >= 100)
 32a:	0f 90       	pop	r0
 32c:	0f 90       	pop	r0
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	0f 90       	pop	r0
 334:	0f 90       	pop	r0
 336:	84 36       	cpi	r24, 0x64	; 100
 338:	91 05       	cpc	r25, r1
 33a:	2c f4       	brge	.+10     	; 0x346 <Send_Event_Value+0x4c>
void Send_Event_Value(void)
{
	sprintf(buffer, "e%2d,", cnt_event);
	UART0_printf_string(buffer);
	Send_Value();
	cnt_event++;
 33c:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <cnt_event+0x1>
 340:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <cnt_event>
 344:	08 95       	ret
	if(cnt_event >= 100)
	{
		cnt_event = 0;
 346:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <cnt_event+0x1>
 34a:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <cnt_event>
 34e:	08 95       	ret

00000350 <Diff_Value>:
	}
	return;
}

int Diff_Value(int ary1[], int ary2[]) 
{	
 350:	fc 01       	movw	r30, r24
 352:	3c 96       	adiw	r30, 0x0c	; 12
 354:	db 01       	movw	r26, r22
 356:	1c 96       	adiw	r26, 0x0c	; 12
 358:	46 96       	adiw	r24, 0x16	; 22
	int count = 0;
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	70 e0       	ldi	r23, 0x00	; 0
	
	for(int i = 6; i < 11; i++) 
	{
		if(ary1[i] != ary2[i])
 35e:	41 91       	ld	r20, Z+
 360:	51 91       	ld	r21, Z+
 362:	2d 91       	ld	r18, X+
 364:	3d 91       	ld	r19, X+
 366:	42 17       	cp	r20, r18
 368:	53 07       	cpc	r21, r19
 36a:	11 f0       	breq	.+4      	; 0x370 <Diff_Value+0x20>
		{
			count++;
 36c:	6f 5f       	subi	r22, 0xFF	; 255
 36e:	7f 4f       	sbci	r23, 0xFF	; 255

int Diff_Value(int ary1[], int ary2[]) 
{	
	int count = 0;
	
	for(int i = 6; i < 11; i++) 
 370:	e8 17       	cp	r30, r24
 372:	f9 07       	cpc	r31, r25
 374:	a1 f7       	brne	.-24     	; 0x35e <Diff_Value+0xe>
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	67 2b       	or	r22, r23
 37c:	11 f4       	brne	.+4      	; 0x382 <Diff_Value+0x32>
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	90 e0       	ldi	r25, 0x00	; 0
	}
	else 
	{
		return 0;
	}
}
 382:	08 95       	ret

00000384 <Check_Pickable>:

int Check_Pickable(void)
{
	if ((Sensor_Port & Sensor_Pick_stage) == Sensor_Pick_stage	// pick stage에 물건 x
 384:	0b 99       	sbic	0x01, 3	; 1
 386:	0f c0       	rjmp	.+30     	; 0x3a6 <Check_Pickable+0x22>
		|| (Sensor_Port & Sensor_Pick_AGV) == 0					// pick stage에 agv o
 388:	0c 9b       	sbis	0x01, 4	; 1
 38a:	10 c0       	rjmp	.+32     	; 0x3ac <Check_Pickable+0x28>
		|| (Motor_Port & Motor_Conv_Pick1) == Motor_Conv_Pick1	// motor가 돌고있으면
 38c:	c2 99       	sbic	0x18, 2	; 24
 38e:	11 c0       	rjmp	.+34     	; 0x3b2 <Check_Pickable+0x2e>
		|| Motor_Stopper_open == 1)								// stopper가 열려있으면						// agv의 위치가 pick stage가 아니면
	{
		return 0;
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <Motor_Stopper_open>
 398:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <Motor_Stopper_open+0x1>
 39c:	21 30       	cpi	r18, 0x01	; 1
 39e:	31 05       	cpc	r19, r1
 3a0:	51 f4       	brne	.+20     	; 0x3b6 <Check_Pickable+0x32>
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	08 95       	ret
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	08 95       	ret
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	08 95       	ret
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		return 1;
	}
}
 3b6:	08 95       	ret

000003b8 <Check_Dropable>:
int Check_Dropable(void)
{
	if ((Sensor_Port & Sensor_Drop_stage) == 0					// drop stage에 물건 o
 3b8:	08 9b       	sbis	0x01, 0	; 1
 3ba:	0f c0       	rjmp	.+30     	; 0x3da <Check_Dropable+0x22>
		|| (Sensor_Port & Sensor_Drop_AGV) == Sensor_Drop_AGV	// drop stage에 agv x
 3bc:	08 99       	sbic	0x01, 0	; 1
 3be:	10 c0       	rjmp	.+32     	; 0x3e0 <Check_Dropable+0x28>
		|| (Motor_Port & Motor_Conv_Drop1) == Motor_Conv_Drop1	// motor가 돌고있으면
 3c0:	c0 99       	sbic	0x18, 0	; 24
 3c2:	11 c0       	rjmp	.+34     	; 0x3e6 <Check_Dropable+0x2e>
		|| Motor_Stopper_open == 1)								// stopper가 열려있으면
	{
		return 0;
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <Motor_Stopper_open>
 3cc:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <Motor_Stopper_open+0x1>
 3d0:	21 30       	cpi	r18, 0x01	; 1
 3d2:	31 05       	cpc	r19, r1
 3d4:	51 f4       	brne	.+20     	; 0x3ea <Check_Dropable+0x32>
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	08 95       	ret
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	08 95       	ret
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	08 95       	ret
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		return 1;
	}
}
 3ea:	08 95       	ret

000003ec <main>:
	//UART0_printf_string(buffer);
//}

int main(void)
{		
	DDRB |= (1 << PORTB0) | (1 << PORTB1) | (1 << PORTB2) | (1 << PORTB3);
 3ec:	87 b3       	in	r24, 0x17	; 23
 3ee:	8f 60       	ori	r24, 0x0F	; 15
 3f0:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1 << PORTB5) | (1 << PORTB6) | (1 << PORTB7);
 3f2:	87 b3       	in	r24, 0x17	; 23
 3f4:	80 6e       	ori	r24, 0xE0	; 224
 3f6:	87 bb       	out	0x17, r24	; 23
	
	uint8_t *receiveData;
	
	UART0_Init();
 3f8:	68 d1       	rcall	.+720    	; 0x6ca <UART0_Init>
	init_timer0();
 3fa:	66 de       	rcall	.-820    	; 0xc8 <init_timer0>
	init_timer1();
 3fc:	6c de       	rcall	.-808    	; 0xd6 <init_timer1>
 3fe:	78 94       	sei
	
	sei();
 400:	ee 24       	eor	r14, r14
			}
			ptr_cnt = 0;
			
			if(strncmp(cmd,"auto",4) == 0)
			{
				Flag_AutoMode = 1;
 402:	e3 94       	inc	r14
 404:	f1 2c       	mov	r15, r1
 406:	0c e2       	ldi	r16, 0x2C	; 44
 408:	11 e0       	ldi	r17, 0x01	; 1
 40a:	0f 2e       	mov	r0, r31
			break;
			
			case 3:		//Pick stage로 보내기 전에 확인(제품, AGV X)
				if((Sensor_Port & Sensor_Pick_stage) == 0x00 && (Sensor_Port & Sensor_Pick_AGV) == 0x00)
				{
					Seqeunce = 10;
 40c:	fa e0       	ldi	r31, 0x0A	; 10
 40e:	6f 2e       	mov	r6, r31
 410:	71 2c       	mov	r7, r1
 412:	f0 2d       	mov	r31, r0
 414:	0f 2e       	mov	r0, r31
					//buffer에 제품 없어짐, Drop Conv 정지, Stopper close
					if (delay >= Delay_Conv)
					{
						Motor_Port &= ~Motor_Conv_Drop1;
						
						Motor_Stopper = Pos_Stopper_Close;
 416:	f8 ee       	ldi	r31, 0xE8	; 232
 418:	8f 2e       	mov	r8, r31
 41a:	f3 e0       	ldi	r31, 0x03	; 3
 41c:	9f 2e       	mov	r9, r31
 41e:	f0 2d       	mov	r31, r0
 420:	0f 2e       	mov	r0, r31
				}
				else if((Sensor_Port & Sensor_Pick_stage) == Sensor_Pick_stage)
				{
					//pick stage 제품 도착 완료, Pick Conv 정지
					Motor_Port &= ~Motor_Conv_Pick1;
					Seqeunce = 100;
 422:	f4 e6       	ldi	r31, 0x64	; 100
 424:	af 2e       	mov	r10, r31
 426:	b1 2c       	mov	r11, r1
 428:	f0 2d       	mov	r31, r0
 42a:	0f 2e       	mov	r0, r31
					delay = 0;
				}
			break;
			
			case 10:	//Stopper open
				Motor_Stopper = Pos_Stopper_Open;
 42c:	f8 eb       	ldi	r31, 0xB8	; 184
 42e:	cf 2e       	mov	r12, r31
 430:	fb e0       	ldi	r31, 0x0B	; 11
 432:	df 2e       	mov	r13, r31
 434:	f0 2d       	mov	r31, r0
	
	while(1)
	{
		/////////////////////////////////////////////////////////////////////////////
		//MES에서 현재 AGV 위치 보내줌(Pick/Drop Stage일 경우)		
		if (isRxString())    // PC로 부터 수신된 Data가 존재 하는지 확인 있으면 아래를 수행 한다.
 436:	68 d1       	rcall	.+720    	; 0x708 <isRxString>
 438:	88 23       	and	r24, r24
 43a:	09 f4       	brne	.+2      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43c:	77 c0       	rjmp	.+238    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		{
			receiveData = getRxString();
 43e:	67 d1       	rcall	.+718    	; 0x70e <getRxString>
 440:	6e e2       	ldi	r22, 0x2E	; 46
			
			ptr_receiveData = strtok(receiveData, ",");
 442:	71 e0       	ldi	r23, 0x01	; 1
 444:	91 d1       	rcall	.+802    	; 0x768 <strtok>
 446:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <ptr_receiveData+0x1>
 44a:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <ptr_receiveData>
 44e:	00 97       	sbiw	r24, 0x00	; 0
 450:	41 f1       	breq	.+80     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
			while(ptr_receiveData != NULL) {
 452:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <ptr_cnt>
				if(ptr_cnt == 0) {
 456:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <ptr_cnt+0x1>
 45a:	21 15       	cp	r18, r1
 45c:	31 05       	cpc	r19, r1
 45e:	29 f4       	brne	.+10     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 460:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <cnt+0x1>
					cnt = ptr_receiveData;
 464:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <cnt>
 468:	07 c0       	rjmp	.+14     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 46a:	21 30       	cpi	r18, 0x01	; 1
 46c:	31 05       	cpc	r19, r1
				}
				else if(ptr_cnt == 1) {
 46e:	21 f4       	brne	.+8      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 470:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <cmd+0x1>
					cmd = ptr_receiveData;
 474:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <cmd>
 478:	6e e2       	ldi	r22, 0x2E	; 46
				}
				ptr_receiveData = strtok(NULL, ",");
 47a:	71 e0       	ldi	r23, 0x01	; 1
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	73 d1       	rcall	.+742    	; 0x768 <strtok>
 482:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <ptr_receiveData+0x1>
 486:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <ptr_receiveData>
 48a:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <ptr_cnt>
				ptr_cnt++;
 48e:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <ptr_cnt+0x1>
 492:	2f 5f       	subi	r18, 0xFF	; 255
 494:	3f 4f       	sbci	r19, 0xFF	; 255
 496:	30 93 83 01 	sts	0x0183, r19	; 0x800183 <ptr_cnt+0x1>
 49a:	20 93 82 01 	sts	0x0182, r18	; 0x800182 <ptr_cnt>
 49e:	00 97       	sbiw	r24, 0x00	; 0
 4a0:	c1 f6       	brne	.-80     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
		if (isRxString())    // PC로 부터 수신된 Data가 존재 하는지 확인 있으면 아래를 수행 한다.
		{
			receiveData = getRxString();
			
			ptr_receiveData = strtok(receiveData, ",");
			while(ptr_receiveData != NULL) {
 4a2:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <ptr_cnt+0x1>
					cmd = ptr_receiveData;
				}
				ptr_receiveData = strtok(NULL, ",");
				ptr_cnt++;
			}
			ptr_cnt = 0;
 4a6:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <ptr_cnt>
 4aa:	c0 91 d6 01 	lds	r28, 0x01D6	; 0x8001d6 <cmd>
			
			if(strncmp(cmd,"auto",4) == 0)
 4ae:	d0 91 d7 01 	lds	r29, 0x01D7	; 0x8001d7 <cmd+0x1>
 4b2:	44 e0       	ldi	r20, 0x04	; 4
 4b4:	50 e0       	ldi	r21, 0x00	; 0
 4b6:	6c e3       	ldi	r22, 0x3C	; 60
 4b8:	71 e0       	ldi	r23, 0x01	; 1
 4ba:	ce 01       	movw	r24, r28
 4bc:	58 d1       	rcall	.+688    	; 0x76e <strncmp>
 4be:	89 2b       	or	r24, r25
 4c0:	71 f4       	brne	.+28     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4c2:	f0 92 8f 01 	sts	0x018F, r15	; 0x80018f <Flag_AutoMode+0x1>
			{
				Flag_AutoMode = 1;
 4c6:	e0 92 8e 01 	sts	0x018E, r14	; 0x80018e <Flag_AutoMode>
 4ca:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <cnt>
				UART0_printf_string(cnt);
 4ce:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <cnt+0x1>
 4d2:	0c d1       	rcall	.+536    	; 0x6ec <UART0_printf_string>
 4d4:	8e e2       	ldi	r24, 0x2E	; 46
				UART0_printf_string(",");
 4d6:	91 e0       	ldi	r25, 0x01	; 1
 4d8:	09 d1       	rcall	.+530    	; 0x6ec <UART0_printf_string>
 4da:	b3 de       	rcall	.-666    	; 0x242 <Send_Value>
				Send_Value();
 4dc:	27 c0       	rjmp	.+78     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 4de:	44 e0       	ldi	r20, 0x04	; 4
 4e0:	50 e0       	ldi	r21, 0x00	; 0
			}
			else if(strncmp(cmd,"manu",4) == 0)
 4e2:	61 e4       	ldi	r22, 0x41	; 65
 4e4:	71 e0       	ldi	r23, 0x01	; 1
 4e6:	ce 01       	movw	r24, r28
 4e8:	42 d1       	rcall	.+644    	; 0x76e <strncmp>
 4ea:	89 2b       	or	r24, r25
 4ec:	71 f4       	brne	.+28     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 4ee:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <Flag_AutoMode+0x1>
			{
				Flag_AutoMode = 0;
 4f2:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <Flag_AutoMode>
 4f6:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <cnt>
				UART0_printf_string(cnt);
 4fa:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <cnt+0x1>
 4fe:	f6 d0       	rcall	.+492    	; 0x6ec <UART0_printf_string>
 500:	8e e2       	ldi	r24, 0x2E	; 46
				UART0_printf_string(",");
 502:	91 e0       	ldi	r25, 0x01	; 1
 504:	f3 d0       	rcall	.+486    	; 0x6ec <UART0_printf_string>
 506:	9d de       	rcall	.-710    	; 0x242 <Send_Value>
 508:	11 c0       	rjmp	.+34     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
				Send_Value();
 50a:	44 e0       	ldi	r20, 0x04	; 4
 50c:	50 e0       	ldi	r21, 0x00	; 0
			}
			else if(strncmp(cmd, "stat", 4) == 0)
 50e:	66 e4       	ldi	r22, 0x46	; 70
 510:	71 e0       	ldi	r23, 0x01	; 1
 512:	ce 01       	movw	r24, r28
 514:	2c d1       	rcall	.+600    	; 0x76e <strncmp>
 516:	89 2b       	or	r24, r25
 518:	49 f4       	brne	.+18     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
			{
				UART0_printf_string(cnt);
 51a:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <cnt>
 51e:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <cnt+0x1>
 522:	e4 d0       	rcall	.+456    	; 0x6ec <UART0_printf_string>
				UART0_printf_string(",");
 524:	8e e2       	ldi	r24, 0x2E	; 46
 526:	91 e0       	ldi	r25, 0x01	; 1
 528:	e1 d0       	rcall	.+450    	; 0x6ec <UART0_printf_string>
 52a:	8b de       	rcall	.-746    	; 0x242 <Send_Value>
				Send_Value();
 52c:	2d de       	rcall	.-934    	; 0x188 <Update_Value>
 52e:	60 e0       	ldi	r22, 0x00	; 0
			}
		}
		/////////////////////////////////////////////////////////////////////////////
	
		Update_Value();
 530:	71 e0       	ldi	r23, 0x01	; 1
		
		/////////////////////////////////////////////////////////////////////////////
		
		if(Diff_Value(value, comp_value) == 1)
 532:	86 e1       	ldi	r24, 0x16	; 22
 534:	91 e0       	ldi	r25, 0x01	; 1
 536:	0c df       	rcall	.-488    	; 0x350 <Diff_Value>
 538:	01 97       	sbiw	r24, 0x01	; 1
 53a:	61 f4       	brne	.+24     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 53c:	de de       	rcall	.-580    	; 0x2fa <Send_Event_Value>
 53e:	e2 e2       	ldi	r30, 0x22	; 34
		{
			Send_Event_Value();
 540:	f1 e0       	ldi	r31, 0x01	; 1
 542:	ac e0       	ldi	r26, 0x0C	; 12
 544:	b1 e0       	ldi	r27, 0x01	; 1
 546:	81 91       	ld	r24, Z+
 548:	91 91       	ld	r25, Z+
 54a:	8d 93       	st	X+, r24
			for(int i = 6; i < VALUE_SIZE; i++)
			{
				comp_value[i] = value[i];
 54c:	9d 93       	st	X+, r25
 54e:	e0 17       	cp	r30, r16
 550:	f1 07       	cpc	r31, r17
 552:	c9 f7       	brne	.-14     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
		/////////////////////////////////////////////////////////////////////////////
		
		if(Diff_Value(value, comp_value) == 1)
		{
			Send_Event_Value();
			for(int i = 6; i < VALUE_SIZE; i++)
 554:	17 df       	rcall	.-466    	; 0x384 <Check_Pickable>
 556:	89 2b       	or	r24, r25
 558:	21 f4       	brne	.+8      	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
			}
		}
		
		/////////////////////////////////////////////////////////////////////////////
		
		if (Check_Pickable() == 0)
 55a:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <Pick_ready+0x1>
 55e:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <Pick_ready>
		{
			Pick_ready = 0;
 562:	2a df       	rcall	.-428    	; 0x3b8 <Check_Dropable>
 564:	89 2b       	or	r24, r25
 566:	21 f4       	brne	.+8      	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
 568:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <Drop_ready+0x1>
		}
		if (Check_Dropable() == 0)
 56c:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <Drop_ready>
 570:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <Seqeunce>
		{
			Drop_ready = 0;
 574:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <Seqeunce+0x1>
 578:	83 30       	cpi	r24, 0x03	; 3
		}
				
		/////////////////////////////////////////////////////////////////////////////
		//Sequence		
		switch (Seqeunce)
 57a:	91 05       	cpc	r25, r1
 57c:	09 f4       	brne	.+2      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 57e:	45 c0       	rjmp	.+138    	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
 580:	3c f4       	brge	.+14     	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
 582:	81 30       	cpi	r24, 0x01	; 1
 584:	91 05       	cpc	r25, r1
 586:	11 f1       	breq	.+68     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
 588:	7c f5       	brge	.+94     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 58a:	89 2b       	or	r24, r25
 58c:	99 f0       	breq	.+38     	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
 58e:	53 cf       	rjmp	.-346    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 590:	8b 30       	cpi	r24, 0x0B	; 11
 592:	91 05       	cpc	r25, r1
 594:	09 f4       	brne	.+2      	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 596:	5e c0       	rjmp	.+188    	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 598:	24 f4       	brge	.+8      	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 59a:	0a 97       	sbiw	r24, 0x0a	; 10
 59c:	09 f4       	brne	.+2      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 59e:	42 c0       	rjmp	.+132    	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
 5a0:	4a cf       	rjmp	.-364    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 5a2:	8c 30       	cpi	r24, 0x0C	; 12
 5a4:	91 05       	cpc	r25, r1
 5a6:	09 f4       	brne	.+2      	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
 5a8:	7d c0       	rjmp	.+250    	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
 5aa:	84 36       	cpi	r24, 0x64	; 100
 5ac:	91 05       	cpc	r25, r1
 5ae:	09 f4       	brne	.+2      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 5b0:	83 c0       	rjmp	.+262    	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
 5b2:	41 cf       	rjmp	.-382    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 5b4:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <Flag_AutoMode>
 5b8:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <Flag_AutoMode+0x1>
		{
			case 0:		// seq start
				if (Flag_AutoMode == 1)
 5bc:	01 97       	sbiw	r24, 0x01	; 1
 5be:	09 f0       	breq	.+2      	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 5c0:	3a cf       	rjmp	.-396    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 5c2:	f0 92 87 01 	sts	0x0187, r15	; 0x800187 <Seqeunce+0x1>
 5c6:	e0 92 86 01 	sts	0x0186, r14	; 0x800186 <Seqeunce>
				{
					Seqeunce++;
 5ca:	35 cf       	rjmp	.-406    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 5cc:	f5 de       	rcall	.-534    	; 0x3b8 <Check_Dropable>
 5ce:	01 97       	sbiw	r24, 0x01	; 1
 5d0:	09 f0       	breq	.+2      	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
 5d2:	31 cf       	rjmp	.-414    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
				}
			break;
			
			case 1:		//Drop stage에 제품이 있고, AGV가 없을 때
				if(Check_Dropable() == 1)
 5d4:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <Seqeunce>
 5d8:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <Seqeunce+0x1>
 5dc:	01 96       	adiw	r24, 0x01	; 1
				{
					Seqeunce++;
 5de:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <Seqeunce+0x1>
 5e2:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <Seqeunce>
 5e6:	27 cf       	rjmp	.-434    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 5e8:	0a 99       	sbic	0x01, 2	; 1
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 5ec:	c0 9a       	sbi	0x18, 0	; 24
 5ee:	23 cf       	rjmp	.-442    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 5f0:	0a 9b       	sbis	0x01, 2	; 1
				} 
			break;
			
			case 2:		// buffer sensor 들어올때까지 Drop Conv 구동
				if((Sensor_Port & Sensor_Buffer_stage) == 0x00)
 5f2:	21 cf       	rjmp	.-446    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 5f4:	c0 98       	cbi	0x18, 0	; 24
				{
					Motor_Port |= Motor_Conv_Drop1;
 5f6:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <Seqeunce>
				}
				else if((Sensor_Port & Sensor_Buffer_stage) == Sensor_Buffer_stage)
 5fa:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <Seqeunce+0x1>
				{
					Motor_Port &= ~Motor_Conv_Drop1;
 5fe:	01 96       	adiw	r24, 0x01	; 1
					Seqeunce++;
 600:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <Seqeunce+0x1>
 604:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <Seqeunce>
 608:	16 cf       	rjmp	.-468    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 60a:	0b 99       	sbic	0x01, 3	; 1
 60c:	14 cf       	rjmp	.-472    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 60e:	0c 99       	sbic	0x01, 4	; 1
 610:	12 cf       	rjmp	.-476    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 612:	70 92 87 01 	sts	0x0187, r7	; 0x800187 <Seqeunce+0x1>
				}
			break;
			
			case 3:		//Pick stage로 보내기 전에 확인(제품, AGV X)
				if((Sensor_Port & Sensor_Pick_stage) == 0x00 && (Sensor_Port & Sensor_Pick_AGV) == 0x00)
 616:	60 92 86 01 	sts	0x0186, r6	; 0x800186 <Seqeunce>
 61a:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <delay+0x1>
				{
					Seqeunce = 10;
 61e:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <delay>
 622:	09 cf       	rjmp	.-494    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
					delay = 0;
 624:	db bc       	out	0x2b, r13	; 43
 626:	ca bc       	out	0x2a, r12	; 42
 628:	f0 92 89 01 	sts	0x0189, r15	; 0x800189 <Motor_Stopper_open+0x1>
 62c:	e0 92 88 01 	sts	0x0188, r14	; 0x800188 <Motor_Stopper_open>
				}
			break;
			
			case 10:	//Stopper open
				Motor_Stopper = Pos_Stopper_Open;
 630:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <delay>
				Motor_Stopper_open = 1;
 634:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <delay+0x1>
 638:	80 38       	cpi	r24, 0x80	; 128
				if(delay >= Delay_Stopper)
 63a:	91 05       	cpc	r25, r1
 63c:	0c f4       	brge	.+2      	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 63e:	fb ce       	rjmp	.-522    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 640:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <Seqeunce>
 644:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <Seqeunce+0x1>
 648:	01 96       	adiw	r24, 0x01	; 1
				{
					Seqeunce++;
 64a:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <Seqeunce+0x1>
 64e:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <Seqeunce>
 652:	f1 ce       	rjmp	.-542    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 654:	0a 9b       	sbis	0x01, 2	; 1
 656:	07 c0       	rjmp	.+14     	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
 658:	c0 9a       	sbi	0x18, 0	; 24
 65a:	c2 9a       	sbi	0x18, 2	; 24
 65c:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <delay+0x1>
				}
			break;
			
			case 11:		//Buffer stage에서 Pick stage로 제품 보내기
				if((Sensor_Port & Sensor_Buffer_stage) == Sensor_Buffer_stage)
 660:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <delay>
				{
					//buffer에 제품 있으므로 Drop, Pick Conv 계속 구동
					Motor_Port |= Motor_Conv_Drop1;
					Motor_Port |= Motor_Conv_Pick1;
 664:	e8 ce       	rjmp	.-560    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
					delay = 0;
 666:	0a 99       	sbic	0x01, 2	; 1
 668:	e6 ce       	rjmp	.-564    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 66a:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <delay>
 66e:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <delay+0x1>
				}
				else if((Sensor_Port & Sensor_Buffer_stage) == 0x00)
 672:	80 34       	cpi	r24, 0x40	; 64
				{
					//buffer에 제품 없어짐, Drop Conv 정지, Stopper close
					if (delay >= Delay_Conv)
 674:	91 05       	cpc	r25, r1
 676:	0c f4       	brge	.+2      	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
 678:	de ce       	rjmp	.-580    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 67a:	c0 98       	cbi	0x18, 0	; 24
 67c:	9b bc       	out	0x2b, r9	; 43
 67e:	8a bc       	out	0x2a, r8	; 42
 680:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <Motor_Stopper_open+0x1>
					{
						Motor_Port &= ~Motor_Conv_Drop1;
 684:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <Motor_Stopper_open>
						
						Motor_Stopper = Pos_Stopper_Close;
 688:	f0 92 8d 01 	sts	0x018D, r15	; 0x80018d <Drop_ready+0x1>
						Motor_Stopper_open = 0;
 68c:	e0 92 8c 01 	sts	0x018C, r14	; 0x80018c <Drop_ready>
 690:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <Seqeunce>
						Drop_ready = 1;
 694:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <Seqeunce+0x1>
 698:	01 96       	adiw	r24, 0x01	; 1
						
						Seqeunce++;
 69a:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <Seqeunce+0x1>
 69e:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <Seqeunce>
 6a2:	c9 ce       	rjmp	.-622    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 6a4:	0b 9b       	sbis	0x01, 3	; 1
 6a6:	c7 ce       	rjmp	.-626    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 6a8:	0b 9b       	sbis	0x01, 3	; 1
 6aa:	c5 ce       	rjmp	.-630    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 6ac:	c2 98       	cbi	0x18, 2	; 24
					}
				}
			break;
			
			case 12:		//Pick stage 감지 후 Pick Conv 정지
				if((Sensor_Port & Sensor_Pick_stage) == 0x00)
 6ae:	b0 92 87 01 	sts	0x0187, r11	; 0x800187 <Seqeunce+0x1>
				{
					//pick stage에 제품 도착 안했으므로 Pick Conv 계속 구동
				}
				else if((Sensor_Port & Sensor_Pick_stage) == Sensor_Pick_stage)
 6b2:	a0 92 86 01 	sts	0x0186, r10	; 0x800186 <Seqeunce>
				{
					//pick stage 제품 도착 완료, Pick Conv 정지
					Motor_Port &= ~Motor_Conv_Pick1;
 6b6:	bf ce       	rjmp	.-642    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
					Seqeunce = 100;
 6b8:	f0 92 8b 01 	sts	0x018B, r15	; 0x80018b <Pick_ready+0x1>
 6bc:	e0 92 8a 01 	sts	0x018A, r14	; 0x80018a <Pick_ready>
 6c0:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <Seqeunce+0x1>
				}
			break;
			
			case 100:		//pick ready
				Pick_ready = 1;
 6c4:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <Seqeunce>
 6c8:	b6 ce       	rjmp	.-660    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>

000006ca <UART0_Init>:
				Seqeunce = 0;
 6ca:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 6ce:	8f ec       	ldi	r24, 0xCF	; 207
 6d0:	89 b9       	out	0x09, r24	; 9
			break;
 6d2:	59 9a       	sbi	0x0b, 1	; 11
 6d4:	e5 e9       	ldi	r30, 0x95	; 149
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	80 81       	ld	r24, Z
 6da:	86 60       	ori	r24, 0x06	; 6
 6dc:	80 83       	st	Z, r24
 6de:	88 e9       	ldi	r24, 0x98	; 152
 6e0:	8a b9       	out	0x0a, r24	; 10
 6e2:	08 95       	ret

000006e4 <UART0_transmit>:
 6e4:	5d 9b       	sbis	0x0b, 5	; 11
 6e6:	fe cf       	rjmp	.-4      	; 0x6e4 <UART0_transmit>
 6e8:	8c b9       	out	0x0c, r24	; 12
 6ea:	08 95       	ret

000006ec <UART0_printf_string>:
 6ec:	cf 93       	push	r28
 6ee:	df 93       	push	r29
 6f0:	ec 01       	movw	r28, r24
 6f2:	88 81       	ld	r24, Y
 6f4:	88 23       	and	r24, r24
 6f6:	29 f0       	breq	.+10     	; 0x702 <UART0_printf_string+0x16>
 6f8:	21 96       	adiw	r28, 0x01	; 1
 6fa:	f4 df       	rcall	.-24     	; 0x6e4 <UART0_transmit>
 6fc:	89 91       	ld	r24, Y+
 6fe:	81 11       	cpse	r24, r1
 700:	fc cf       	rjmp	.-8      	; 0x6fa <UART0_printf_string+0xe>
 702:	df 91       	pop	r29
 704:	cf 91       	pop	r28
 706:	08 95       	ret

00000708 <isRxString>:
 708:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <rxReadyFlag>
 70c:	08 95       	ret

0000070e <getRxString>:
 70e:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <rxReadyFlag>
 712:	82 e9       	ldi	r24, 0x92	; 146
 714:	91 e0       	ldi	r25, 0x01	; 1
 716:	08 95       	ret

00000718 <UART0_ISR_Receive>:
 718:	cf 93       	push	r28
 71a:	df 93       	push	r29
 71c:	1f 92       	push	r1
 71e:	cd b7       	in	r28, 0x3d	; 61
 720:	de b7       	in	r29, 0x3e	; 62
 722:	8c b1       	in	r24, 0x0c	; 12
 724:	89 83       	std	Y+1, r24	; 0x01
 726:	89 81       	ldd	r24, Y+1	; 0x01
 728:	8a 30       	cpi	r24, 0x0A	; 10
 72a:	19 f0       	breq	.+6      	; 0x732 <UART0_ISR_Receive+0x1a>
 72c:	89 81       	ldd	r24, Y+1	; 0x01
 72e:	8d 30       	cpi	r24, 0x0D	; 13
 730:	61 f4       	brne	.+24     	; 0x74a <UART0_ISR_Receive+0x32>
 732:	e0 91 90 01 	lds	r30, 0x0190	; 0x800190 <head.1771>
 736:	f0 e0       	ldi	r31, 0x00	; 0
 738:	ee 56       	subi	r30, 0x6E	; 110
 73a:	fe 4f       	sbci	r31, 0xFE	; 254
 73c:	10 82       	st	Z, r1
 73e:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <head.1771>
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <rxReadyFlag>
 748:	0b c0       	rjmp	.+22     	; 0x760 <UART0_ISR_Receive+0x48>
 74a:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <head.1771>
 74e:	e8 2f       	mov	r30, r24
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	99 81       	ldd	r25, Y+1	; 0x01
 754:	ee 56       	subi	r30, 0x6E	; 110
 756:	fe 4f       	sbci	r31, 0xFE	; 254
 758:	90 83       	st	Z, r25
 75a:	8f 5f       	subi	r24, 0xFF	; 255
 75c:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <head.1771>
 760:	0f 90       	pop	r0
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
 766:	08 95       	ret

00000768 <strtok>:
 768:	4c e4       	ldi	r20, 0x4C	; 76
 76a:	51 e0       	ldi	r21, 0x01	; 1
 76c:	0e c0       	rjmp	.+28     	; 0x78a <strtok_r>

0000076e <strncmp>:
 76e:	fb 01       	movw	r30, r22
 770:	dc 01       	movw	r26, r24
 772:	41 50       	subi	r20, 0x01	; 1
 774:	50 40       	sbci	r21, 0x00	; 0
 776:	30 f0       	brcs	.+12     	; 0x784 <strncmp+0x16>
 778:	8d 91       	ld	r24, X+
 77a:	01 90       	ld	r0, Z+
 77c:	80 19       	sub	r24, r0
 77e:	19 f4       	brne	.+6      	; 0x786 <strncmp+0x18>
 780:	00 20       	and	r0, r0
 782:	b9 f7       	brne	.-18     	; 0x772 <strncmp+0x4>
 784:	88 1b       	sub	r24, r24
 786:	99 0b       	sbc	r25, r25
 788:	08 95       	ret

0000078a <strtok_r>:
 78a:	fa 01       	movw	r30, r20
 78c:	a1 91       	ld	r26, Z+
 78e:	b0 81       	ld	r27, Z
 790:	00 97       	sbiw	r24, 0x00	; 0
 792:	19 f4       	brne	.+6      	; 0x79a <strtok_r+0x10>
 794:	10 97       	sbiw	r26, 0x00	; 0
 796:	e1 f0       	breq	.+56     	; 0x7d0 <strtok_r+0x46>
 798:	cd 01       	movw	r24, r26
 79a:	dc 01       	movw	r26, r24
 79c:	cd 01       	movw	r24, r26
 79e:	0d 90       	ld	r0, X+
 7a0:	00 20       	and	r0, r0
 7a2:	11 f4       	brne	.+4      	; 0x7a8 <strtok_r+0x1e>
 7a4:	c0 01       	movw	r24, r0
 7a6:	13 c0       	rjmp	.+38     	; 0x7ce <strtok_r+0x44>
 7a8:	fb 01       	movw	r30, r22
 7aa:	21 91       	ld	r18, Z+
 7ac:	22 23       	and	r18, r18
 7ae:	19 f0       	breq	.+6      	; 0x7b6 <strtok_r+0x2c>
 7b0:	20 15       	cp	r18, r0
 7b2:	d9 f7       	brne	.-10     	; 0x7aa <strtok_r+0x20>
 7b4:	f3 cf       	rjmp	.-26     	; 0x79c <strtok_r+0x12>
 7b6:	fb 01       	movw	r30, r22
 7b8:	21 91       	ld	r18, Z+
 7ba:	20 15       	cp	r18, r0
 7bc:	19 f4       	brne	.+6      	; 0x7c4 <strtok_r+0x3a>
 7be:	1e 92       	st	-X, r1
 7c0:	11 96       	adiw	r26, 0x01	; 1
 7c2:	06 c0       	rjmp	.+12     	; 0x7d0 <strtok_r+0x46>
 7c4:	22 23       	and	r18, r18
 7c6:	c1 f7       	brne	.-16     	; 0x7b8 <strtok_r+0x2e>
 7c8:	0d 90       	ld	r0, X+
 7ca:	00 20       	and	r0, r0
 7cc:	a1 f7       	brne	.-24     	; 0x7b6 <strtok_r+0x2c>
 7ce:	d0 01       	movw	r26, r0
 7d0:	fa 01       	movw	r30, r20
 7d2:	a1 93       	st	Z+, r26
 7d4:	b0 83       	st	Z, r27
 7d6:	08 95       	ret

000007d8 <sprintf>:
 7d8:	0f 93       	push	r16
 7da:	1f 93       	push	r17
 7dc:	cf 93       	push	r28
 7de:	df 93       	push	r29
 7e0:	cd b7       	in	r28, 0x3d	; 61
 7e2:	de b7       	in	r29, 0x3e	; 62
 7e4:	2e 97       	sbiw	r28, 0x0e	; 14
 7e6:	0f b6       	in	r0, 0x3f	; 63
 7e8:	f8 94       	cli
 7ea:	de bf       	out	0x3e, r29	; 62
 7ec:	0f be       	out	0x3f, r0	; 63
 7ee:	cd bf       	out	0x3d, r28	; 61
 7f0:	0d 89       	ldd	r16, Y+21	; 0x15
 7f2:	1e 89       	ldd	r17, Y+22	; 0x16
 7f4:	86 e0       	ldi	r24, 0x06	; 6
 7f6:	8c 83       	std	Y+4, r24	; 0x04
 7f8:	1a 83       	std	Y+2, r17	; 0x02
 7fa:	09 83       	std	Y+1, r16	; 0x01
 7fc:	8f ef       	ldi	r24, 0xFF	; 255
 7fe:	9f e7       	ldi	r25, 0x7F	; 127
 800:	9e 83       	std	Y+6, r25	; 0x06
 802:	8d 83       	std	Y+5, r24	; 0x05
 804:	ae 01       	movw	r20, r28
 806:	47 5e       	subi	r20, 0xE7	; 231
 808:	5f 4f       	sbci	r21, 0xFF	; 255
 80a:	6f 89       	ldd	r22, Y+23	; 0x17
 80c:	78 8d       	ldd	r23, Y+24	; 0x18
 80e:	ce 01       	movw	r24, r28
 810:	01 96       	adiw	r24, 0x01	; 1
 812:	10 d0       	rcall	.+32     	; 0x834 <vfprintf>
 814:	ef 81       	ldd	r30, Y+7	; 0x07
 816:	f8 85       	ldd	r31, Y+8	; 0x08
 818:	e0 0f       	add	r30, r16
 81a:	f1 1f       	adc	r31, r17
 81c:	10 82       	st	Z, r1
 81e:	2e 96       	adiw	r28, 0x0e	; 14
 820:	0f b6       	in	r0, 0x3f	; 63
 822:	f8 94       	cli
 824:	de bf       	out	0x3e, r29	; 62
 826:	0f be       	out	0x3f, r0	; 63
 828:	cd bf       	out	0x3d, r28	; 61
 82a:	df 91       	pop	r29
 82c:	cf 91       	pop	r28
 82e:	1f 91       	pop	r17
 830:	0f 91       	pop	r16
 832:	08 95       	ret

00000834 <vfprintf>:
 834:	2f 92       	push	r2
 836:	3f 92       	push	r3
 838:	4f 92       	push	r4
 83a:	5f 92       	push	r5
 83c:	6f 92       	push	r6
 83e:	7f 92       	push	r7
 840:	8f 92       	push	r8
 842:	9f 92       	push	r9
 844:	af 92       	push	r10
 846:	bf 92       	push	r11
 848:	cf 92       	push	r12
 84a:	df 92       	push	r13
 84c:	ef 92       	push	r14
 84e:	ff 92       	push	r15
 850:	0f 93       	push	r16
 852:	1f 93       	push	r17
 854:	cf 93       	push	r28
 856:	df 93       	push	r29
 858:	cd b7       	in	r28, 0x3d	; 61
 85a:	de b7       	in	r29, 0x3e	; 62
 85c:	2b 97       	sbiw	r28, 0x0b	; 11
 85e:	0f b6       	in	r0, 0x3f	; 63
 860:	f8 94       	cli
 862:	de bf       	out	0x3e, r29	; 62
 864:	0f be       	out	0x3f, r0	; 63
 866:	cd bf       	out	0x3d, r28	; 61
 868:	6c 01       	movw	r12, r24
 86a:	7b 01       	movw	r14, r22
 86c:	8a 01       	movw	r16, r20
 86e:	fc 01       	movw	r30, r24
 870:	17 82       	std	Z+7, r1	; 0x07
 872:	16 82       	std	Z+6, r1	; 0x06
 874:	83 81       	ldd	r24, Z+3	; 0x03
 876:	81 ff       	sbrs	r24, 1
 878:	bf c1       	rjmp	.+894    	; 0xbf8 <vfprintf+0x3c4>
 87a:	ce 01       	movw	r24, r28
 87c:	01 96       	adiw	r24, 0x01	; 1
 87e:	3c 01       	movw	r6, r24
 880:	f6 01       	movw	r30, r12
 882:	93 81       	ldd	r25, Z+3	; 0x03
 884:	f7 01       	movw	r30, r14
 886:	93 fd       	sbrc	r25, 3
 888:	85 91       	lpm	r24, Z+
 88a:	93 ff       	sbrs	r25, 3
 88c:	81 91       	ld	r24, Z+
 88e:	7f 01       	movw	r14, r30
 890:	88 23       	and	r24, r24
 892:	09 f4       	brne	.+2      	; 0x896 <vfprintf+0x62>
 894:	ad c1       	rjmp	.+858    	; 0xbf0 <vfprintf+0x3bc>
 896:	85 32       	cpi	r24, 0x25	; 37
 898:	39 f4       	brne	.+14     	; 0x8a8 <vfprintf+0x74>
 89a:	93 fd       	sbrc	r25, 3
 89c:	85 91       	lpm	r24, Z+
 89e:	93 ff       	sbrs	r25, 3
 8a0:	81 91       	ld	r24, Z+
 8a2:	7f 01       	movw	r14, r30
 8a4:	85 32       	cpi	r24, 0x25	; 37
 8a6:	21 f4       	brne	.+8      	; 0x8b0 <vfprintf+0x7c>
 8a8:	b6 01       	movw	r22, r12
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	d6 d1       	rcall	.+940    	; 0xc5a <fputc>
 8ae:	e8 cf       	rjmp	.-48     	; 0x880 <vfprintf+0x4c>
 8b0:	91 2c       	mov	r9, r1
 8b2:	21 2c       	mov	r2, r1
 8b4:	31 2c       	mov	r3, r1
 8b6:	ff e1       	ldi	r31, 0x1F	; 31
 8b8:	f3 15       	cp	r31, r3
 8ba:	d8 f0       	brcs	.+54     	; 0x8f2 <vfprintf+0xbe>
 8bc:	8b 32       	cpi	r24, 0x2B	; 43
 8be:	79 f0       	breq	.+30     	; 0x8de <vfprintf+0xaa>
 8c0:	38 f4       	brcc	.+14     	; 0x8d0 <vfprintf+0x9c>
 8c2:	80 32       	cpi	r24, 0x20	; 32
 8c4:	79 f0       	breq	.+30     	; 0x8e4 <vfprintf+0xb0>
 8c6:	83 32       	cpi	r24, 0x23	; 35
 8c8:	a1 f4       	brne	.+40     	; 0x8f2 <vfprintf+0xbe>
 8ca:	23 2d       	mov	r18, r3
 8cc:	20 61       	ori	r18, 0x10	; 16
 8ce:	1d c0       	rjmp	.+58     	; 0x90a <vfprintf+0xd6>
 8d0:	8d 32       	cpi	r24, 0x2D	; 45
 8d2:	61 f0       	breq	.+24     	; 0x8ec <vfprintf+0xb8>
 8d4:	80 33       	cpi	r24, 0x30	; 48
 8d6:	69 f4       	brne	.+26     	; 0x8f2 <vfprintf+0xbe>
 8d8:	23 2d       	mov	r18, r3
 8da:	21 60       	ori	r18, 0x01	; 1
 8dc:	16 c0       	rjmp	.+44     	; 0x90a <vfprintf+0xd6>
 8de:	83 2d       	mov	r24, r3
 8e0:	82 60       	ori	r24, 0x02	; 2
 8e2:	38 2e       	mov	r3, r24
 8e4:	e3 2d       	mov	r30, r3
 8e6:	e4 60       	ori	r30, 0x04	; 4
 8e8:	3e 2e       	mov	r3, r30
 8ea:	2a c0       	rjmp	.+84     	; 0x940 <vfprintf+0x10c>
 8ec:	f3 2d       	mov	r31, r3
 8ee:	f8 60       	ori	r31, 0x08	; 8
 8f0:	1d c0       	rjmp	.+58     	; 0x92c <vfprintf+0xf8>
 8f2:	37 fc       	sbrc	r3, 7
 8f4:	2d c0       	rjmp	.+90     	; 0x950 <vfprintf+0x11c>
 8f6:	20 ed       	ldi	r18, 0xD0	; 208
 8f8:	28 0f       	add	r18, r24
 8fa:	2a 30       	cpi	r18, 0x0A	; 10
 8fc:	40 f0       	brcs	.+16     	; 0x90e <vfprintf+0xda>
 8fe:	8e 32       	cpi	r24, 0x2E	; 46
 900:	b9 f4       	brne	.+46     	; 0x930 <vfprintf+0xfc>
 902:	36 fc       	sbrc	r3, 6
 904:	75 c1       	rjmp	.+746    	; 0xbf0 <vfprintf+0x3bc>
 906:	23 2d       	mov	r18, r3
 908:	20 64       	ori	r18, 0x40	; 64
 90a:	32 2e       	mov	r3, r18
 90c:	19 c0       	rjmp	.+50     	; 0x940 <vfprintf+0x10c>
 90e:	36 fe       	sbrs	r3, 6
 910:	06 c0       	rjmp	.+12     	; 0x91e <vfprintf+0xea>
 912:	8a e0       	ldi	r24, 0x0A	; 10
 914:	98 9e       	mul	r9, r24
 916:	20 0d       	add	r18, r0
 918:	11 24       	eor	r1, r1
 91a:	92 2e       	mov	r9, r18
 91c:	11 c0       	rjmp	.+34     	; 0x940 <vfprintf+0x10c>
 91e:	ea e0       	ldi	r30, 0x0A	; 10
 920:	2e 9e       	mul	r2, r30
 922:	20 0d       	add	r18, r0
 924:	11 24       	eor	r1, r1
 926:	22 2e       	mov	r2, r18
 928:	f3 2d       	mov	r31, r3
 92a:	f0 62       	ori	r31, 0x20	; 32
 92c:	3f 2e       	mov	r3, r31
 92e:	08 c0       	rjmp	.+16     	; 0x940 <vfprintf+0x10c>
 930:	8c 36       	cpi	r24, 0x6C	; 108
 932:	21 f4       	brne	.+8      	; 0x93c <vfprintf+0x108>
 934:	83 2d       	mov	r24, r3
 936:	80 68       	ori	r24, 0x80	; 128
 938:	38 2e       	mov	r3, r24
 93a:	02 c0       	rjmp	.+4      	; 0x940 <vfprintf+0x10c>
 93c:	88 36       	cpi	r24, 0x68	; 104
 93e:	41 f4       	brne	.+16     	; 0x950 <vfprintf+0x11c>
 940:	f7 01       	movw	r30, r14
 942:	93 fd       	sbrc	r25, 3
 944:	85 91       	lpm	r24, Z+
 946:	93 ff       	sbrs	r25, 3
 948:	81 91       	ld	r24, Z+
 94a:	7f 01       	movw	r14, r30
 94c:	81 11       	cpse	r24, r1
 94e:	b3 cf       	rjmp	.-154    	; 0x8b6 <vfprintf+0x82>
 950:	98 2f       	mov	r25, r24
 952:	9f 7d       	andi	r25, 0xDF	; 223
 954:	95 54       	subi	r25, 0x45	; 69
 956:	93 30       	cpi	r25, 0x03	; 3
 958:	28 f4       	brcc	.+10     	; 0x964 <vfprintf+0x130>
 95a:	0c 5f       	subi	r16, 0xFC	; 252
 95c:	1f 4f       	sbci	r17, 0xFF	; 255
 95e:	9f e3       	ldi	r25, 0x3F	; 63
 960:	99 83       	std	Y+1, r25	; 0x01
 962:	0d c0       	rjmp	.+26     	; 0x97e <vfprintf+0x14a>
 964:	83 36       	cpi	r24, 0x63	; 99
 966:	31 f0       	breq	.+12     	; 0x974 <vfprintf+0x140>
 968:	83 37       	cpi	r24, 0x73	; 115
 96a:	71 f0       	breq	.+28     	; 0x988 <vfprintf+0x154>
 96c:	83 35       	cpi	r24, 0x53	; 83
 96e:	09 f0       	breq	.+2      	; 0x972 <vfprintf+0x13e>
 970:	55 c0       	rjmp	.+170    	; 0xa1c <vfprintf+0x1e8>
 972:	20 c0       	rjmp	.+64     	; 0x9b4 <vfprintf+0x180>
 974:	f8 01       	movw	r30, r16
 976:	80 81       	ld	r24, Z
 978:	89 83       	std	Y+1, r24	; 0x01
 97a:	0e 5f       	subi	r16, 0xFE	; 254
 97c:	1f 4f       	sbci	r17, 0xFF	; 255
 97e:	88 24       	eor	r8, r8
 980:	83 94       	inc	r8
 982:	91 2c       	mov	r9, r1
 984:	53 01       	movw	r10, r6
 986:	12 c0       	rjmp	.+36     	; 0x9ac <vfprintf+0x178>
 988:	28 01       	movw	r4, r16
 98a:	f2 e0       	ldi	r31, 0x02	; 2
 98c:	4f 0e       	add	r4, r31
 98e:	51 1c       	adc	r5, r1
 990:	f8 01       	movw	r30, r16
 992:	a0 80       	ld	r10, Z
 994:	b1 80       	ldd	r11, Z+1	; 0x01
 996:	36 fe       	sbrs	r3, 6
 998:	03 c0       	rjmp	.+6      	; 0x9a0 <vfprintf+0x16c>
 99a:	69 2d       	mov	r22, r9
 99c:	70 e0       	ldi	r23, 0x00	; 0
 99e:	02 c0       	rjmp	.+4      	; 0x9a4 <vfprintf+0x170>
 9a0:	6f ef       	ldi	r22, 0xFF	; 255
 9a2:	7f ef       	ldi	r23, 0xFF	; 255
 9a4:	c5 01       	movw	r24, r10
 9a6:	4e d1       	rcall	.+668    	; 0xc44 <strnlen>
 9a8:	4c 01       	movw	r8, r24
 9aa:	82 01       	movw	r16, r4
 9ac:	f3 2d       	mov	r31, r3
 9ae:	ff 77       	andi	r31, 0x7F	; 127
 9b0:	3f 2e       	mov	r3, r31
 9b2:	15 c0       	rjmp	.+42     	; 0x9de <vfprintf+0x1aa>
 9b4:	28 01       	movw	r4, r16
 9b6:	22 e0       	ldi	r18, 0x02	; 2
 9b8:	42 0e       	add	r4, r18
 9ba:	51 1c       	adc	r5, r1
 9bc:	f8 01       	movw	r30, r16
 9be:	a0 80       	ld	r10, Z
 9c0:	b1 80       	ldd	r11, Z+1	; 0x01
 9c2:	36 fe       	sbrs	r3, 6
 9c4:	03 c0       	rjmp	.+6      	; 0x9cc <vfprintf+0x198>
 9c6:	69 2d       	mov	r22, r9
 9c8:	70 e0       	ldi	r23, 0x00	; 0
 9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <vfprintf+0x19c>
 9cc:	6f ef       	ldi	r22, 0xFF	; 255
 9ce:	7f ef       	ldi	r23, 0xFF	; 255
 9d0:	c5 01       	movw	r24, r10
 9d2:	2d d1       	rcall	.+602    	; 0xc2e <strnlen_P>
 9d4:	4c 01       	movw	r8, r24
 9d6:	f3 2d       	mov	r31, r3
 9d8:	f0 68       	ori	r31, 0x80	; 128
 9da:	3f 2e       	mov	r3, r31
 9dc:	82 01       	movw	r16, r4
 9de:	33 fc       	sbrc	r3, 3
 9e0:	19 c0       	rjmp	.+50     	; 0xa14 <vfprintf+0x1e0>
 9e2:	82 2d       	mov	r24, r2
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	88 16       	cp	r8, r24
 9e8:	99 06       	cpc	r9, r25
 9ea:	a0 f4       	brcc	.+40     	; 0xa14 <vfprintf+0x1e0>
 9ec:	b6 01       	movw	r22, r12
 9ee:	80 e2       	ldi	r24, 0x20	; 32
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	33 d1       	rcall	.+614    	; 0xc5a <fputc>
 9f4:	2a 94       	dec	r2
 9f6:	f5 cf       	rjmp	.-22     	; 0x9e2 <vfprintf+0x1ae>
 9f8:	f5 01       	movw	r30, r10
 9fa:	37 fc       	sbrc	r3, 7
 9fc:	85 91       	lpm	r24, Z+
 9fe:	37 fe       	sbrs	r3, 7
 a00:	81 91       	ld	r24, Z+
 a02:	5f 01       	movw	r10, r30
 a04:	b6 01       	movw	r22, r12
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	28 d1       	rcall	.+592    	; 0xc5a <fputc>
 a0a:	21 10       	cpse	r2, r1
 a0c:	2a 94       	dec	r2
 a0e:	21 e0       	ldi	r18, 0x01	; 1
 a10:	82 1a       	sub	r8, r18
 a12:	91 08       	sbc	r9, r1
 a14:	81 14       	cp	r8, r1
 a16:	91 04       	cpc	r9, r1
 a18:	79 f7       	brne	.-34     	; 0x9f8 <vfprintf+0x1c4>
 a1a:	e1 c0       	rjmp	.+450    	; 0xbde <vfprintf+0x3aa>
 a1c:	84 36       	cpi	r24, 0x64	; 100
 a1e:	11 f0       	breq	.+4      	; 0xa24 <vfprintf+0x1f0>
 a20:	89 36       	cpi	r24, 0x69	; 105
 a22:	39 f5       	brne	.+78     	; 0xa72 <vfprintf+0x23e>
 a24:	f8 01       	movw	r30, r16
 a26:	37 fe       	sbrs	r3, 7
 a28:	07 c0       	rjmp	.+14     	; 0xa38 <vfprintf+0x204>
 a2a:	60 81       	ld	r22, Z
 a2c:	71 81       	ldd	r23, Z+1	; 0x01
 a2e:	82 81       	ldd	r24, Z+2	; 0x02
 a30:	93 81       	ldd	r25, Z+3	; 0x03
 a32:	0c 5f       	subi	r16, 0xFC	; 252
 a34:	1f 4f       	sbci	r17, 0xFF	; 255
 a36:	08 c0       	rjmp	.+16     	; 0xa48 <vfprintf+0x214>
 a38:	60 81       	ld	r22, Z
 a3a:	71 81       	ldd	r23, Z+1	; 0x01
 a3c:	07 2e       	mov	r0, r23
 a3e:	00 0c       	add	r0, r0
 a40:	88 0b       	sbc	r24, r24
 a42:	99 0b       	sbc	r25, r25
 a44:	0e 5f       	subi	r16, 0xFE	; 254
 a46:	1f 4f       	sbci	r17, 0xFF	; 255
 a48:	f3 2d       	mov	r31, r3
 a4a:	ff 76       	andi	r31, 0x6F	; 111
 a4c:	3f 2e       	mov	r3, r31
 a4e:	97 ff       	sbrs	r25, 7
 a50:	09 c0       	rjmp	.+18     	; 0xa64 <vfprintf+0x230>
 a52:	90 95       	com	r25
 a54:	80 95       	com	r24
 a56:	70 95       	com	r23
 a58:	61 95       	neg	r22
 a5a:	7f 4f       	sbci	r23, 0xFF	; 255
 a5c:	8f 4f       	sbci	r24, 0xFF	; 255
 a5e:	9f 4f       	sbci	r25, 0xFF	; 255
 a60:	f0 68       	ori	r31, 0x80	; 128
 a62:	3f 2e       	mov	r3, r31
 a64:	2a e0       	ldi	r18, 0x0A	; 10
 a66:	30 e0       	ldi	r19, 0x00	; 0
 a68:	a3 01       	movw	r20, r6
 a6a:	33 d1       	rcall	.+614    	; 0xcd2 <__ultoa_invert>
 a6c:	88 2e       	mov	r8, r24
 a6e:	86 18       	sub	r8, r6
 a70:	44 c0       	rjmp	.+136    	; 0xafa <vfprintf+0x2c6>
 a72:	85 37       	cpi	r24, 0x75	; 117
 a74:	31 f4       	brne	.+12     	; 0xa82 <vfprintf+0x24e>
 a76:	23 2d       	mov	r18, r3
 a78:	2f 7e       	andi	r18, 0xEF	; 239
 a7a:	b2 2e       	mov	r11, r18
 a7c:	2a e0       	ldi	r18, 0x0A	; 10
 a7e:	30 e0       	ldi	r19, 0x00	; 0
 a80:	25 c0       	rjmp	.+74     	; 0xacc <vfprintf+0x298>
 a82:	93 2d       	mov	r25, r3
 a84:	99 7f       	andi	r25, 0xF9	; 249
 a86:	b9 2e       	mov	r11, r25
 a88:	8f 36       	cpi	r24, 0x6F	; 111
 a8a:	c1 f0       	breq	.+48     	; 0xabc <vfprintf+0x288>
 a8c:	18 f4       	brcc	.+6      	; 0xa94 <vfprintf+0x260>
 a8e:	88 35       	cpi	r24, 0x58	; 88
 a90:	79 f0       	breq	.+30     	; 0xab0 <vfprintf+0x27c>
 a92:	ae c0       	rjmp	.+348    	; 0xbf0 <vfprintf+0x3bc>
 a94:	80 37       	cpi	r24, 0x70	; 112
 a96:	19 f0       	breq	.+6      	; 0xa9e <vfprintf+0x26a>
 a98:	88 37       	cpi	r24, 0x78	; 120
 a9a:	21 f0       	breq	.+8      	; 0xaa4 <vfprintf+0x270>
 a9c:	a9 c0       	rjmp	.+338    	; 0xbf0 <vfprintf+0x3bc>
 a9e:	e9 2f       	mov	r30, r25
 aa0:	e0 61       	ori	r30, 0x10	; 16
 aa2:	be 2e       	mov	r11, r30
 aa4:	b4 fe       	sbrs	r11, 4
 aa6:	0d c0       	rjmp	.+26     	; 0xac2 <vfprintf+0x28e>
 aa8:	fb 2d       	mov	r31, r11
 aaa:	f4 60       	ori	r31, 0x04	; 4
 aac:	bf 2e       	mov	r11, r31
 aae:	09 c0       	rjmp	.+18     	; 0xac2 <vfprintf+0x28e>
 ab0:	34 fe       	sbrs	r3, 4
 ab2:	0a c0       	rjmp	.+20     	; 0xac8 <vfprintf+0x294>
 ab4:	29 2f       	mov	r18, r25
 ab6:	26 60       	ori	r18, 0x06	; 6
 ab8:	b2 2e       	mov	r11, r18
 aba:	06 c0       	rjmp	.+12     	; 0xac8 <vfprintf+0x294>
 abc:	28 e0       	ldi	r18, 0x08	; 8
 abe:	30 e0       	ldi	r19, 0x00	; 0
 ac0:	05 c0       	rjmp	.+10     	; 0xacc <vfprintf+0x298>
 ac2:	20 e1       	ldi	r18, 0x10	; 16
 ac4:	30 e0       	ldi	r19, 0x00	; 0
 ac6:	02 c0       	rjmp	.+4      	; 0xacc <vfprintf+0x298>
 ac8:	20 e1       	ldi	r18, 0x10	; 16
 aca:	32 e0       	ldi	r19, 0x02	; 2
 acc:	f8 01       	movw	r30, r16
 ace:	b7 fe       	sbrs	r11, 7
 ad0:	07 c0       	rjmp	.+14     	; 0xae0 <vfprintf+0x2ac>
 ad2:	60 81       	ld	r22, Z
 ad4:	71 81       	ldd	r23, Z+1	; 0x01
 ad6:	82 81       	ldd	r24, Z+2	; 0x02
 ad8:	93 81       	ldd	r25, Z+3	; 0x03
 ada:	0c 5f       	subi	r16, 0xFC	; 252
 adc:	1f 4f       	sbci	r17, 0xFF	; 255
 ade:	06 c0       	rjmp	.+12     	; 0xaec <vfprintf+0x2b8>
 ae0:	60 81       	ld	r22, Z
 ae2:	71 81       	ldd	r23, Z+1	; 0x01
 ae4:	80 e0       	ldi	r24, 0x00	; 0
 ae6:	90 e0       	ldi	r25, 0x00	; 0
 ae8:	0e 5f       	subi	r16, 0xFE	; 254
 aea:	1f 4f       	sbci	r17, 0xFF	; 255
 aec:	a3 01       	movw	r20, r6
 aee:	f1 d0       	rcall	.+482    	; 0xcd2 <__ultoa_invert>
 af0:	88 2e       	mov	r8, r24
 af2:	86 18       	sub	r8, r6
 af4:	fb 2d       	mov	r31, r11
 af6:	ff 77       	andi	r31, 0x7F	; 127
 af8:	3f 2e       	mov	r3, r31
 afa:	36 fe       	sbrs	r3, 6
 afc:	0d c0       	rjmp	.+26     	; 0xb18 <vfprintf+0x2e4>
 afe:	23 2d       	mov	r18, r3
 b00:	2e 7f       	andi	r18, 0xFE	; 254
 b02:	a2 2e       	mov	r10, r18
 b04:	89 14       	cp	r8, r9
 b06:	58 f4       	brcc	.+22     	; 0xb1e <vfprintf+0x2ea>
 b08:	34 fe       	sbrs	r3, 4
 b0a:	0b c0       	rjmp	.+22     	; 0xb22 <vfprintf+0x2ee>
 b0c:	32 fc       	sbrc	r3, 2
 b0e:	09 c0       	rjmp	.+18     	; 0xb22 <vfprintf+0x2ee>
 b10:	83 2d       	mov	r24, r3
 b12:	8e 7e       	andi	r24, 0xEE	; 238
 b14:	a8 2e       	mov	r10, r24
 b16:	05 c0       	rjmp	.+10     	; 0xb22 <vfprintf+0x2ee>
 b18:	b8 2c       	mov	r11, r8
 b1a:	a3 2c       	mov	r10, r3
 b1c:	03 c0       	rjmp	.+6      	; 0xb24 <vfprintf+0x2f0>
 b1e:	b8 2c       	mov	r11, r8
 b20:	01 c0       	rjmp	.+2      	; 0xb24 <vfprintf+0x2f0>
 b22:	b9 2c       	mov	r11, r9
 b24:	a4 fe       	sbrs	r10, 4
 b26:	0f c0       	rjmp	.+30     	; 0xb46 <vfprintf+0x312>
 b28:	fe 01       	movw	r30, r28
 b2a:	e8 0d       	add	r30, r8
 b2c:	f1 1d       	adc	r31, r1
 b2e:	80 81       	ld	r24, Z
 b30:	80 33       	cpi	r24, 0x30	; 48
 b32:	21 f4       	brne	.+8      	; 0xb3c <vfprintf+0x308>
 b34:	9a 2d       	mov	r25, r10
 b36:	99 7e       	andi	r25, 0xE9	; 233
 b38:	a9 2e       	mov	r10, r25
 b3a:	09 c0       	rjmp	.+18     	; 0xb4e <vfprintf+0x31a>
 b3c:	a2 fe       	sbrs	r10, 2
 b3e:	06 c0       	rjmp	.+12     	; 0xb4c <vfprintf+0x318>
 b40:	b3 94       	inc	r11
 b42:	b3 94       	inc	r11
 b44:	04 c0       	rjmp	.+8      	; 0xb4e <vfprintf+0x31a>
 b46:	8a 2d       	mov	r24, r10
 b48:	86 78       	andi	r24, 0x86	; 134
 b4a:	09 f0       	breq	.+2      	; 0xb4e <vfprintf+0x31a>
 b4c:	b3 94       	inc	r11
 b4e:	a3 fc       	sbrc	r10, 3
 b50:	10 c0       	rjmp	.+32     	; 0xb72 <vfprintf+0x33e>
 b52:	a0 fe       	sbrs	r10, 0
 b54:	06 c0       	rjmp	.+12     	; 0xb62 <vfprintf+0x32e>
 b56:	b2 14       	cp	r11, r2
 b58:	80 f4       	brcc	.+32     	; 0xb7a <vfprintf+0x346>
 b5a:	28 0c       	add	r2, r8
 b5c:	92 2c       	mov	r9, r2
 b5e:	9b 18       	sub	r9, r11
 b60:	0d c0       	rjmp	.+26     	; 0xb7c <vfprintf+0x348>
 b62:	b2 14       	cp	r11, r2
 b64:	58 f4       	brcc	.+22     	; 0xb7c <vfprintf+0x348>
 b66:	b6 01       	movw	r22, r12
 b68:	80 e2       	ldi	r24, 0x20	; 32
 b6a:	90 e0       	ldi	r25, 0x00	; 0
 b6c:	76 d0       	rcall	.+236    	; 0xc5a <fputc>
 b6e:	b3 94       	inc	r11
 b70:	f8 cf       	rjmp	.-16     	; 0xb62 <vfprintf+0x32e>
 b72:	b2 14       	cp	r11, r2
 b74:	18 f4       	brcc	.+6      	; 0xb7c <vfprintf+0x348>
 b76:	2b 18       	sub	r2, r11
 b78:	02 c0       	rjmp	.+4      	; 0xb7e <vfprintf+0x34a>
 b7a:	98 2c       	mov	r9, r8
 b7c:	21 2c       	mov	r2, r1
 b7e:	a4 fe       	sbrs	r10, 4
 b80:	0f c0       	rjmp	.+30     	; 0xba0 <vfprintf+0x36c>
 b82:	b6 01       	movw	r22, r12
 b84:	80 e3       	ldi	r24, 0x30	; 48
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	68 d0       	rcall	.+208    	; 0xc5a <fputc>
 b8a:	a2 fe       	sbrs	r10, 2
 b8c:	16 c0       	rjmp	.+44     	; 0xbba <vfprintf+0x386>
 b8e:	a1 fc       	sbrc	r10, 1
 b90:	03 c0       	rjmp	.+6      	; 0xb98 <vfprintf+0x364>
 b92:	88 e7       	ldi	r24, 0x78	; 120
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	02 c0       	rjmp	.+4      	; 0xb9c <vfprintf+0x368>
 b98:	88 e5       	ldi	r24, 0x58	; 88
 b9a:	90 e0       	ldi	r25, 0x00	; 0
 b9c:	b6 01       	movw	r22, r12
 b9e:	0c c0       	rjmp	.+24     	; 0xbb8 <vfprintf+0x384>
 ba0:	8a 2d       	mov	r24, r10
 ba2:	86 78       	andi	r24, 0x86	; 134
 ba4:	51 f0       	breq	.+20     	; 0xbba <vfprintf+0x386>
 ba6:	a1 fe       	sbrs	r10, 1
 ba8:	02 c0       	rjmp	.+4      	; 0xbae <vfprintf+0x37a>
 baa:	8b e2       	ldi	r24, 0x2B	; 43
 bac:	01 c0       	rjmp	.+2      	; 0xbb0 <vfprintf+0x37c>
 bae:	80 e2       	ldi	r24, 0x20	; 32
 bb0:	a7 fc       	sbrc	r10, 7
 bb2:	8d e2       	ldi	r24, 0x2D	; 45
 bb4:	b6 01       	movw	r22, r12
 bb6:	90 e0       	ldi	r25, 0x00	; 0
 bb8:	50 d0       	rcall	.+160    	; 0xc5a <fputc>
 bba:	89 14       	cp	r8, r9
 bbc:	30 f4       	brcc	.+12     	; 0xbca <vfprintf+0x396>
 bbe:	b6 01       	movw	r22, r12
 bc0:	80 e3       	ldi	r24, 0x30	; 48
 bc2:	90 e0       	ldi	r25, 0x00	; 0
 bc4:	4a d0       	rcall	.+148    	; 0xc5a <fputc>
 bc6:	9a 94       	dec	r9
 bc8:	f8 cf       	rjmp	.-16     	; 0xbba <vfprintf+0x386>
 bca:	8a 94       	dec	r8
 bcc:	f3 01       	movw	r30, r6
 bce:	e8 0d       	add	r30, r8
 bd0:	f1 1d       	adc	r31, r1
 bd2:	80 81       	ld	r24, Z
 bd4:	b6 01       	movw	r22, r12
 bd6:	90 e0       	ldi	r25, 0x00	; 0
 bd8:	40 d0       	rcall	.+128    	; 0xc5a <fputc>
 bda:	81 10       	cpse	r8, r1
 bdc:	f6 cf       	rjmp	.-20     	; 0xbca <vfprintf+0x396>
 bde:	22 20       	and	r2, r2
 be0:	09 f4       	brne	.+2      	; 0xbe4 <vfprintf+0x3b0>
 be2:	4e ce       	rjmp	.-868    	; 0x880 <vfprintf+0x4c>
 be4:	b6 01       	movw	r22, r12
 be6:	80 e2       	ldi	r24, 0x20	; 32
 be8:	90 e0       	ldi	r25, 0x00	; 0
 bea:	37 d0       	rcall	.+110    	; 0xc5a <fputc>
 bec:	2a 94       	dec	r2
 bee:	f7 cf       	rjmp	.-18     	; 0xbde <vfprintf+0x3aa>
 bf0:	f6 01       	movw	r30, r12
 bf2:	86 81       	ldd	r24, Z+6	; 0x06
 bf4:	97 81       	ldd	r25, Z+7	; 0x07
 bf6:	02 c0       	rjmp	.+4      	; 0xbfc <vfprintf+0x3c8>
 bf8:	8f ef       	ldi	r24, 0xFF	; 255
 bfa:	9f ef       	ldi	r25, 0xFF	; 255
 bfc:	2b 96       	adiw	r28, 0x0b	; 11
 bfe:	0f b6       	in	r0, 0x3f	; 63
 c00:	f8 94       	cli
 c02:	de bf       	out	0x3e, r29	; 62
 c04:	0f be       	out	0x3f, r0	; 63
 c06:	cd bf       	out	0x3d, r28	; 61
 c08:	df 91       	pop	r29
 c0a:	cf 91       	pop	r28
 c0c:	1f 91       	pop	r17
 c0e:	0f 91       	pop	r16
 c10:	ff 90       	pop	r15
 c12:	ef 90       	pop	r14
 c14:	df 90       	pop	r13
 c16:	cf 90       	pop	r12
 c18:	bf 90       	pop	r11
 c1a:	af 90       	pop	r10
 c1c:	9f 90       	pop	r9
 c1e:	8f 90       	pop	r8
 c20:	7f 90       	pop	r7
 c22:	6f 90       	pop	r6
 c24:	5f 90       	pop	r5
 c26:	4f 90       	pop	r4
 c28:	3f 90       	pop	r3
 c2a:	2f 90       	pop	r2
 c2c:	08 95       	ret

00000c2e <strnlen_P>:
 c2e:	fc 01       	movw	r30, r24
 c30:	05 90       	lpm	r0, Z+
 c32:	61 50       	subi	r22, 0x01	; 1
 c34:	70 40       	sbci	r23, 0x00	; 0
 c36:	01 10       	cpse	r0, r1
 c38:	d8 f7       	brcc	.-10     	; 0xc30 <strnlen_P+0x2>
 c3a:	80 95       	com	r24
 c3c:	90 95       	com	r25
 c3e:	8e 0f       	add	r24, r30
 c40:	9f 1f       	adc	r25, r31
 c42:	08 95       	ret

00000c44 <strnlen>:
 c44:	fc 01       	movw	r30, r24
 c46:	61 50       	subi	r22, 0x01	; 1
 c48:	70 40       	sbci	r23, 0x00	; 0
 c4a:	01 90       	ld	r0, Z+
 c4c:	01 10       	cpse	r0, r1
 c4e:	d8 f7       	brcc	.-10     	; 0xc46 <strnlen+0x2>
 c50:	80 95       	com	r24
 c52:	90 95       	com	r25
 c54:	8e 0f       	add	r24, r30
 c56:	9f 1f       	adc	r25, r31
 c58:	08 95       	ret

00000c5a <fputc>:
 c5a:	0f 93       	push	r16
 c5c:	1f 93       	push	r17
 c5e:	cf 93       	push	r28
 c60:	df 93       	push	r29
 c62:	fb 01       	movw	r30, r22
 c64:	23 81       	ldd	r18, Z+3	; 0x03
 c66:	21 fd       	sbrc	r18, 1
 c68:	03 c0       	rjmp	.+6      	; 0xc70 <fputc+0x16>
 c6a:	8f ef       	ldi	r24, 0xFF	; 255
 c6c:	9f ef       	ldi	r25, 0xFF	; 255
 c6e:	2c c0       	rjmp	.+88     	; 0xcc8 <fputc+0x6e>
 c70:	22 ff       	sbrs	r18, 2
 c72:	16 c0       	rjmp	.+44     	; 0xca0 <fputc+0x46>
 c74:	46 81       	ldd	r20, Z+6	; 0x06
 c76:	57 81       	ldd	r21, Z+7	; 0x07
 c78:	24 81       	ldd	r18, Z+4	; 0x04
 c7a:	35 81       	ldd	r19, Z+5	; 0x05
 c7c:	42 17       	cp	r20, r18
 c7e:	53 07       	cpc	r21, r19
 c80:	44 f4       	brge	.+16     	; 0xc92 <fputc+0x38>
 c82:	a0 81       	ld	r26, Z
 c84:	b1 81       	ldd	r27, Z+1	; 0x01
 c86:	9d 01       	movw	r18, r26
 c88:	2f 5f       	subi	r18, 0xFF	; 255
 c8a:	3f 4f       	sbci	r19, 0xFF	; 255
 c8c:	31 83       	std	Z+1, r19	; 0x01
 c8e:	20 83       	st	Z, r18
 c90:	8c 93       	st	X, r24
 c92:	26 81       	ldd	r18, Z+6	; 0x06
 c94:	37 81       	ldd	r19, Z+7	; 0x07
 c96:	2f 5f       	subi	r18, 0xFF	; 255
 c98:	3f 4f       	sbci	r19, 0xFF	; 255
 c9a:	37 83       	std	Z+7, r19	; 0x07
 c9c:	26 83       	std	Z+6, r18	; 0x06
 c9e:	14 c0       	rjmp	.+40     	; 0xcc8 <fputc+0x6e>
 ca0:	8b 01       	movw	r16, r22
 ca2:	ec 01       	movw	r28, r24
 ca4:	fb 01       	movw	r30, r22
 ca6:	00 84       	ldd	r0, Z+8	; 0x08
 ca8:	f1 85       	ldd	r31, Z+9	; 0x09
 caa:	e0 2d       	mov	r30, r0
 cac:	09 95       	icall
 cae:	89 2b       	or	r24, r25
 cb0:	e1 f6       	brne	.-72     	; 0xc6a <fputc+0x10>
 cb2:	d8 01       	movw	r26, r16
 cb4:	16 96       	adiw	r26, 0x06	; 6
 cb6:	8d 91       	ld	r24, X+
 cb8:	9c 91       	ld	r25, X
 cba:	17 97       	sbiw	r26, 0x07	; 7
 cbc:	01 96       	adiw	r24, 0x01	; 1
 cbe:	17 96       	adiw	r26, 0x07	; 7
 cc0:	9c 93       	st	X, r25
 cc2:	8e 93       	st	-X, r24
 cc4:	16 97       	sbiw	r26, 0x06	; 6
 cc6:	ce 01       	movw	r24, r28
 cc8:	df 91       	pop	r29
 cca:	cf 91       	pop	r28
 ccc:	1f 91       	pop	r17
 cce:	0f 91       	pop	r16
 cd0:	08 95       	ret

00000cd2 <__ultoa_invert>:
 cd2:	fa 01       	movw	r30, r20
 cd4:	aa 27       	eor	r26, r26
 cd6:	28 30       	cpi	r18, 0x08	; 8
 cd8:	51 f1       	breq	.+84     	; 0xd2e <__ultoa_invert+0x5c>
 cda:	20 31       	cpi	r18, 0x10	; 16
 cdc:	81 f1       	breq	.+96     	; 0xd3e <__ultoa_invert+0x6c>
 cde:	e8 94       	clt
 ce0:	6f 93       	push	r22
 ce2:	6e 7f       	andi	r22, 0xFE	; 254
 ce4:	6e 5f       	subi	r22, 0xFE	; 254
 ce6:	7f 4f       	sbci	r23, 0xFF	; 255
 ce8:	8f 4f       	sbci	r24, 0xFF	; 255
 cea:	9f 4f       	sbci	r25, 0xFF	; 255
 cec:	af 4f       	sbci	r26, 0xFF	; 255
 cee:	b1 e0       	ldi	r27, 0x01	; 1
 cf0:	3e d0       	rcall	.+124    	; 0xd6e <__ultoa_invert+0x9c>
 cf2:	b4 e0       	ldi	r27, 0x04	; 4
 cf4:	3c d0       	rcall	.+120    	; 0xd6e <__ultoa_invert+0x9c>
 cf6:	67 0f       	add	r22, r23
 cf8:	78 1f       	adc	r23, r24
 cfa:	89 1f       	adc	r24, r25
 cfc:	9a 1f       	adc	r25, r26
 cfe:	a1 1d       	adc	r26, r1
 d00:	68 0f       	add	r22, r24
 d02:	79 1f       	adc	r23, r25
 d04:	8a 1f       	adc	r24, r26
 d06:	91 1d       	adc	r25, r1
 d08:	a1 1d       	adc	r26, r1
 d0a:	6a 0f       	add	r22, r26
 d0c:	71 1d       	adc	r23, r1
 d0e:	81 1d       	adc	r24, r1
 d10:	91 1d       	adc	r25, r1
 d12:	a1 1d       	adc	r26, r1
 d14:	20 d0       	rcall	.+64     	; 0xd56 <__ultoa_invert+0x84>
 d16:	09 f4       	brne	.+2      	; 0xd1a <__ultoa_invert+0x48>
 d18:	68 94       	set
 d1a:	3f 91       	pop	r19
 d1c:	2a e0       	ldi	r18, 0x0A	; 10
 d1e:	26 9f       	mul	r18, r22
 d20:	11 24       	eor	r1, r1
 d22:	30 19       	sub	r19, r0
 d24:	30 5d       	subi	r19, 0xD0	; 208
 d26:	31 93       	st	Z+, r19
 d28:	de f6       	brtc	.-74     	; 0xce0 <__ultoa_invert+0xe>
 d2a:	cf 01       	movw	r24, r30
 d2c:	08 95       	ret
 d2e:	46 2f       	mov	r20, r22
 d30:	47 70       	andi	r20, 0x07	; 7
 d32:	40 5d       	subi	r20, 0xD0	; 208
 d34:	41 93       	st	Z+, r20
 d36:	b3 e0       	ldi	r27, 0x03	; 3
 d38:	0f d0       	rcall	.+30     	; 0xd58 <__ultoa_invert+0x86>
 d3a:	c9 f7       	brne	.-14     	; 0xd2e <__ultoa_invert+0x5c>
 d3c:	f6 cf       	rjmp	.-20     	; 0xd2a <__ultoa_invert+0x58>
 d3e:	46 2f       	mov	r20, r22
 d40:	4f 70       	andi	r20, 0x0F	; 15
 d42:	40 5d       	subi	r20, 0xD0	; 208
 d44:	4a 33       	cpi	r20, 0x3A	; 58
 d46:	18 f0       	brcs	.+6      	; 0xd4e <__ultoa_invert+0x7c>
 d48:	49 5d       	subi	r20, 0xD9	; 217
 d4a:	31 fd       	sbrc	r19, 1
 d4c:	40 52       	subi	r20, 0x20	; 32
 d4e:	41 93       	st	Z+, r20
 d50:	02 d0       	rcall	.+4      	; 0xd56 <__ultoa_invert+0x84>
 d52:	a9 f7       	brne	.-22     	; 0xd3e <__ultoa_invert+0x6c>
 d54:	ea cf       	rjmp	.-44     	; 0xd2a <__ultoa_invert+0x58>
 d56:	b4 e0       	ldi	r27, 0x04	; 4
 d58:	a6 95       	lsr	r26
 d5a:	97 95       	ror	r25
 d5c:	87 95       	ror	r24
 d5e:	77 95       	ror	r23
 d60:	67 95       	ror	r22
 d62:	ba 95       	dec	r27
 d64:	c9 f7       	brne	.-14     	; 0xd58 <__ultoa_invert+0x86>
 d66:	00 97       	sbiw	r24, 0x00	; 0
 d68:	61 05       	cpc	r22, r1
 d6a:	71 05       	cpc	r23, r1
 d6c:	08 95       	ret
 d6e:	9b 01       	movw	r18, r22
 d70:	ac 01       	movw	r20, r24
 d72:	0a 2e       	mov	r0, r26
 d74:	06 94       	lsr	r0
 d76:	57 95       	ror	r21
 d78:	47 95       	ror	r20
 d7a:	37 95       	ror	r19
 d7c:	27 95       	ror	r18
 d7e:	ba 95       	dec	r27
 d80:	c9 f7       	brne	.-14     	; 0xd74 <__ultoa_invert+0xa2>
 d82:	62 0f       	add	r22, r18
 d84:	73 1f       	adc	r23, r19
 d86:	84 1f       	adc	r24, r20
 d88:	95 1f       	adc	r25, r21
 d8a:	a0 1d       	adc	r26, r0
 d8c:	08 95       	ret

00000d8e <_exit>:
 d8e:	f8 94       	cli

00000d90 <__stop_program>:
 d90:	ff cf       	rjmp	.-2      	; 0xd90 <__stop_program>
