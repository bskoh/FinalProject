
Stage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00000fda  0000106e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000090  00800160  00800160  000010ce  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000112c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011ad  00000000  00000000  0000123c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa0  00000000  00000000  000023e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009af  00000000  00000000  00002e89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  00003838  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000648  00000000  00000000  00003adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a1  00000000  00000000  00004124  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000047c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	aa c0       	rjmp	.+340    	; 0x156 <__ctors_end>
   2:	00 00       	nop
   4:	c5 c0       	rjmp	.+394    	; 0x190 <__bad_interrupt>
   6:	00 00       	nop
   8:	c3 c0       	rjmp	.+390    	; 0x190 <__bad_interrupt>
   a:	00 00       	nop
   c:	c1 c0       	rjmp	.+386    	; 0x190 <__bad_interrupt>
   e:	00 00       	nop
  10:	bf c0       	rjmp	.+382    	; 0x190 <__bad_interrupt>
  12:	00 00       	nop
  14:	bd c0       	rjmp	.+378    	; 0x190 <__bad_interrupt>
  16:	00 00       	nop
  18:	bb c0       	rjmp	.+374    	; 0x190 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b9 c0       	rjmp	.+370    	; 0x190 <__bad_interrupt>
  1e:	00 00       	nop
  20:	b7 c0       	rjmp	.+366    	; 0x190 <__bad_interrupt>
  22:	00 00       	nop
  24:	b5 c0       	rjmp	.+362    	; 0x190 <__bad_interrupt>
  26:	00 00       	nop
  28:	b3 c0       	rjmp	.+358    	; 0x190 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	b1 c0       	rjmp	.+354    	; 0x190 <__bad_interrupt>
  2e:	00 00       	nop
  30:	af c0       	rjmp	.+350    	; 0x190 <__bad_interrupt>
  32:	00 00       	nop
  34:	ad c0       	rjmp	.+346    	; 0x190 <__bad_interrupt>
  36:	00 00       	nop
  38:	ab c0       	rjmp	.+342    	; 0x190 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a9 c0       	rjmp	.+338    	; 0x190 <__bad_interrupt>
  3e:	00 00       	nop
  40:	ed c0       	rjmp	.+474    	; 0x21c <__vector_16>
  42:	00 00       	nop
  44:	a5 c0       	rjmp	.+330    	; 0x190 <__bad_interrupt>
  46:	00 00       	nop
  48:	c2 c0       	rjmp	.+388    	; 0x1ce <__vector_18>
  4a:	00 00       	nop
  4c:	a1 c0       	rjmp	.+322    	; 0x190 <__bad_interrupt>
  4e:	00 00       	nop
  50:	9f c0       	rjmp	.+318    	; 0x190 <__bad_interrupt>
  52:	00 00       	nop
  54:	9d c0       	rjmp	.+314    	; 0x190 <__bad_interrupt>
  56:	00 00       	nop
  58:	9b c0       	rjmp	.+310    	; 0x190 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	99 c0       	rjmp	.+306    	; 0x190 <__bad_interrupt>
  5e:	00 00       	nop
  60:	97 c0       	rjmp	.+302    	; 0x190 <__bad_interrupt>
  62:	00 00       	nop
  64:	95 c0       	rjmp	.+298    	; 0x190 <__bad_interrupt>
  66:	00 00       	nop
  68:	93 c0       	rjmp	.+294    	; 0x190 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	91 c0       	rjmp	.+290    	; 0x190 <__bad_interrupt>
  6e:	00 00       	nop
  70:	8f c0       	rjmp	.+286    	; 0x190 <__bad_interrupt>
  72:	00 00       	nop
  74:	8d c0       	rjmp	.+282    	; 0x190 <__bad_interrupt>
  76:	00 00       	nop
  78:	8b c0       	rjmp	.+278    	; 0x190 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	89 c0       	rjmp	.+274    	; 0x190 <__bad_interrupt>
  7e:	00 00       	nop
  80:	87 c0       	rjmp	.+270    	; 0x190 <__bad_interrupt>
  82:	00 00       	nop
  84:	85 c0       	rjmp	.+266    	; 0x190 <__bad_interrupt>
  86:	00 00       	nop
  88:	83 c0       	rjmp	.+262    	; 0x190 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	8e 03       	fmulsu	r16, r22
  8e:	9a 03       	fmulsu	r17, r18
  90:	a3 03       	fmuls	r18, r19
  92:	b4 03       	fmuls	r19, r20
  94:	d1 03       	fmuls	r21, r17
  96:	e0 03       	fmuls	r22, r16
  98:	f9 03       	fmulsu	r23, r17
  9a:	22 04       	cpc	r2, r2
  9c:	91 02       	muls	r25, r17
  9e:	91 02       	muls	r25, r17
  a0:	2e 04       	cpc	r2, r14
  a2:	47 04       	cpc	r4, r7
  a4:	91 02       	muls	r25, r17
  a6:	91 02       	muls	r25, r17
  a8:	91 02       	muls	r25, r17
  aa:	91 02       	muls	r25, r17
  ac:	91 02       	muls	r25, r17
  ae:	91 02       	muls	r25, r17
  b0:	91 02       	muls	r25, r17
  b2:	91 02       	muls	r25, r17
  b4:	91 02       	muls	r25, r17
  b6:	91 02       	muls	r25, r17
  b8:	91 02       	muls	r25, r17
  ba:	91 02       	muls	r25, r17
  bc:	91 02       	muls	r25, r17
  be:	91 02       	muls	r25, r17
  c0:	91 02       	muls	r25, r17
  c2:	91 02       	muls	r25, r17
  c4:	91 02       	muls	r25, r17
  c6:	91 02       	muls	r25, r17
  c8:	91 02       	muls	r25, r17
  ca:	91 02       	muls	r25, r17
  cc:	91 02       	muls	r25, r17
  ce:	91 02       	muls	r25, r17
  d0:	91 02       	muls	r25, r17
  d2:	91 02       	muls	r25, r17
  d4:	91 02       	muls	r25, r17
  d6:	91 02       	muls	r25, r17
  d8:	91 02       	muls	r25, r17
  da:	91 02       	muls	r25, r17
  dc:	91 02       	muls	r25, r17
  de:	91 02       	muls	r25, r17
  e0:	91 02       	muls	r25, r17
  e2:	91 02       	muls	r25, r17
  e4:	91 02       	muls	r25, r17
  e6:	91 02       	muls	r25, r17
  e8:	91 02       	muls	r25, r17
  ea:	91 02       	muls	r25, r17
  ec:	91 02       	muls	r25, r17
  ee:	91 02       	muls	r25, r17
  f0:	91 02       	muls	r25, r17
  f2:	91 02       	muls	r25, r17
  f4:	91 02       	muls	r25, r17
  f6:	91 02       	muls	r25, r17
  f8:	91 02       	muls	r25, r17
  fa:	91 02       	muls	r25, r17
  fc:	91 02       	muls	r25, r17
  fe:	91 02       	muls	r25, r17
 100:	91 02       	muls	r25, r17
 102:	91 02       	muls	r25, r17
 104:	91 02       	muls	r25, r17
 106:	91 02       	muls	r25, r17
 108:	91 02       	muls	r25, r17
 10a:	91 02       	muls	r25, r17
 10c:	91 02       	muls	r25, r17
 10e:	91 02       	muls	r25, r17
 110:	91 02       	muls	r25, r17
 112:	91 02       	muls	r25, r17
 114:	91 02       	muls	r25, r17
 116:	91 02       	muls	r25, r17
 118:	91 02       	muls	r25, r17
 11a:	91 02       	muls	r25, r17
 11c:	91 02       	muls	r25, r17
 11e:	91 02       	muls	r25, r17
 120:	91 02       	muls	r25, r17
 122:	91 02       	muls	r25, r17
 124:	91 02       	muls	r25, r17
 126:	91 02       	muls	r25, r17
 128:	91 02       	muls	r25, r17
 12a:	91 02       	muls	r25, r17
 12c:	91 02       	muls	r25, r17
 12e:	91 02       	muls	r25, r17
 130:	91 02       	muls	r25, r17
 132:	91 02       	muls	r25, r17
 134:	91 02       	muls	r25, r17
 136:	91 02       	muls	r25, r17
 138:	91 02       	muls	r25, r17
 13a:	91 02       	muls	r25, r17
 13c:	91 02       	muls	r25, r17
 13e:	91 02       	muls	r25, r17
 140:	91 02       	muls	r25, r17
 142:	91 02       	muls	r25, r17
 144:	91 02       	muls	r25, r17
 146:	91 02       	muls	r25, r17
 148:	91 02       	muls	r25, r17
 14a:	91 02       	muls	r25, r17
 14c:	91 02       	muls	r25, r17
 14e:	91 02       	muls	r25, r17
 150:	91 02       	muls	r25, r17
 152:	91 02       	muls	r25, r17
 154:	6e 04       	cpc	r6, r14

00000156 <__ctors_end>:
 156:	11 24       	eor	r1, r1
 158:	1f be       	out	0x3f, r1	; 63
 15a:	cf ef       	ldi	r28, 0xFF	; 255
 15c:	d0 e1       	ldi	r29, 0x10	; 16
 15e:	de bf       	out	0x3e, r29	; 62
 160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
 162:	11 e0       	ldi	r17, 0x01	; 1
 164:	a0 e0       	ldi	r26, 0x00	; 0
 166:	b1 e0       	ldi	r27, 0x01	; 1
 168:	ea ed       	ldi	r30, 0xDA	; 218
 16a:	ff e0       	ldi	r31, 0x0F	; 15
 16c:	00 e0       	ldi	r16, 0x00	; 0
 16e:	0b bf       	out	0x3b, r16	; 59
 170:	02 c0       	rjmp	.+4      	; 0x176 <__do_copy_data+0x14>
 172:	07 90       	elpm	r0, Z+
 174:	0d 92       	st	X+, r0
 176:	a0 36       	cpi	r26, 0x60	; 96
 178:	b1 07       	cpc	r27, r17
 17a:	d9 f7       	brne	.-10     	; 0x172 <__do_copy_data+0x10>

0000017c <__do_clear_bss>:
 17c:	21 e0       	ldi	r18, 0x01	; 1
 17e:	a0 e6       	ldi	r26, 0x60	; 96
 180:	b1 e0       	ldi	r27, 0x01	; 1
 182:	01 c0       	rjmp	.+2      	; 0x186 <.do_clear_bss_start>

00000184 <.do_clear_bss_loop>:
 184:	1d 92       	st	X+, r1

00000186 <.do_clear_bss_start>:
 186:	a0 3f       	cpi	r26, 0xF0	; 240
 188:	b2 07       	cpc	r27, r18
 18a:	e1 f7       	brne	.-8      	; 0x184 <.do_clear_bss_loop>
 18c:	9b d1       	rcall	.+822    	; 0x4c4 <main>
 18e:	23 c7       	rjmp	.+3654   	; 0xfd6 <_exit>

00000190 <__bad_interrupt>:
 190:	37 cf       	rjmp	.-402    	; 0x0 <__vectors>

00000192 <init_timer>:
	}
	else
	{
		return 1;
	}
}
 192:	83 b7       	in	r24, 0x33	; 51
 194:	87 60       	ori	r24, 0x07	; 7
 196:	83 bf       	out	0x33, r24	; 51
 198:	87 b7       	in	r24, 0x37	; 55
 19a:	81 60       	ori	r24, 0x01	; 1
 19c:	87 bf       	out	0x37, r24	; 55
 19e:	08 95       	ret

000001a0 <init_pwm>:
 1a0:	8f b5       	in	r24, 0x2f	; 47
 1a2:	82 60       	ori	r24, 0x02	; 2
 1a4:	8f bd       	out	0x2f, r24	; 47
 1a6:	8e b5       	in	r24, 0x2e	; 46
 1a8:	88 61       	ori	r24, 0x18	; 24
 1aa:	8e bd       	out	0x2e, r24	; 46
 1ac:	8f b5       	in	r24, 0x2f	; 47
 1ae:	88 60       	ori	r24, 0x08	; 8
 1b0:	8f bd       	out	0x2f, r24	; 47
 1b2:	8e b5       	in	r24, 0x2e	; 46
 1b4:	82 60       	ori	r24, 0x02	; 2
 1b6:	8e bd       	out	0x2e, r24	; 46
 1b8:	8f e3       	ldi	r24, 0x3F	; 63
 1ba:	9c e9       	ldi	r25, 0x9C	; 156
 1bc:	97 bd       	out	0x27, r25	; 39
 1be:	86 bd       	out	0x26, r24	; 38
 1c0:	88 e8       	ldi	r24, 0x88	; 136
 1c2:	93 e1       	ldi	r25, 0x13	; 19
 1c4:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1c8:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1cc:	08 95       	ret

000001ce <__vector_18>:
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	0b b6       	in	r0, 0x3b	; 59
 1da:	0f 92       	push	r0
 1dc:	2f 93       	push	r18
 1de:	3f 93       	push	r19
 1e0:	4f 93       	push	r20
 1e2:	5f 93       	push	r21
 1e4:	6f 93       	push	r22
 1e6:	7f 93       	push	r23
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 1ec:	af 93       	push	r26
 1ee:	bf 93       	push	r27
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
 1f4:	ac d3       	rcall	.+1880   	; 0x94e <UART0_ISR_Receive>
 1f6:	ff 91       	pop	r31
 1f8:	ef 91       	pop	r30
 1fa:	bf 91       	pop	r27
 1fc:	af 91       	pop	r26
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	7f 91       	pop	r23
 204:	6f 91       	pop	r22
 206:	5f 91       	pop	r21
 208:	4f 91       	pop	r20
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0b be       	out	0x3b, r0	; 59
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <__vector_16>:
 21c:	1f 92       	push	r1
 21e:	0f 92       	push	r0
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	0f 92       	push	r0
 224:	11 24       	eor	r1, r1
 226:	8f 93       	push	r24
 228:	9f 93       	push	r25
 22a:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <delay>
 22e:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <delay+0x1>
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <delay+0x1>
 238:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <delay>
 23c:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <tmr>
 240:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <tmr+0x1>
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <tmr+0x1>
 24a:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <tmr>
 24e:	9f 91       	pop	r25
 250:	8f 91       	pop	r24
 252:	0f 90       	pop	r0
 254:	0f be       	out	0x3f, r0	; 63
 256:	0f 90       	pop	r0
 258:	1f 90       	pop	r1
 25a:	18 95       	reti

0000025c <Update_Value>:
 25c:	e6 e1       	ldi	r30, 0x16	; 22
 25e:	f1 e0       	ldi	r31, 0x01	; 1
 260:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <Seqeunce>
 264:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <Seqeunce+0x1>
 268:	91 83       	std	Z+1, r25	; 0x01
 26a:	80 83       	st	Z, r24
 26c:	90 b1       	in	r25, 0x00	; 0
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	98 27       	eor	r25, r24
 272:	91 70       	andi	r25, 0x01	; 1
 274:	92 83       	std	Z+2, r25	; 0x02
 276:	13 82       	std	Z+3, r1	; 0x03
 278:	90 b1       	in	r25, 0x00	; 0
 27a:	96 95       	lsr	r25
 27c:	98 27       	eor	r25, r24
 27e:	91 70       	andi	r25, 0x01	; 1
 280:	94 83       	std	Z+4, r25	; 0x04
 282:	15 82       	std	Z+5, r1	; 0x05
 284:	90 b1       	in	r25, 0x00	; 0
 286:	96 95       	lsr	r25
 288:	96 95       	lsr	r25
 28a:	98 27       	eor	r25, r24
 28c:	91 70       	andi	r25, 0x01	; 1
 28e:	96 83       	std	Z+6, r25	; 0x06
 290:	17 82       	std	Z+7, r1	; 0x07
 292:	90 b1       	in	r25, 0x00	; 0
 294:	96 95       	lsr	r25
 296:	96 95       	lsr	r25
 298:	96 95       	lsr	r25
 29a:	98 27       	eor	r25, r24
 29c:	91 70       	andi	r25, 0x01	; 1
 29e:	90 87       	std	Z+8, r25	; 0x08
 2a0:	11 86       	std	Z+9, r1	; 0x09
 2a2:	90 b1       	in	r25, 0x00	; 0
 2a4:	92 95       	swap	r25
 2a6:	9f 70       	andi	r25, 0x0F	; 15
 2a8:	89 27       	eor	r24, r25
 2aa:	81 70       	andi	r24, 0x01	; 1
 2ac:	82 87       	std	Z+10, r24	; 0x0a
 2ae:	13 86       	std	Z+11, r1	; 0x0b
 2b0:	88 b3       	in	r24, 0x18	; 24
 2b2:	98 b3       	in	r25, 0x18	; 24
 2b4:	92 70       	andi	r25, 0x02	; 2
 2b6:	81 70       	andi	r24, 0x01	; 1
 2b8:	89 2b       	or	r24, r25
 2ba:	21 e0       	ldi	r18, 0x01	; 1
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	81 30       	cpi	r24, 0x01	; 1
 2c0:	11 f0       	breq	.+4      	; 0x2c6 <Update_Value+0x6a>
 2c2:	20 e0       	ldi	r18, 0x00	; 0
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	30 93 23 01 	sts	0x0123, r19	; 0x800123 <value+0xd>
 2ca:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <value+0xc>
 2ce:	88 b3       	in	r24, 0x18	; 24
 2d0:	98 b3       	in	r25, 0x18	; 24
 2d2:	98 70       	andi	r25, 0x08	; 8
 2d4:	84 70       	andi	r24, 0x04	; 4
 2d6:	89 2b       	or	r24, r25
 2d8:	21 e0       	ldi	r18, 0x01	; 1
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	84 30       	cpi	r24, 0x04	; 4
 2de:	11 f0       	breq	.+4      	; 0x2e4 <Update_Value+0x88>
 2e0:	20 e0       	ldi	r18, 0x00	; 0
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	30 93 25 01 	sts	0x0125, r19	; 0x800125 <value+0xf>
 2e8:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <value+0xe>
 2ec:	e6 e1       	ldi	r30, 0x16	; 22
 2ee:	f1 e0       	ldi	r31, 0x01	; 1
 2f0:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <Drop_ready>
 2f4:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <Drop_ready+0x1>
 2f8:	91 8b       	std	Z+17, r25	; 0x11
 2fa:	80 8b       	std	Z+16, r24	; 0x10
 2fc:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <Pick_ready>
 300:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <Pick_ready+0x1>
 304:	93 8b       	std	Z+19, r25	; 0x13
 306:	82 8b       	std	Z+18, r24	; 0x12
 308:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <Motor_Stopper_open>
 30c:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <Motor_Stopper_open+0x1>
 310:	95 8b       	std	Z+21, r25	; 0x15
 312:	84 8b       	std	Z+20, r24	; 0x14
 314:	08 95       	ret

00000316 <Send_Value>:
 316:	6f 92       	push	r6
 318:	7f 92       	push	r7
 31a:	8f 92       	push	r8
 31c:	9f 92       	push	r9
 31e:	af 92       	push	r10
 320:	bf 92       	push	r11
 322:	cf 92       	push	r12
 324:	df 92       	push	r13
 326:	ef 92       	push	r14
 328:	ff 92       	push	r15
 32a:	0f 93       	push	r16
 32c:	1f 93       	push	r17
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	0f 2e       	mov	r0, r31
 334:	f6 e1       	ldi	r31, 0x16	; 22
 336:	ef 2e       	mov	r14, r31
 338:	f1 e0       	ldi	r31, 0x01	; 1
 33a:	ff 2e       	mov	r15, r31
 33c:	f0 2d       	mov	r31, r0
 33e:	01 e0       	ldi	r16, 0x01	; 1
 340:	10 e0       	ldi	r17, 0x00	; 0
 342:	c0 e0       	ldi	r28, 0x00	; 0
 344:	d0 e0       	ldi	r29, 0x00	; 0
 346:	0f 2e       	mov	r0, r31
 348:	f2 e3       	ldi	r31, 0x32	; 50
 34a:	8f 2e       	mov	r8, r31
 34c:	f1 e0       	ldi	r31, 0x01	; 1
 34e:	9f 2e       	mov	r9, r31
 350:	f0 2d       	mov	r31, r0
 352:	0f 2e       	mov	r0, r31
 354:	f2 e6       	ldi	r31, 0x62	; 98
 356:	cf 2e       	mov	r12, r31
 358:	f1 e0       	ldi	r31, 0x01	; 1
 35a:	df 2e       	mov	r13, r31
 35c:	f0 2d       	mov	r31, r0
 35e:	57 01       	movw	r10, r14
 360:	0f 2e       	mov	r0, r31
 362:	fc e2       	ldi	r31, 0x2C	; 44
 364:	6f 2e       	mov	r6, r31
 366:	f1 e0       	ldi	r31, 0x01	; 1
 368:	7f 2e       	mov	r7, r31
 36a:	f0 2d       	mov	r31, r0
 36c:	06 c0       	rjmp	.+12     	; 0x37a <Send_Value+0x64>
 36e:	21 96       	adiw	r28, 0x01	; 1
 370:	0f 5f       	subi	r16, 0xFF	; 255
 372:	1f 4f       	sbci	r17, 0xFF	; 255
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	e8 0e       	add	r14, r24
 378:	f1 1c       	adc	r15, r1
 37a:	20 97       	sbiw	r28, 0x00	; 0
 37c:	99 f4       	brne	.+38     	; 0x3a4 <Send_Value+0x8e>
 37e:	f5 01       	movw	r30, r10
 380:	81 81       	ldd	r24, Z+1	; 0x01
 382:	8f 93       	push	r24
 384:	80 81       	ld	r24, Z
 386:	8f 93       	push	r24
 388:	7f 92       	push	r7
 38a:	6f 92       	push	r6
 38c:	df 92       	push	r13
 38e:	cf 92       	push	r12
 390:	47 d3       	rcall	.+1678   	; 0xa20 <sprintf>
 392:	c6 01       	movw	r24, r12
 394:	c6 d2       	rcall	.+1420   	; 0x922 <UART0_printf_string>
 396:	0f 90       	pop	r0
 398:	0f 90       	pop	r0
 39a:	0f 90       	pop	r0
 39c:	0f 90       	pop	r0
 39e:	0f 90       	pop	r0
 3a0:	0f 90       	pop	r0
 3a2:	e5 cf       	rjmp	.-54     	; 0x36e <Send_Value+0x58>
 3a4:	9e 01       	movw	r18, r28
 3a6:	21 50       	subi	r18, 0x01	; 1
 3a8:	31 09       	sbc	r19, r1
 3aa:	29 30       	cpi	r18, 0x09	; 9
 3ac:	31 05       	cpc	r19, r1
 3ae:	98 f4       	brcc	.+38     	; 0x3d6 <Send_Value+0xc0>
 3b0:	f7 01       	movw	r30, r14
 3b2:	81 81       	ldd	r24, Z+1	; 0x01
 3b4:	8f 93       	push	r24
 3b6:	80 81       	ld	r24, Z
 3b8:	8f 93       	push	r24
 3ba:	9f 92       	push	r9
 3bc:	8f 92       	push	r8
 3be:	df 92       	push	r13
 3c0:	cf 92       	push	r12
 3c2:	2e d3       	rcall	.+1628   	; 0xa20 <sprintf>
 3c4:	c6 01       	movw	r24, r12
 3c6:	ad d2       	rcall	.+1370   	; 0x922 <UART0_printf_string>
 3c8:	0f 90       	pop	r0
 3ca:	0f 90       	pop	r0
 3cc:	0f 90       	pop	r0
 3ce:	0f 90       	pop	r0
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	1c c0       	rjmp	.+56     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3d6:	ca 30       	cpi	r28, 0x0A	; 10
 3d8:	d1 05       	cpc	r29, r1
 3da:	c9 f4       	brne	.+50     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3dc:	e6 e1       	ldi	r30, 0x16	; 22
 3de:	f1 e0       	ldi	r31, 0x01	; 1
 3e0:	85 89       	ldd	r24, Z+21	; 0x15
 3e2:	8f 93       	push	r24
 3e4:	84 89       	ldd	r24, Z+20	; 0x14
 3e6:	8f 93       	push	r24
 3e8:	86 e3       	ldi	r24, 0x36	; 54
 3ea:	91 e0       	ldi	r25, 0x01	; 1
 3ec:	9f 93       	push	r25
 3ee:	8f 93       	push	r24
 3f0:	82 e6       	ldi	r24, 0x62	; 98
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	9f 93       	push	r25
 3f6:	8f 93       	push	r24
 3f8:	13 d3       	rcall	.+1574   	; 0xa20 <sprintf>
 3fa:	82 e6       	ldi	r24, 0x62	; 98
 3fc:	91 e0       	ldi	r25, 0x01	; 1
 3fe:	91 d2       	rcall	.+1314   	; 0x922 <UART0_printf_string>
 400:	0f 90       	pop	r0
 402:	0f 90       	pop	r0
 404:	0f 90       	pop	r0
 406:	0f 90       	pop	r0
 408:	0f 90       	pop	r0
 40a:	0f 90       	pop	r0
 40c:	04 c0       	rjmp	.+8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 40e:	0b 30       	cpi	r16, 0x0B	; 11
 410:	11 05       	cpc	r17, r1
 412:	0c f4       	brge	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 414:	ac cf       	rjmp	.-168    	; 0x36e <Send_Value+0x58>
 416:	89 e3       	ldi	r24, 0x39	; 57
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	83 d2       	rcall	.+1286   	; 0x922 <UART0_printf_string>
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	1f 91       	pop	r17
 422:	0f 91       	pop	r16
 424:	ff 90       	pop	r15
 426:	ef 90       	pop	r14
 428:	df 90       	pop	r13
 42a:	cf 90       	pop	r12
 42c:	bf 90       	pop	r11
 42e:	af 90       	pop	r10
 430:	9f 90       	pop	r9
 432:	8f 90       	pop	r8
 434:	7f 90       	pop	r7
 436:	6f 90       	pop	r6
 438:	08 95       	ret

0000043a <Send_Event_Value>:
 43a:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <cnt_event+0x1>
 43e:	8f 93       	push	r24
 440:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <cnt_event>
 444:	8f 93       	push	r24
 446:	8b e3       	ldi	r24, 0x3B	; 59
 448:	91 e0       	ldi	r25, 0x01	; 1
 44a:	9f 93       	push	r25
 44c:	8f 93       	push	r24
 44e:	82 e6       	ldi	r24, 0x62	; 98
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	9f 93       	push	r25
 454:	8f 93       	push	r24
 456:	e4 d2       	rcall	.+1480   	; 0xa20 <sprintf>
 458:	82 e6       	ldi	r24, 0x62	; 98
 45a:	91 e0       	ldi	r25, 0x01	; 1
 45c:	62 d2       	rcall	.+1220   	; 0x922 <UART0_printf_string>
 45e:	5b df       	rcall	.-330    	; 0x316 <Send_Value>
 460:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <cnt_event>
 464:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <cnt_event+0x1>
 468:	01 96       	adiw	r24, 0x01	; 1
 46a:	0f 90       	pop	r0
 46c:	0f 90       	pop	r0
 46e:	0f 90       	pop	r0
 470:	0f 90       	pop	r0
 472:	0f 90       	pop	r0
 474:	0f 90       	pop	r0
 476:	84 36       	cpi	r24, 0x64	; 100
 478:	91 05       	cpc	r25, r1
 47a:	2c f4       	brge	.+10     	; 0x486 <Send_Event_Value+0x4c>
 47c:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <cnt_event+0x1>
 480:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <cnt_event>
 484:	08 95       	ret
 486:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <cnt_event+0x1>
 48a:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <cnt_event>
 48e:	08 95       	ret

00000490 <Diff_Value>:
 490:	fc 01       	movw	r30, r24
 492:	70 96       	adiw	r30, 0x10	; 16
 494:	db 01       	movw	r26, r22
 496:	50 96       	adiw	r26, 0x10	; 16
 498:	46 96       	adiw	r24, 0x16	; 22
 49a:	20 e0       	ldi	r18, 0x00	; 0
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	61 91       	ld	r22, Z+
 4a0:	71 91       	ld	r23, Z+
 4a2:	4d 91       	ld	r20, X+
 4a4:	5d 91       	ld	r21, X+
 4a6:	64 17       	cp	r22, r20
 4a8:	75 07       	cpc	r23, r21
 4aa:	11 f0       	breq	.+4      	; 0x4b0 <Diff_Value+0x20>
 4ac:	2f 5f       	subi	r18, 0xFF	; 255
 4ae:	3f 4f       	sbci	r19, 0xFF	; 255
 4b0:	e8 17       	cp	r30, r24
 4b2:	f9 07       	cpc	r31, r25
 4b4:	a1 f7       	brne	.-24     	; 0x49e <Diff_Value+0xe>
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	23 2b       	or	r18, r19
 4bc:	11 f4       	brne	.+4      	; 0x4c2 <Diff_Value+0x32>
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	08 95       	ret

000004c4 <main>:

int main(void)
{		
	DDRB |= (1 << PORTB0) | (1 << PORTB1) | (1 << PORTB2) | (1 << PORTB3);
 4c4:	87 b3       	in	r24, 0x17	; 23
 4c6:	8f 60       	ori	r24, 0x0F	; 15
 4c8:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1 << PORTB5) | (1 << PORTB6) | (1 << PORTB7);
 4ca:	87 b3       	in	r24, 0x17	; 23
 4cc:	80 6e       	ori	r24, 0xE0	; 224
 4ce:	87 bb       	out	0x17, r24	; 23
	
	uint8_t *receiveData;
	
	init_uart0();
 4d0:	17 d2       	rcall	.+1070   	; 0x900 <init_uart0>
	init_timer();
 4d2:	5f de       	rcall	.-834    	; 0x192 <init_timer>
	init_pwm();
 4d4:	65 de       	rcall	.-822    	; 0x1a0 <init_pwm>
 4d6:	78 94       	sei
	
	sei();
 4d8:	68 94       	set
			{
				Flag_ProdDefect = NORMAL;
			}
			if(strncmp(cmd, "pdno", 4) == 0)
			{
				Flag_ProdDefect = DEFECT;
 4da:	cc 24       	eor	r12, r12
 4dc:	c1 f8       	bld	r12, 1
 4de:	d1 2c       	mov	r13, r1
 4e0:	ee 24       	eor	r14, r14
				PORTE = 0x00;
				asm("jmp 0");
			}
			if(strncmp(cmd, "pdok", 4) == 0)
			{
				Flag_ProdDefect = NORMAL;
 4e2:	e3 94       	inc	r14
 4e4:	f1 2c       	mov	r15, r1
 4e6:	0c e2       	ldi	r16, 0x2C	; 44
 4e8:	11 e0       	ldi	r17, 0x01	; 1
 4ea:	0f 2e       	mov	r0, r31
				{
					//buffer에 제품 없어짐, Drop Conv 정지, Stopper close
					if (delay >= Delay_Conv)
					{
						Motor_Port &= ~Motor_Conv_Drop1;
						Motor_Stopper = Pos_Stopper_Close;
 4ec:	f8 e7       	ldi	r31, 0x78	; 120
 4ee:	af 2e       	mov	r10, r31
 4f0:	b1 2c       	mov	r11, r1
 4f2:	f0 2d       	mov	r31, r0
 4f4:	0f 2e       	mov	r0, r31
 4f6:	f8 e8       	ldi	r31, 0x88	; 136
 4f8:	4f 2e       	mov	r4, r31
 4fa:	f3 e1       	ldi	r31, 0x13	; 19
 4fc:	5f 2e       	mov	r5, r31
 4fe:	f0 2d       	mov	r31, r0
 500:	0f 2e       	mov	r0, r31
					Seqeunce = 100;
				}
			break;
			
			case 10:	// 제품이 불량일 경우
				Motor_Stopper = Pos_Stopper_Throw;
 502:	f8 ed       	ldi	r31, 0xD8	; 216
 504:	8f 2e       	mov	r8, r31
 506:	fe e0       	ldi	r31, 0x0E	; 14
 508:	9f 2e       	mov	r9, r31
 50a:	f0 2d       	mov	r31, r0
 50c:	0f 2e       	mov	r0, r31
				}
			break;
			
			
			case 5:		//Stopper open
				Motor_Stopper = Pos_Stopper_Open;
 50e:	f8 eb       	ldi	r31, 0xB8	; 184
 510:	6f 2e       	mov	r6, r31
 512:	fb e0       	ldi	r31, 0x0B	; 11
 514:	7f 2e       	mov	r7, r31
 516:	f0 2d       	mov	r31, r0
 518:	0f 2e       	mov	r0, r31
						Seqeunce++;
					}
					else if(Flag_ProdDefect == DEFECT)
					{
						delay = 0;
						Seqeunce = 10;
 51a:	fa e0       	ldi	r31, 0x0A	; 10
 51c:	2f 2e       	mov	r2, r31
 51e:	31 2c       	mov	r3, r1
 520:	f0 2d       	mov	r31, r0
	
	while(1)
	{
		/////////////////////////////////////////////////////////////////////////////
		//MES에서 현재 AGV 위치 보내줌(Pick/Drop Stage일 경우)		
		if (isRxString())    // PC로 부터 수신된 Data가 존재 하는지 확인 있으면 아래를 수행 한다.
 522:	0d d2       	rcall	.+1050   	; 0x93e <isRxString>
 524:	88 23       	and	r24, r24
 526:	09 f4       	brne	.+2      	; 0x52a <main+0x66>
 528:	a8 c0       	rjmp	.+336    	; 0x67a <main+0x1b6>
		{
			receiveData = getRxString();
 52a:	0c d2       	rcall	.+1048   	; 0x944 <getRxString>
 52c:	64 e3       	ldi	r22, 0x34	; 52
			
			ptr_receiveData = strtok(receiveData, ",");
 52e:	71 e0       	ldi	r23, 0x01	; 1
 530:	3f d2       	rcall	.+1150   	; 0x9b0 <strtok>
 532:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <ptr_receiveData+0x1>
 536:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <ptr_receiveData>
 53a:	00 97       	sbiw	r24, 0x00	; 0
 53c:	41 f1       	breq	.+80     	; 0x58e <main+0xca>
			while(ptr_receiveData != NULL) {
 53e:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <ptr_cnt>
				if(ptr_cnt == 0) {
 542:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <ptr_cnt+0x1>
 546:	21 15       	cp	r18, r1
 548:	31 05       	cpc	r19, r1
 54a:	29 f4       	brne	.+10     	; 0x556 <main+0x92>
 54c:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <cnt+0x1>
					cnt = ptr_receiveData;
 550:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <cnt>
 554:	07 c0       	rjmp	.+14     	; 0x564 <main+0xa0>
 556:	21 30       	cpi	r18, 0x01	; 1
 558:	31 05       	cpc	r19, r1
				}
				else if(ptr_cnt == 1) {
 55a:	21 f4       	brne	.+8      	; 0x564 <main+0xa0>
 55c:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <cmd+0x1>
					cmd = ptr_receiveData;
 560:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <cmd>
 564:	64 e3       	ldi	r22, 0x34	; 52
				}
				ptr_receiveData = strtok(NULL, ",");
 566:	71 e0       	ldi	r23, 0x01	; 1
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	21 d2       	rcall	.+1090   	; 0x9b0 <strtok>
 56e:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <ptr_receiveData+0x1>
 572:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <ptr_receiveData>
 576:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <ptr_cnt>
				ptr_cnt++;
 57a:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <ptr_cnt+0x1>
 57e:	2f 5f       	subi	r18, 0xFF	; 255
 580:	3f 4f       	sbci	r19, 0xFF	; 255
 582:	30 93 99 01 	sts	0x0199, r19	; 0x800199 <ptr_cnt+0x1>
 586:	20 93 98 01 	sts	0x0198, r18	; 0x800198 <ptr_cnt>
 58a:	00 97       	sbiw	r24, 0x00	; 0
 58c:	c1 f6       	brne	.-80     	; 0x53e <main+0x7a>
		if (isRxString())    // PC로 부터 수신된 Data가 존재 하는지 확인 있으면 아래를 수행 한다.
		{
			receiveData = getRxString();
			
			ptr_receiveData = strtok(receiveData, ",");
			while(ptr_receiveData != NULL) {
 58e:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <ptr_cnt+0x1>
					cmd = ptr_receiveData;
				}
				ptr_receiveData = strtok(NULL, ",");
				ptr_cnt++;
			}
			ptr_cnt = 0;
 592:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <ptr_cnt>
 596:	44 e0       	ldi	r20, 0x04	; 4
 598:	50 e0       	ldi	r21, 0x00	; 0
			
			if(strncmp(cmd,"auto",4) == 0)
 59a:	62 e4       	ldi	r22, 0x42	; 66
 59c:	71 e0       	ldi	r23, 0x01	; 1
 59e:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <cmd>
 5a2:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <cmd+0x1>
 5a6:	07 d2       	rcall	.+1038   	; 0x9b6 <strncmp>
 5a8:	89 2b       	or	r24, r25
 5aa:	69 f4       	brne	.+26     	; 0x5c6 <main+0x102>
 5ac:	f0 92 a7 01 	sts	0x01A7, r15	; 0x8001a7 <Flag_AutoMode+0x1>
			{
				Flag_AutoMode = 1;
 5b0:	e0 92 a6 01 	sts	0x01A6, r14	; 0x8001a6 <Flag_AutoMode>
 5b4:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <cnt>
				UART0_printf_string(cnt);
 5b8:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <cnt+0x1>
 5bc:	b2 d1       	rcall	.+868    	; 0x922 <UART0_printf_string>
 5be:	84 e3       	ldi	r24, 0x34	; 52
				UART0_printf_string(",");
 5c0:	91 e0       	ldi	r25, 0x01	; 1
 5c2:	af d1       	rcall	.+862    	; 0x922 <UART0_printf_string>
 5c4:	a8 de       	rcall	.-688    	; 0x316 <Send_Value>
				Send_Value();
 5c6:	44 e0       	ldi	r20, 0x04	; 4
 5c8:	50 e0       	ldi	r21, 0x00	; 0
			}
			if(strncmp(cmd,"manu",4) == 0)
 5ca:	67 e4       	ldi	r22, 0x47	; 71
 5cc:	71 e0       	ldi	r23, 0x01	; 1
 5ce:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <cmd>
 5d2:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <cmd+0x1>
 5d6:	ef d1       	rcall	.+990    	; 0x9b6 <strncmp>
 5d8:	89 2b       	or	r24, r25
 5da:	69 f4       	brne	.+26     	; 0x5f6 <main+0x132>
 5dc:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <Flag_AutoMode+0x1>
			{
				Flag_AutoMode = 0;
 5e0:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <Flag_AutoMode>
 5e4:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <cnt>
				UART0_printf_string(cnt);
 5e8:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <cnt+0x1>
 5ec:	9a d1       	rcall	.+820    	; 0x922 <UART0_printf_string>
 5ee:	84 e3       	ldi	r24, 0x34	; 52
				UART0_printf_string(",");
 5f0:	91 e0       	ldi	r25, 0x01	; 1
 5f2:	97 d1       	rcall	.+814    	; 0x922 <UART0_printf_string>
 5f4:	90 de       	rcall	.-736    	; 0x316 <Send_Value>
 5f6:	44 e0       	ldi	r20, 0x04	; 4
				Send_Value();
 5f8:	50 e0       	ldi	r21, 0x00	; 0
 5fa:	6c e4       	ldi	r22, 0x4C	; 76
			}
			if(strncmp(cmd, "stat", 4) == 0)
 5fc:	71 e0       	ldi	r23, 0x01	; 1
 5fe:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <cmd>
 602:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <cmd+0x1>
 606:	d7 d1       	rcall	.+942    	; 0x9b6 <strncmp>
 608:	89 2b       	or	r24, r25
 60a:	49 f4       	brne	.+18     	; 0x61e <main+0x15a>
 60c:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <cnt>
			{
				UART0_printf_string(cnt);
 610:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <cnt+0x1>
 614:	86 d1       	rcall	.+780    	; 0x922 <UART0_printf_string>
 616:	84 e3       	ldi	r24, 0x34	; 52
				UART0_printf_string(",");
 618:	91 e0       	ldi	r25, 0x01	; 1
 61a:	83 d1       	rcall	.+774    	; 0x922 <UART0_printf_string>
 61c:	7c de       	rcall	.-776    	; 0x316 <Send_Value>
 61e:	44 e0       	ldi	r20, 0x04	; 4
				Send_Value();
 620:	50 e0       	ldi	r21, 0x00	; 0
 622:	61 e5       	ldi	r22, 0x51	; 81
			}
			if(strncmp(cmd, "rset", 4) == 0)		// AVR Reset
 624:	71 e0       	ldi	r23, 0x01	; 1
 626:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <cmd>
 62a:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <cmd+0x1>
 62e:	c3 d1       	rcall	.+902    	; 0x9b6 <strncmp>
 630:	89 2b       	or	r24, r25
 632:	39 f4       	brne	.+14     	; 0x642 <main+0x17e>
 634:	1b ba       	out	0x1b, r1	; 27
 636:	18 ba       	out	0x18, r1	; 24
 638:	15 ba       	out	0x15, r1	; 21
			{
				PORTA = 0x00;
 63a:	12 ba       	out	0x12, r1	; 18
				PORTB = 0x00;
 63c:	13 b8       	out	0x03, r1	; 3
				PORTC = 0x00;
 63e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
				PORTD = 0x00;
				PORTE = 0x00;
 642:	c0 91 ee 01 	lds	r28, 0x01EE	; 0x8001ee <cmd>
				asm("jmp 0");
 646:	d0 91 ef 01 	lds	r29, 0x01EF	; 0x8001ef <cmd+0x1>
			}
			if(strncmp(cmd, "pdok", 4) == 0)
 64a:	44 e0       	ldi	r20, 0x04	; 4
 64c:	50 e0       	ldi	r21, 0x00	; 0
 64e:	66 e5       	ldi	r22, 0x56	; 86
 650:	71 e0       	ldi	r23, 0x01	; 1
 652:	ce 01       	movw	r24, r28
 654:	b0 d1       	rcall	.+864    	; 0x9b6 <strncmp>
 656:	89 2b       	or	r24, r25
 658:	21 f4       	brne	.+8      	; 0x662 <main+0x19e>
 65a:	f0 92 a5 01 	sts	0x01A5, r15	; 0x8001a5 <Flag_ProdDefect+0x1>
			{
				Flag_ProdDefect = NORMAL;
 65e:	e0 92 a4 01 	sts	0x01A4, r14	; 0x8001a4 <Flag_ProdDefect>
 662:	44 e0       	ldi	r20, 0x04	; 4
			}
			if(strncmp(cmd, "pdno", 4) == 0)
 664:	50 e0       	ldi	r21, 0x00	; 0
 666:	6b e5       	ldi	r22, 0x5B	; 91
 668:	71 e0       	ldi	r23, 0x01	; 1
 66a:	ce 01       	movw	r24, r28
 66c:	a4 d1       	rcall	.+840    	; 0x9b6 <strncmp>
 66e:	89 2b       	or	r24, r25
 670:	21 f4       	brne	.+8      	; 0x67a <main+0x1b6>
 672:	d0 92 a5 01 	sts	0x01A5, r13	; 0x8001a5 <Flag_ProdDefect+0x1>
			{
				Flag_ProdDefect = DEFECT;
 676:	c0 92 a4 01 	sts	0x01A4, r12	; 0x8001a4 <Flag_ProdDefect>
 67a:	f0 dd       	rcall	.-1056   	; 0x25c <Update_Value>
			}
		}
		/////////////////////////////////////////////////////////////////////////////
		// MES에 보내는 데이터 값 상시 업데이트
		Update_Value();		
 67c:	60 e0       	ldi	r22, 0x00	; 0
 67e:	71 e0       	ldi	r23, 0x01	; 1
		
		/////////////////////////////////////////////////////////////////////////////
		// 데이터 값이 변할 시 Event 값으로 MES로 전송
		if(Diff_Value(value, comp_value) == 1)
 680:	86 e1       	ldi	r24, 0x16	; 22
 682:	91 e0       	ldi	r25, 0x01	; 1
 684:	05 df       	rcall	.-502    	; 0x490 <Diff_Value>
 686:	01 97       	sbiw	r24, 0x01	; 1
 688:	81 f4       	brne	.+32     	; 0x6aa <main+0x1e6>
 68a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
 68e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__DATA_REGION_ORIGIN__+0xd>
		{
			if(comp_value[6] != -1)		// 초기 부팅 시 제외
 692:	01 96       	adiw	r24, 0x01	; 1
 694:	09 f4       	brne	.+2      	; 0x698 <main+0x1d4>
 696:	2f c1       	rjmp	.+606    	; 0x8f6 <main+0x432>
 698:	d0 de       	rcall	.-608    	; 0x43a <Send_Event_Value>
 69a:	2d c1       	rjmp	.+602    	; 0x8f6 <main+0x432>
 69c:	81 91       	ld	r24, Z+
			{
				Send_Event_Value();
 69e:	91 91       	ld	r25, Z+
 6a0:	8d 93       	st	X+, r24
 6a2:	9d 93       	st	X+, r25
			}
			for(int i = 6; i < VALUE_SIZE; i++)
			{
				comp_value[i] = value[i];
 6a4:	e0 17       	cp	r30, r16
 6a6:	f1 07       	cpc	r31, r17
 6a8:	c9 f7       	brne	.-14     	; 0x69c <main+0x1d8>
 6aa:	04 9b       	sbis	0x00, 4	; 0
		{
			if(comp_value[6] != -1)		// 초기 부팅 시 제외
			{
				Send_Event_Value();
			}
			for(int i = 6; i < VALUE_SIZE; i++)
 6ac:	0d c0       	rjmp	.+26     	; 0x6c8 <main+0x204>
 6ae:	03 99       	sbic	0x00, 3	; 0
 6b0:	0b c0       	rjmp	.+22     	; 0x6c8 <main+0x204>
			}
		}
		
		/////////////////////////////////////////////////////////////////////////////
		// Pick, Drop ready 상태 초기화
		if ((Sensor_Port & Sensor_Pick_AGV) == Sensor_Pick_AGV &&							// Pick stage에 AGV가 없고
 6b2:	88 b3       	in	r24, 0x18	; 24
 6b4:	98 b3       	in	r25, 0x18	; 24
 6b6:	98 70       	andi	r25, 0x08	; 8
 6b8:	84 70       	andi	r24, 0x04	; 4
			(Sensor_Port & Sensor_Pick_stage) == 0 &&										// Pick stage에 물건이 있고
			(((Motor_Port & Motor_Conv_Pick1) | (Motor_Port & Motor_Conv_Pick2)) == 0))		// Pick Conv가 돌지 않으면
 6ba:	89 2b       	or	r24, r25
 6bc:	29 f4       	brne	.+10     	; 0x6c8 <main+0x204>
		}
		
		/////////////////////////////////////////////////////////////////////////////
		// Pick, Drop ready 상태 초기화
		if ((Sensor_Port & Sensor_Pick_AGV) == Sensor_Pick_AGV &&							// Pick stage에 AGV가 없고
			(Sensor_Port & Sensor_Pick_stage) == 0 &&										// Pick stage에 물건이 있고
 6be:	f0 92 a1 01 	sts	0x01A1, r15	; 0x8001a1 <Pick_ready+0x1>
 6c2:	e0 92 a0 01 	sts	0x01A0, r14	; 0x8001a0 <Pick_ready>
			(((Motor_Port & Motor_Conv_Pick1) | (Motor_Port & Motor_Conv_Pick2)) == 0))		// Pick Conv가 돌지 않으면
		{
			Pick_ready = 1;
 6c6:	04 c0       	rjmp	.+8      	; 0x6d0 <main+0x20c>
 6c8:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <Pick_ready+0x1>
 6cc:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <Pick_ready>
		}
		else
		{
			Pick_ready = 0;
 6d0:	00 9b       	sbis	0x00, 0	; 0
 6d2:	15 c0       	rjmp	.+42     	; 0x6fe <main+0x23a>
 6d4:	01 9b       	sbis	0x00, 1	; 0
 6d6:	13 c0       	rjmp	.+38     	; 0x6fe <main+0x23a>
		}
		if ((Sensor_Port & Sensor_Drop_AGV) == Sensor_Drop_AGV &&							// Drop stage에 AGV가 없고
 6d8:	02 9b       	sbis	0x00, 2	; 0
 6da:	11 c0       	rjmp	.+34     	; 0x6fe <main+0x23a>
 6dc:	88 b3       	in	r24, 0x18	; 24
 6de:	98 b3       	in	r25, 0x18	; 24
			(Sensor_Port & Sensor_Drop_stage) == Sensor_Drop_stage &&						// Drop stage에 물건이 없고
 6e0:	92 70       	andi	r25, 0x02	; 2
 6e2:	81 70       	andi	r24, 0x01	; 1
			(Sensor_Port & Sensor_Buffer_stage) == Sensor_Buffer_stage &&					// Buffer stage에 물건이 없고
			(((Motor_Port & Motor_Conv_Drop1) | (Motor_Port & Motor_Conv_Drop2)) == 0) &&	// Drop Conv가 돌지 않고
 6e4:	89 2b       	or	r24, r25
 6e6:	59 f4       	brne	.+22     	; 0x6fe <main+0x23a>
		{
			Pick_ready = 0;
		}
		if ((Sensor_Port & Sensor_Drop_AGV) == Sensor_Drop_AGV &&							// Drop stage에 AGV가 없고
			(Sensor_Port & Sensor_Drop_stage) == Sensor_Drop_stage &&						// Drop stage에 물건이 없고
			(Sensor_Port & Sensor_Buffer_stage) == Sensor_Buffer_stage &&					// Buffer stage에 물건이 없고
 6e8:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <Motor_Stopper_open>
 6ec:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <Motor_Stopper_open+0x1>
			(((Motor_Port & Motor_Conv_Drop1) | (Motor_Port & Motor_Conv_Drop2)) == 0) &&	// Drop Conv가 돌지 않고
 6f0:	89 2b       	or	r24, r25
 6f2:	29 f4       	brne	.+10     	; 0x6fe <main+0x23a>
 6f4:	f0 92 a3 01 	sts	0x01A3, r15	; 0x8001a3 <Drop_ready+0x1>
 6f8:	e0 92 a2 01 	sts	0x01A2, r14	; 0x8001a2 <Drop_ready>
			(Motor_Stopper_open == 0))														// Stopper가 닫혀 있으면
		{
			Drop_ready = 1;
 6fc:	04 c0       	rjmp	.+8      	; 0x706 <main+0x242>
 6fe:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <Drop_ready+0x1>
 702:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <Drop_ready>
		}
		else
		{
			Drop_ready = 0;
 706:	e0 91 9c 01 	lds	r30, 0x019C	; 0x80019c <Seqeunce>
 70a:	f0 91 9d 01 	lds	r31, 0x019D	; 0x80019d <Seqeunce+0x1>
		}
				
		/////////////////////////////////////////////////////////////////////////////
		//Sequence		
		switch (Seqeunce)
 70e:	e5 36       	cpi	r30, 0x65	; 101
 710:	f1 05       	cpc	r31, r1
 712:	08 f0       	brcs	.+2      	; 0x716 <main+0x252>
 714:	06 cf       	rjmp	.-500    	; 0x522 <main+0x5e>
 716:	ea 5b       	subi	r30, 0xBA	; 186
 718:	ff 4f       	sbci	r31, 0xFF	; 255
 71a:	41 c1       	rjmp	.+642    	; 0x99e <__tablejump2__>
 71c:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <Flag_AutoMode>
 720:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <Flag_AutoMode+0x1>
		{
			case 0:		// seq start
				if (Flag_AutoMode == 1)
 724:	01 97       	sbiw	r24, 0x01	; 1
 726:	09 f0       	breq	.+2      	; 0x72a <main+0x266>
 728:	fc ce       	rjmp	.-520    	; 0x522 <main+0x5e>
 72a:	f0 92 9d 01 	sts	0x019D, r15	; 0x80019d <Seqeunce+0x1>
 72e:	e0 92 9c 01 	sts	0x019C, r14	; 0x80019c <Seqeunce>
				{
					Seqeunce++;
 732:	f7 ce       	rjmp	.-530    	; 0x522 <main+0x5e>
 734:	00 9b       	sbis	0x00, 0	; 0
 736:	f5 ce       	rjmp	.-534    	; 0x522 <main+0x5e>
 738:	01 99       	sbic	0x00, 1	; 0
 73a:	f3 ce       	rjmp	.-538    	; 0x522 <main+0x5e>
				}
			break;
			
			case 1:		//Drop stage에 제품이 있고, AGV가 없을 때
				if((Sensor_Port & Sensor_Drop_AGV) == Sensor_Drop_AGV && (Sensor_Port & Sensor_Drop_stage) == 0)
 73c:	d0 92 9d 01 	sts	0x019D, r13	; 0x80019d <Seqeunce+0x1>
 740:	c0 92 9c 01 	sts	0x019C, r12	; 0x80019c <Seqeunce>
				{
					Seqeunce++;
 744:	ee ce       	rjmp	.-548    	; 0x522 <main+0x5e>
 746:	02 9b       	sbis	0x00, 2	; 0
 748:	02 c0       	rjmp	.+4      	; 0x74e <main+0x28a>
 74a:	c0 9a       	sbi	0x18, 0	; 24
 74c:	ea ce       	rjmp	.-556    	; 0x522 <main+0x5e>
				} 
			break;
			
			case 2:		// buffer sensor 들어올때까지 Drop Conv 구동
				if((Sensor_Port & Sensor_Buffer_stage) == Sensor_Buffer_stage)
 74e:	02 99       	sbic	0x00, 2	; 0
 750:	e8 ce       	rjmp	.-560    	; 0x522 <main+0x5e>
				{
					Motor_Port |= Motor_Conv_Drop1;
 752:	c0 98       	cbi	0x18, 0	; 24
 754:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <Seqeunce>
				}
				else if((Sensor_Port & Sensor_Buffer_stage) == 0)
 758:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <Seqeunce+0x1>
				{
					Motor_Port &= ~Motor_Conv_Drop1;
					Seqeunce++;
 75c:	01 96       	adiw	r24, 0x01	; 1
 75e:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <Seqeunce+0x1>
 762:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <Seqeunce>
 766:	dd ce       	rjmp	.-582    	; 0x522 <main+0x5e>
 768:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <Flag_ProdDefect>
 76c:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <Flag_ProdDefect+0x1>
				}
			break;
			
			case 3:		// 제품 불량 판단
				if(Flag_ProdDefect != INITIAL)
 770:	00 97       	sbiw	r24, 0x00	; 0
 772:	09 f4       	brne	.+2      	; 0x776 <main+0x2b2>
 774:	d6 ce       	rjmp	.-596    	; 0x522 <main+0x5e>
 776:	81 30       	cpi	r24, 0x01	; 1
 778:	91 05       	cpc	r25, r1
 77a:	39 f4       	brne	.+14     	; 0x78a <main+0x2c6>
 77c:	84 e0       	ldi	r24, 0x04	; 4
				{
					if(Flag_ProdDefect == NORMAL)
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <Seqeunce+0x1>
					{
						Seqeunce++;
 784:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <Seqeunce>
 788:	cc ce       	rjmp	.-616    	; 0x522 <main+0x5e>
 78a:	02 97       	sbiw	r24, 0x02	; 2
 78c:	09 f0       	breq	.+2      	; 0x790 <main+0x2cc>
 78e:	c9 ce       	rjmp	.-622    	; 0x522 <main+0x5e>
 790:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <delay+0x1>
					}
					else if(Flag_ProdDefect == DEFECT)
 794:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <delay>
					{
						delay = 0;
 798:	30 92 9d 01 	sts	0x019D, r3	; 0x80019d <Seqeunce+0x1>
 79c:	20 92 9c 01 	sts	0x019C, r2	; 0x80019c <Seqeunce>
						Seqeunce = 10;
 7a0:	c0 ce       	rjmp	.-640    	; 0x522 <main+0x5e>
 7a2:	03 9b       	sbis	0x00, 3	; 0
 7a4:	be ce       	rjmp	.-644    	; 0x522 <main+0x5e>
 7a6:	04 9b       	sbis	0x00, 4	; 0
 7a8:	bc ce       	rjmp	.-648    	; 0x522 <main+0x5e>
					}
				}
			break;
			
			case 4:		//Pick stage로 보내기 전에 확인(제품, AGV X)
				if((Sensor_Port & Sensor_Pick_stage) == Sensor_Pick_stage && (Sensor_Port & Sensor_Pick_AGV) == Sensor_Pick_AGV)
 7aa:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <delay+0x1>
 7ae:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <delay>
				{
					delay = 0;
 7b2:	85 e0       	ldi	r24, 0x05	; 5
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <Seqeunce+0x1>
					Seqeunce++;
 7ba:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <Seqeunce>
 7be:	b1 ce       	rjmp	.-670    	; 0x522 <main+0x5e>
 7c0:	f5 01       	movw	r30, r10
 7c2:	71 82       	std	Z+1, r7	; 0x01
 7c4:	60 82       	st	Z, r6
 7c6:	f0 92 9f 01 	sts	0x019F, r15	; 0x80019f <Motor_Stopper_open+0x1>
				}
			break;
			
			
			case 5:		//Stopper open
				Motor_Stopper = Pos_Stopper_Open;
 7ca:	e0 92 9e 01 	sts	0x019E, r14	; 0x80019e <Motor_Stopper_open>
				Motor_Stopper_open = 1;
 7ce:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <delay>
 7d2:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <delay+0x1>
				if(delay >= Delay_Stopper)
 7d6:	80 34       	cpi	r24, 0x40	; 64
 7d8:	91 05       	cpc	r25, r1
 7da:	0c f4       	brge	.+2      	; 0x7de <main+0x31a>
 7dc:	a2 ce       	rjmp	.-700    	; 0x522 <main+0x5e>
 7de:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <Seqeunce>
 7e2:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <Seqeunce+0x1>
				{
					Seqeunce++;
 7e6:	01 96       	adiw	r24, 0x01	; 1
 7e8:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <Seqeunce+0x1>
 7ec:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <Seqeunce>
 7f0:	98 ce       	rjmp	.-720    	; 0x522 <main+0x5e>
 7f2:	02 99       	sbic	0x00, 2	; 0
 7f4:	07 c0       	rjmp	.+14     	; 0x804 <main+0x340>
 7f6:	c0 9a       	sbi	0x18, 0	; 24
 7f8:	c2 9a       	sbi	0x18, 2	; 24
				}
			break;
			
			case 6:		//Buffer stage에서 Pick stage로 제품 보내기
				if((Sensor_Port & Sensor_Buffer_stage) == 0)
 7fa:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <delay+0x1>
				{
					//buffer에 제품 있으므로 Drop, Pick Conv 계속 구동
					Motor_Port |= Motor_Conv_Drop1;
 7fe:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <delay>
					Motor_Port |= Motor_Conv_Pick1;
					delay = 0;
 802:	8f ce       	rjmp	.-738    	; 0x522 <main+0x5e>
 804:	02 9b       	sbis	0x00, 2	; 0
 806:	8d ce       	rjmp	.-742    	; 0x522 <main+0x5e>
 808:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <delay>
				}
				else if((Sensor_Port & Sensor_Buffer_stage) == Sensor_Buffer_stage)
 80c:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <delay+0x1>
				{
					//buffer에 제품 없어짐, Drop Conv 정지, Stopper close
					if (delay >= Delay_Conv)
 810:	80 34       	cpi	r24, 0x40	; 64
 812:	91 05       	cpc	r25, r1
 814:	0c f4       	brge	.+2      	; 0x818 <main+0x354>
 816:	85 ce       	rjmp	.-758    	; 0x522 <main+0x5e>
 818:	c0 98       	cbi	0x18, 0	; 24
 81a:	f5 01       	movw	r30, r10
 81c:	51 82       	std	Z+1, r5	; 0x01
 81e:	40 82       	st	Z, r4
					{
						Motor_Port &= ~Motor_Conv_Drop1;
 820:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <Motor_Stopper_open+0x1>
						
						Motor_Stopper = Pos_Stopper_Close;
 824:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <Motor_Stopper_open>
						Motor_Stopper_open = 0;
 828:	f0 92 a3 01 	sts	0x01A3, r15	; 0x8001a3 <Drop_ready+0x1>
 82c:	e0 92 a2 01 	sts	0x01A2, r14	; 0x8001a2 <Drop_ready>
						Drop_ready = 1;
 830:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <Seqeunce>
 834:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <Seqeunce+0x1>
						
						Seqeunce++;
 838:	01 96       	adiw	r24, 0x01	; 1
 83a:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <Seqeunce+0x1>
 83e:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <Seqeunce>
 842:	6f ce       	rjmp	.-802    	; 0x522 <main+0x5e>
 844:	03 99       	sbic	0x00, 3	; 0
 846:	6d ce       	rjmp	.-806    	; 0x522 <main+0x5e>
 848:	03 99       	sbic	0x00, 3	; 0
 84a:	6b ce       	rjmp	.-810    	; 0x522 <main+0x5e>
					}
				}
			break;
			
			case 7:		// Pick stage 감지 후 Pick Conv 정지
				if((Sensor_Port & Sensor_Pick_stage) == Sensor_Pick_stage)
 84c:	c2 98       	cbi	0x18, 2	; 24
 84e:	84 e6       	ldi	r24, 0x64	; 100
				{
					//pick stage에 제품 도착 안했으므로 Pick Conv 계속 구동
				}
				else if((Sensor_Port & Sensor_Pick_stage) == 0)
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <Seqeunce+0x1>
				{
					//pick stage 제품 도착 완료, Pick Conv 정지
					Motor_Port &= ~Motor_Conv_Pick1;
					Seqeunce = 100;
 856:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <Seqeunce>
 85a:	63 ce       	rjmp	.-826    	; 0x522 <main+0x5e>
 85c:	f5 01       	movw	r30, r10
 85e:	91 82       	std	Z+1, r9	; 0x01
 860:	80 82       	st	Z, r8
 862:	f0 92 9f 01 	sts	0x019F, r15	; 0x80019f <Motor_Stopper_open+0x1>
				}
			break;
			
			case 10:	// 제품이 불량일 경우
				Motor_Stopper = Pos_Stopper_Throw;
 866:	e0 92 9e 01 	sts	0x019E, r14	; 0x80019e <Motor_Stopper_open>
				Motor_Stopper_open = 1;
 86a:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <delay>
 86e:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <delay+0x1>
				if(delay >= Delay_Stopper)
 872:	80 34       	cpi	r24, 0x40	; 64
 874:	91 05       	cpc	r25, r1
 876:	0c f4       	brge	.+2      	; 0x87a <main+0x3b6>
 878:	54 ce       	rjmp	.-856    	; 0x522 <main+0x5e>
 87a:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <Seqeunce>
 87e:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <Seqeunce+0x1>
				{
					Seqeunce++;
 882:	01 96       	adiw	r24, 0x01	; 1
 884:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <Seqeunce+0x1>
 888:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <Seqeunce>
 88c:	4a ce       	rjmp	.-876    	; 0x522 <main+0x5e>
 88e:	02 99       	sbic	0x00, 2	; 0
 890:	06 c0       	rjmp	.+12     	; 0x89e <main+0x3da>
 892:	c0 9a       	sbi	0x18, 0	; 24
 894:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <delay+0x1>
				}
			break;
			
			case 11:	// 제품 버리기
				if((Sensor_Port & Sensor_Buffer_stage) == 0)
 898:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <delay>
				{
					//buffer에 제품 있으므로 Drop, Pick Conv 계속 구동
					Motor_Port |= Motor_Conv_Drop1;
					delay = 0;
 89c:	42 ce       	rjmp	.-892    	; 0x522 <main+0x5e>
 89e:	02 9b       	sbis	0x00, 2	; 0
 8a0:	40 ce       	rjmp	.-896    	; 0x522 <main+0x5e>
 8a2:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <delay>
				}
				else if((Sensor_Port & Sensor_Buffer_stage) == Sensor_Buffer_stage)
 8a6:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <delay+0x1>
				{
					//buffer에 제품 없어짐, Drop Conv 정지, Stopper close
					if (delay >= Delay_Conv)
 8aa:	80 34       	cpi	r24, 0x40	; 64
 8ac:	91 05       	cpc	r25, r1
 8ae:	0c f4       	brge	.+2      	; 0x8b2 <main+0x3ee>
 8b0:	38 ce       	rjmp	.-912    	; 0x522 <main+0x5e>
 8b2:	c0 98       	cbi	0x18, 0	; 24
 8b4:	f5 01       	movw	r30, r10
 8b6:	51 82       	std	Z+1, r5	; 0x01
 8b8:	40 82       	st	Z, r4
					{
						Motor_Port &= ~Motor_Conv_Drop1;
 8ba:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <Motor_Stopper_open+0x1>
						Motor_Stopper = Pos_Stopper_Close;
 8be:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <Motor_Stopper_open>
						Motor_Stopper_open = 0;
 8c2:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <Flag_ProdDefect+0x1>
 8c6:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <Flag_ProdDefect>
						
						Flag_ProdDefect = INITIAL;
 8ca:	f0 92 a3 01 	sts	0x01A3, r15	; 0x8001a3 <Drop_ready+0x1>
 8ce:	e0 92 a2 01 	sts	0x01A2, r14	; 0x8001a2 <Drop_ready>
						Drop_ready = 1;
 8d2:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <Seqeunce+0x1>
 8d6:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Seqeunce>
						Seqeunce = 0;
 8da:	23 ce       	rjmp	.-954    	; 0x522 <main+0x5e>
 8dc:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <Flag_ProdDefect+0x1>
 8e0:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <Flag_ProdDefect>
					}
				}
			break;
			
			case 100:		//pick ready
				Flag_ProdDefect = INITIAL;
 8e4:	f0 92 a1 01 	sts	0x01A1, r15	; 0x8001a1 <Pick_ready+0x1>
 8e8:	e0 92 a0 01 	sts	0x01A0, r14	; 0x8001a0 <Pick_ready>
				Pick_ready = 1;
 8ec:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <Seqeunce+0x1>
 8f0:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <Seqeunce>
				Seqeunce = 0;
 8f4:	16 ce       	rjmp	.-980    	; 0x522 <main+0x5e>
 8f6:	e2 e2       	ldi	r30, 0x22	; 34
 8f8:	f1 e0       	ldi	r31, 0x01	; 1
 8fa:	ac e0       	ldi	r26, 0x0C	; 12
			break;
 8fc:	b1 e0       	ldi	r27, 0x01	; 1
 8fe:	ce ce       	rjmp	.-612    	; 0x69c <main+0x1d8>

00000900 <init_uart0>:
 900:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 904:	8f ec       	ldi	r24, 0xCF	; 207
 906:	89 b9       	out	0x09, r24	; 9
 908:	59 9a       	sbi	0x0b, 1	; 11
 90a:	e5 e9       	ldi	r30, 0x95	; 149
 90c:	f0 e0       	ldi	r31, 0x00	; 0
 90e:	80 81       	ld	r24, Z
 910:	86 60       	ori	r24, 0x06	; 6
 912:	80 83       	st	Z, r24
 914:	88 e9       	ldi	r24, 0x98	; 152
 916:	8a b9       	out	0x0a, r24	; 10
 918:	08 95       	ret

0000091a <UART0_transmit>:
 91a:	5d 9b       	sbis	0x0b, 5	; 11
 91c:	fe cf       	rjmp	.-4      	; 0x91a <UART0_transmit>
 91e:	8c b9       	out	0x0c, r24	; 12
 920:	08 95       	ret

00000922 <UART0_printf_string>:
 922:	cf 93       	push	r28
 924:	df 93       	push	r29
 926:	ec 01       	movw	r28, r24
 928:	88 81       	ld	r24, Y
 92a:	88 23       	and	r24, r24
 92c:	29 f0       	breq	.+10     	; 0x938 <UART0_printf_string+0x16>
 92e:	21 96       	adiw	r28, 0x01	; 1
 930:	f4 df       	rcall	.-24     	; 0x91a <UART0_transmit>
 932:	89 91       	ld	r24, Y+
 934:	81 11       	cpse	r24, r1
 936:	fc cf       	rjmp	.-8      	; 0x930 <UART0_printf_string+0xe>
 938:	df 91       	pop	r29
 93a:	cf 91       	pop	r28
 93c:	08 95       	ret

0000093e <isRxString>:
 93e:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <rxReadyFlag>
 942:	08 95       	ret

00000944 <getRxString>:
 944:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <rxReadyFlag>
 948:	8a ea       	ldi	r24, 0xAA	; 170
 94a:	91 e0       	ldi	r25, 0x01	; 1
 94c:	08 95       	ret

0000094e <UART0_ISR_Receive>:
 94e:	cf 93       	push	r28
 950:	df 93       	push	r29
 952:	1f 92       	push	r1
 954:	cd b7       	in	r28, 0x3d	; 61
 956:	de b7       	in	r29, 0x3e	; 62
 958:	8c b1       	in	r24, 0x0c	; 12
 95a:	89 83       	std	Y+1, r24	; 0x01
 95c:	89 81       	ldd	r24, Y+1	; 0x01
 95e:	8a 30       	cpi	r24, 0x0A	; 10
 960:	19 f0       	breq	.+6      	; 0x968 <UART0_ISR_Receive+0x1a>
 962:	89 81       	ldd	r24, Y+1	; 0x01
 964:	8d 30       	cpi	r24, 0x0D	; 13
 966:	61 f4       	brne	.+24     	; 0x980 <UART0_ISR_Receive+0x32>
 968:	e0 91 a8 01 	lds	r30, 0x01A8	; 0x8001a8 <head.1771>
 96c:	f0 e0       	ldi	r31, 0x00	; 0
 96e:	e6 55       	subi	r30, 0x56	; 86
 970:	fe 4f       	sbci	r31, 0xFE	; 254
 972:	10 82       	st	Z, r1
 974:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <head.1771>
 978:	81 e0       	ldi	r24, 0x01	; 1
 97a:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <rxReadyFlag>
 97e:	0b c0       	rjmp	.+22     	; 0x996 <UART0_ISR_Receive+0x48>
 980:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <head.1771>
 984:	e8 2f       	mov	r30, r24
 986:	f0 e0       	ldi	r31, 0x00	; 0
 988:	99 81       	ldd	r25, Y+1	; 0x01
 98a:	e6 55       	subi	r30, 0x56	; 86
 98c:	fe 4f       	sbci	r31, 0xFE	; 254
 98e:	90 83       	st	Z, r25
 990:	8f 5f       	subi	r24, 0xFF	; 255
 992:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <head.1771>
 996:	0f 90       	pop	r0
 998:	df 91       	pop	r29
 99a:	cf 91       	pop	r28
 99c:	08 95       	ret

0000099e <__tablejump2__>:
 99e:	ee 0f       	add	r30, r30
 9a0:	ff 1f       	adc	r31, r31
 9a2:	00 24       	eor	r0, r0
 9a4:	00 1c       	adc	r0, r0
 9a6:	0b be       	out	0x3b, r0	; 59
 9a8:	07 90       	elpm	r0, Z+
 9aa:	f6 91       	elpm	r31, Z
 9ac:	e0 2d       	mov	r30, r0
 9ae:	09 94       	ijmp

000009b0 <strtok>:
 9b0:	40 e6       	ldi	r20, 0x60	; 96
 9b2:	51 e0       	ldi	r21, 0x01	; 1
 9b4:	0e c0       	rjmp	.+28     	; 0x9d2 <strtok_r>

000009b6 <strncmp>:
 9b6:	fb 01       	movw	r30, r22
 9b8:	dc 01       	movw	r26, r24
 9ba:	41 50       	subi	r20, 0x01	; 1
 9bc:	50 40       	sbci	r21, 0x00	; 0
 9be:	30 f0       	brcs	.+12     	; 0x9cc <strncmp+0x16>
 9c0:	8d 91       	ld	r24, X+
 9c2:	01 90       	ld	r0, Z+
 9c4:	80 19       	sub	r24, r0
 9c6:	19 f4       	brne	.+6      	; 0x9ce <strncmp+0x18>
 9c8:	00 20       	and	r0, r0
 9ca:	b9 f7       	brne	.-18     	; 0x9ba <strncmp+0x4>
 9cc:	88 1b       	sub	r24, r24
 9ce:	99 0b       	sbc	r25, r25
 9d0:	08 95       	ret

000009d2 <strtok_r>:
 9d2:	fa 01       	movw	r30, r20
 9d4:	a1 91       	ld	r26, Z+
 9d6:	b0 81       	ld	r27, Z
 9d8:	00 97       	sbiw	r24, 0x00	; 0
 9da:	19 f4       	brne	.+6      	; 0x9e2 <strtok_r+0x10>
 9dc:	10 97       	sbiw	r26, 0x00	; 0
 9de:	e1 f0       	breq	.+56     	; 0xa18 <strtok_r+0x46>
 9e0:	cd 01       	movw	r24, r26
 9e2:	dc 01       	movw	r26, r24
 9e4:	cd 01       	movw	r24, r26
 9e6:	0d 90       	ld	r0, X+
 9e8:	00 20       	and	r0, r0
 9ea:	11 f4       	brne	.+4      	; 0x9f0 <strtok_r+0x1e>
 9ec:	c0 01       	movw	r24, r0
 9ee:	13 c0       	rjmp	.+38     	; 0xa16 <strtok_r+0x44>
 9f0:	fb 01       	movw	r30, r22
 9f2:	21 91       	ld	r18, Z+
 9f4:	22 23       	and	r18, r18
 9f6:	19 f0       	breq	.+6      	; 0x9fe <strtok_r+0x2c>
 9f8:	20 15       	cp	r18, r0
 9fa:	d9 f7       	brne	.-10     	; 0x9f2 <strtok_r+0x20>
 9fc:	f3 cf       	rjmp	.-26     	; 0x9e4 <strtok_r+0x12>
 9fe:	fb 01       	movw	r30, r22
 a00:	21 91       	ld	r18, Z+
 a02:	20 15       	cp	r18, r0
 a04:	19 f4       	brne	.+6      	; 0xa0c <strtok_r+0x3a>
 a06:	1e 92       	st	-X, r1
 a08:	11 96       	adiw	r26, 0x01	; 1
 a0a:	06 c0       	rjmp	.+12     	; 0xa18 <strtok_r+0x46>
 a0c:	22 23       	and	r18, r18
 a0e:	c1 f7       	brne	.-16     	; 0xa00 <strtok_r+0x2e>
 a10:	0d 90       	ld	r0, X+
 a12:	00 20       	and	r0, r0
 a14:	a1 f7       	brne	.-24     	; 0x9fe <strtok_r+0x2c>
 a16:	d0 01       	movw	r26, r0
 a18:	fa 01       	movw	r30, r20
 a1a:	a1 93       	st	Z+, r26
 a1c:	b0 83       	st	Z, r27
 a1e:	08 95       	ret

00000a20 <sprintf>:
 a20:	0f 93       	push	r16
 a22:	1f 93       	push	r17
 a24:	cf 93       	push	r28
 a26:	df 93       	push	r29
 a28:	cd b7       	in	r28, 0x3d	; 61
 a2a:	de b7       	in	r29, 0x3e	; 62
 a2c:	2e 97       	sbiw	r28, 0x0e	; 14
 a2e:	0f b6       	in	r0, 0x3f	; 63
 a30:	f8 94       	cli
 a32:	de bf       	out	0x3e, r29	; 62
 a34:	0f be       	out	0x3f, r0	; 63
 a36:	cd bf       	out	0x3d, r28	; 61
 a38:	0d 89       	ldd	r16, Y+21	; 0x15
 a3a:	1e 89       	ldd	r17, Y+22	; 0x16
 a3c:	86 e0       	ldi	r24, 0x06	; 6
 a3e:	8c 83       	std	Y+4, r24	; 0x04
 a40:	1a 83       	std	Y+2, r17	; 0x02
 a42:	09 83       	std	Y+1, r16	; 0x01
 a44:	8f ef       	ldi	r24, 0xFF	; 255
 a46:	9f e7       	ldi	r25, 0x7F	; 127
 a48:	9e 83       	std	Y+6, r25	; 0x06
 a4a:	8d 83       	std	Y+5, r24	; 0x05
 a4c:	ae 01       	movw	r20, r28
 a4e:	47 5e       	subi	r20, 0xE7	; 231
 a50:	5f 4f       	sbci	r21, 0xFF	; 255
 a52:	6f 89       	ldd	r22, Y+23	; 0x17
 a54:	78 8d       	ldd	r23, Y+24	; 0x18
 a56:	ce 01       	movw	r24, r28
 a58:	01 96       	adiw	r24, 0x01	; 1
 a5a:	10 d0       	rcall	.+32     	; 0xa7c <vfprintf>
 a5c:	ef 81       	ldd	r30, Y+7	; 0x07
 a5e:	f8 85       	ldd	r31, Y+8	; 0x08
 a60:	e0 0f       	add	r30, r16
 a62:	f1 1f       	adc	r31, r17
 a64:	10 82       	st	Z, r1
 a66:	2e 96       	adiw	r28, 0x0e	; 14
 a68:	0f b6       	in	r0, 0x3f	; 63
 a6a:	f8 94       	cli
 a6c:	de bf       	out	0x3e, r29	; 62
 a6e:	0f be       	out	0x3f, r0	; 63
 a70:	cd bf       	out	0x3d, r28	; 61
 a72:	df 91       	pop	r29
 a74:	cf 91       	pop	r28
 a76:	1f 91       	pop	r17
 a78:	0f 91       	pop	r16
 a7a:	08 95       	ret

00000a7c <vfprintf>:
 a7c:	2f 92       	push	r2
 a7e:	3f 92       	push	r3
 a80:	4f 92       	push	r4
 a82:	5f 92       	push	r5
 a84:	6f 92       	push	r6
 a86:	7f 92       	push	r7
 a88:	8f 92       	push	r8
 a8a:	9f 92       	push	r9
 a8c:	af 92       	push	r10
 a8e:	bf 92       	push	r11
 a90:	cf 92       	push	r12
 a92:	df 92       	push	r13
 a94:	ef 92       	push	r14
 a96:	ff 92       	push	r15
 a98:	0f 93       	push	r16
 a9a:	1f 93       	push	r17
 a9c:	cf 93       	push	r28
 a9e:	df 93       	push	r29
 aa0:	cd b7       	in	r28, 0x3d	; 61
 aa2:	de b7       	in	r29, 0x3e	; 62
 aa4:	2b 97       	sbiw	r28, 0x0b	; 11
 aa6:	0f b6       	in	r0, 0x3f	; 63
 aa8:	f8 94       	cli
 aaa:	de bf       	out	0x3e, r29	; 62
 aac:	0f be       	out	0x3f, r0	; 63
 aae:	cd bf       	out	0x3d, r28	; 61
 ab0:	6c 01       	movw	r12, r24
 ab2:	7b 01       	movw	r14, r22
 ab4:	8a 01       	movw	r16, r20
 ab6:	fc 01       	movw	r30, r24
 ab8:	17 82       	std	Z+7, r1	; 0x07
 aba:	16 82       	std	Z+6, r1	; 0x06
 abc:	83 81       	ldd	r24, Z+3	; 0x03
 abe:	81 ff       	sbrs	r24, 1
 ac0:	bf c1       	rjmp	.+894    	; 0xe40 <vfprintf+0x3c4>
 ac2:	ce 01       	movw	r24, r28
 ac4:	01 96       	adiw	r24, 0x01	; 1
 ac6:	3c 01       	movw	r6, r24
 ac8:	f6 01       	movw	r30, r12
 aca:	93 81       	ldd	r25, Z+3	; 0x03
 acc:	f7 01       	movw	r30, r14
 ace:	93 fd       	sbrc	r25, 3
 ad0:	85 91       	lpm	r24, Z+
 ad2:	93 ff       	sbrs	r25, 3
 ad4:	81 91       	ld	r24, Z+
 ad6:	7f 01       	movw	r14, r30
 ad8:	88 23       	and	r24, r24
 ada:	09 f4       	brne	.+2      	; 0xade <vfprintf+0x62>
 adc:	ad c1       	rjmp	.+858    	; 0xe38 <vfprintf+0x3bc>
 ade:	85 32       	cpi	r24, 0x25	; 37
 ae0:	39 f4       	brne	.+14     	; 0xaf0 <vfprintf+0x74>
 ae2:	93 fd       	sbrc	r25, 3
 ae4:	85 91       	lpm	r24, Z+
 ae6:	93 ff       	sbrs	r25, 3
 ae8:	81 91       	ld	r24, Z+
 aea:	7f 01       	movw	r14, r30
 aec:	85 32       	cpi	r24, 0x25	; 37
 aee:	21 f4       	brne	.+8      	; 0xaf8 <vfprintf+0x7c>
 af0:	b6 01       	movw	r22, r12
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	d6 d1       	rcall	.+940    	; 0xea2 <fputc>
 af6:	e8 cf       	rjmp	.-48     	; 0xac8 <vfprintf+0x4c>
 af8:	91 2c       	mov	r9, r1
 afa:	21 2c       	mov	r2, r1
 afc:	31 2c       	mov	r3, r1
 afe:	ff e1       	ldi	r31, 0x1F	; 31
 b00:	f3 15       	cp	r31, r3
 b02:	d8 f0       	brcs	.+54     	; 0xb3a <vfprintf+0xbe>
 b04:	8b 32       	cpi	r24, 0x2B	; 43
 b06:	79 f0       	breq	.+30     	; 0xb26 <vfprintf+0xaa>
 b08:	38 f4       	brcc	.+14     	; 0xb18 <vfprintf+0x9c>
 b0a:	80 32       	cpi	r24, 0x20	; 32
 b0c:	79 f0       	breq	.+30     	; 0xb2c <vfprintf+0xb0>
 b0e:	83 32       	cpi	r24, 0x23	; 35
 b10:	a1 f4       	brne	.+40     	; 0xb3a <vfprintf+0xbe>
 b12:	23 2d       	mov	r18, r3
 b14:	20 61       	ori	r18, 0x10	; 16
 b16:	1d c0       	rjmp	.+58     	; 0xb52 <vfprintf+0xd6>
 b18:	8d 32       	cpi	r24, 0x2D	; 45
 b1a:	61 f0       	breq	.+24     	; 0xb34 <vfprintf+0xb8>
 b1c:	80 33       	cpi	r24, 0x30	; 48
 b1e:	69 f4       	brne	.+26     	; 0xb3a <vfprintf+0xbe>
 b20:	23 2d       	mov	r18, r3
 b22:	21 60       	ori	r18, 0x01	; 1
 b24:	16 c0       	rjmp	.+44     	; 0xb52 <vfprintf+0xd6>
 b26:	83 2d       	mov	r24, r3
 b28:	82 60       	ori	r24, 0x02	; 2
 b2a:	38 2e       	mov	r3, r24
 b2c:	e3 2d       	mov	r30, r3
 b2e:	e4 60       	ori	r30, 0x04	; 4
 b30:	3e 2e       	mov	r3, r30
 b32:	2a c0       	rjmp	.+84     	; 0xb88 <vfprintf+0x10c>
 b34:	f3 2d       	mov	r31, r3
 b36:	f8 60       	ori	r31, 0x08	; 8
 b38:	1d c0       	rjmp	.+58     	; 0xb74 <vfprintf+0xf8>
 b3a:	37 fc       	sbrc	r3, 7
 b3c:	2d c0       	rjmp	.+90     	; 0xb98 <vfprintf+0x11c>
 b3e:	20 ed       	ldi	r18, 0xD0	; 208
 b40:	28 0f       	add	r18, r24
 b42:	2a 30       	cpi	r18, 0x0A	; 10
 b44:	40 f0       	brcs	.+16     	; 0xb56 <vfprintf+0xda>
 b46:	8e 32       	cpi	r24, 0x2E	; 46
 b48:	b9 f4       	brne	.+46     	; 0xb78 <vfprintf+0xfc>
 b4a:	36 fc       	sbrc	r3, 6
 b4c:	75 c1       	rjmp	.+746    	; 0xe38 <vfprintf+0x3bc>
 b4e:	23 2d       	mov	r18, r3
 b50:	20 64       	ori	r18, 0x40	; 64
 b52:	32 2e       	mov	r3, r18
 b54:	19 c0       	rjmp	.+50     	; 0xb88 <vfprintf+0x10c>
 b56:	36 fe       	sbrs	r3, 6
 b58:	06 c0       	rjmp	.+12     	; 0xb66 <vfprintf+0xea>
 b5a:	8a e0       	ldi	r24, 0x0A	; 10
 b5c:	98 9e       	mul	r9, r24
 b5e:	20 0d       	add	r18, r0
 b60:	11 24       	eor	r1, r1
 b62:	92 2e       	mov	r9, r18
 b64:	11 c0       	rjmp	.+34     	; 0xb88 <vfprintf+0x10c>
 b66:	ea e0       	ldi	r30, 0x0A	; 10
 b68:	2e 9e       	mul	r2, r30
 b6a:	20 0d       	add	r18, r0
 b6c:	11 24       	eor	r1, r1
 b6e:	22 2e       	mov	r2, r18
 b70:	f3 2d       	mov	r31, r3
 b72:	f0 62       	ori	r31, 0x20	; 32
 b74:	3f 2e       	mov	r3, r31
 b76:	08 c0       	rjmp	.+16     	; 0xb88 <vfprintf+0x10c>
 b78:	8c 36       	cpi	r24, 0x6C	; 108
 b7a:	21 f4       	brne	.+8      	; 0xb84 <vfprintf+0x108>
 b7c:	83 2d       	mov	r24, r3
 b7e:	80 68       	ori	r24, 0x80	; 128
 b80:	38 2e       	mov	r3, r24
 b82:	02 c0       	rjmp	.+4      	; 0xb88 <vfprintf+0x10c>
 b84:	88 36       	cpi	r24, 0x68	; 104
 b86:	41 f4       	brne	.+16     	; 0xb98 <vfprintf+0x11c>
 b88:	f7 01       	movw	r30, r14
 b8a:	93 fd       	sbrc	r25, 3
 b8c:	85 91       	lpm	r24, Z+
 b8e:	93 ff       	sbrs	r25, 3
 b90:	81 91       	ld	r24, Z+
 b92:	7f 01       	movw	r14, r30
 b94:	81 11       	cpse	r24, r1
 b96:	b3 cf       	rjmp	.-154    	; 0xafe <vfprintf+0x82>
 b98:	98 2f       	mov	r25, r24
 b9a:	9f 7d       	andi	r25, 0xDF	; 223
 b9c:	95 54       	subi	r25, 0x45	; 69
 b9e:	93 30       	cpi	r25, 0x03	; 3
 ba0:	28 f4       	brcc	.+10     	; 0xbac <vfprintf+0x130>
 ba2:	0c 5f       	subi	r16, 0xFC	; 252
 ba4:	1f 4f       	sbci	r17, 0xFF	; 255
 ba6:	9f e3       	ldi	r25, 0x3F	; 63
 ba8:	99 83       	std	Y+1, r25	; 0x01
 baa:	0d c0       	rjmp	.+26     	; 0xbc6 <vfprintf+0x14a>
 bac:	83 36       	cpi	r24, 0x63	; 99
 bae:	31 f0       	breq	.+12     	; 0xbbc <vfprintf+0x140>
 bb0:	83 37       	cpi	r24, 0x73	; 115
 bb2:	71 f0       	breq	.+28     	; 0xbd0 <vfprintf+0x154>
 bb4:	83 35       	cpi	r24, 0x53	; 83
 bb6:	09 f0       	breq	.+2      	; 0xbba <vfprintf+0x13e>
 bb8:	55 c0       	rjmp	.+170    	; 0xc64 <vfprintf+0x1e8>
 bba:	20 c0       	rjmp	.+64     	; 0xbfc <vfprintf+0x180>
 bbc:	f8 01       	movw	r30, r16
 bbe:	80 81       	ld	r24, Z
 bc0:	89 83       	std	Y+1, r24	; 0x01
 bc2:	0e 5f       	subi	r16, 0xFE	; 254
 bc4:	1f 4f       	sbci	r17, 0xFF	; 255
 bc6:	88 24       	eor	r8, r8
 bc8:	83 94       	inc	r8
 bca:	91 2c       	mov	r9, r1
 bcc:	53 01       	movw	r10, r6
 bce:	12 c0       	rjmp	.+36     	; 0xbf4 <vfprintf+0x178>
 bd0:	28 01       	movw	r4, r16
 bd2:	f2 e0       	ldi	r31, 0x02	; 2
 bd4:	4f 0e       	add	r4, r31
 bd6:	51 1c       	adc	r5, r1
 bd8:	f8 01       	movw	r30, r16
 bda:	a0 80       	ld	r10, Z
 bdc:	b1 80       	ldd	r11, Z+1	; 0x01
 bde:	36 fe       	sbrs	r3, 6
 be0:	03 c0       	rjmp	.+6      	; 0xbe8 <vfprintf+0x16c>
 be2:	69 2d       	mov	r22, r9
 be4:	70 e0       	ldi	r23, 0x00	; 0
 be6:	02 c0       	rjmp	.+4      	; 0xbec <vfprintf+0x170>
 be8:	6f ef       	ldi	r22, 0xFF	; 255
 bea:	7f ef       	ldi	r23, 0xFF	; 255
 bec:	c5 01       	movw	r24, r10
 bee:	4e d1       	rcall	.+668    	; 0xe8c <strnlen>
 bf0:	4c 01       	movw	r8, r24
 bf2:	82 01       	movw	r16, r4
 bf4:	f3 2d       	mov	r31, r3
 bf6:	ff 77       	andi	r31, 0x7F	; 127
 bf8:	3f 2e       	mov	r3, r31
 bfa:	15 c0       	rjmp	.+42     	; 0xc26 <vfprintf+0x1aa>
 bfc:	28 01       	movw	r4, r16
 bfe:	22 e0       	ldi	r18, 0x02	; 2
 c00:	42 0e       	add	r4, r18
 c02:	51 1c       	adc	r5, r1
 c04:	f8 01       	movw	r30, r16
 c06:	a0 80       	ld	r10, Z
 c08:	b1 80       	ldd	r11, Z+1	; 0x01
 c0a:	36 fe       	sbrs	r3, 6
 c0c:	03 c0       	rjmp	.+6      	; 0xc14 <vfprintf+0x198>
 c0e:	69 2d       	mov	r22, r9
 c10:	70 e0       	ldi	r23, 0x00	; 0
 c12:	02 c0       	rjmp	.+4      	; 0xc18 <vfprintf+0x19c>
 c14:	6f ef       	ldi	r22, 0xFF	; 255
 c16:	7f ef       	ldi	r23, 0xFF	; 255
 c18:	c5 01       	movw	r24, r10
 c1a:	2d d1       	rcall	.+602    	; 0xe76 <strnlen_P>
 c1c:	4c 01       	movw	r8, r24
 c1e:	f3 2d       	mov	r31, r3
 c20:	f0 68       	ori	r31, 0x80	; 128
 c22:	3f 2e       	mov	r3, r31
 c24:	82 01       	movw	r16, r4
 c26:	33 fc       	sbrc	r3, 3
 c28:	19 c0       	rjmp	.+50     	; 0xc5c <vfprintf+0x1e0>
 c2a:	82 2d       	mov	r24, r2
 c2c:	90 e0       	ldi	r25, 0x00	; 0
 c2e:	88 16       	cp	r8, r24
 c30:	99 06       	cpc	r9, r25
 c32:	a0 f4       	brcc	.+40     	; 0xc5c <vfprintf+0x1e0>
 c34:	b6 01       	movw	r22, r12
 c36:	80 e2       	ldi	r24, 0x20	; 32
 c38:	90 e0       	ldi	r25, 0x00	; 0
 c3a:	33 d1       	rcall	.+614    	; 0xea2 <fputc>
 c3c:	2a 94       	dec	r2
 c3e:	f5 cf       	rjmp	.-22     	; 0xc2a <vfprintf+0x1ae>
 c40:	f5 01       	movw	r30, r10
 c42:	37 fc       	sbrc	r3, 7
 c44:	85 91       	lpm	r24, Z+
 c46:	37 fe       	sbrs	r3, 7
 c48:	81 91       	ld	r24, Z+
 c4a:	5f 01       	movw	r10, r30
 c4c:	b6 01       	movw	r22, r12
 c4e:	90 e0       	ldi	r25, 0x00	; 0
 c50:	28 d1       	rcall	.+592    	; 0xea2 <fputc>
 c52:	21 10       	cpse	r2, r1
 c54:	2a 94       	dec	r2
 c56:	21 e0       	ldi	r18, 0x01	; 1
 c58:	82 1a       	sub	r8, r18
 c5a:	91 08       	sbc	r9, r1
 c5c:	81 14       	cp	r8, r1
 c5e:	91 04       	cpc	r9, r1
 c60:	79 f7       	brne	.-34     	; 0xc40 <vfprintf+0x1c4>
 c62:	e1 c0       	rjmp	.+450    	; 0xe26 <vfprintf+0x3aa>
 c64:	84 36       	cpi	r24, 0x64	; 100
 c66:	11 f0       	breq	.+4      	; 0xc6c <vfprintf+0x1f0>
 c68:	89 36       	cpi	r24, 0x69	; 105
 c6a:	39 f5       	brne	.+78     	; 0xcba <vfprintf+0x23e>
 c6c:	f8 01       	movw	r30, r16
 c6e:	37 fe       	sbrs	r3, 7
 c70:	07 c0       	rjmp	.+14     	; 0xc80 <vfprintf+0x204>
 c72:	60 81       	ld	r22, Z
 c74:	71 81       	ldd	r23, Z+1	; 0x01
 c76:	82 81       	ldd	r24, Z+2	; 0x02
 c78:	93 81       	ldd	r25, Z+3	; 0x03
 c7a:	0c 5f       	subi	r16, 0xFC	; 252
 c7c:	1f 4f       	sbci	r17, 0xFF	; 255
 c7e:	08 c0       	rjmp	.+16     	; 0xc90 <vfprintf+0x214>
 c80:	60 81       	ld	r22, Z
 c82:	71 81       	ldd	r23, Z+1	; 0x01
 c84:	07 2e       	mov	r0, r23
 c86:	00 0c       	add	r0, r0
 c88:	88 0b       	sbc	r24, r24
 c8a:	99 0b       	sbc	r25, r25
 c8c:	0e 5f       	subi	r16, 0xFE	; 254
 c8e:	1f 4f       	sbci	r17, 0xFF	; 255
 c90:	f3 2d       	mov	r31, r3
 c92:	ff 76       	andi	r31, 0x6F	; 111
 c94:	3f 2e       	mov	r3, r31
 c96:	97 ff       	sbrs	r25, 7
 c98:	09 c0       	rjmp	.+18     	; 0xcac <vfprintf+0x230>
 c9a:	90 95       	com	r25
 c9c:	80 95       	com	r24
 c9e:	70 95       	com	r23
 ca0:	61 95       	neg	r22
 ca2:	7f 4f       	sbci	r23, 0xFF	; 255
 ca4:	8f 4f       	sbci	r24, 0xFF	; 255
 ca6:	9f 4f       	sbci	r25, 0xFF	; 255
 ca8:	f0 68       	ori	r31, 0x80	; 128
 caa:	3f 2e       	mov	r3, r31
 cac:	2a e0       	ldi	r18, 0x0A	; 10
 cae:	30 e0       	ldi	r19, 0x00	; 0
 cb0:	a3 01       	movw	r20, r6
 cb2:	33 d1       	rcall	.+614    	; 0xf1a <__ultoa_invert>
 cb4:	88 2e       	mov	r8, r24
 cb6:	86 18       	sub	r8, r6
 cb8:	44 c0       	rjmp	.+136    	; 0xd42 <vfprintf+0x2c6>
 cba:	85 37       	cpi	r24, 0x75	; 117
 cbc:	31 f4       	brne	.+12     	; 0xcca <vfprintf+0x24e>
 cbe:	23 2d       	mov	r18, r3
 cc0:	2f 7e       	andi	r18, 0xEF	; 239
 cc2:	b2 2e       	mov	r11, r18
 cc4:	2a e0       	ldi	r18, 0x0A	; 10
 cc6:	30 e0       	ldi	r19, 0x00	; 0
 cc8:	25 c0       	rjmp	.+74     	; 0xd14 <vfprintf+0x298>
 cca:	93 2d       	mov	r25, r3
 ccc:	99 7f       	andi	r25, 0xF9	; 249
 cce:	b9 2e       	mov	r11, r25
 cd0:	8f 36       	cpi	r24, 0x6F	; 111
 cd2:	c1 f0       	breq	.+48     	; 0xd04 <vfprintf+0x288>
 cd4:	18 f4       	brcc	.+6      	; 0xcdc <vfprintf+0x260>
 cd6:	88 35       	cpi	r24, 0x58	; 88
 cd8:	79 f0       	breq	.+30     	; 0xcf8 <vfprintf+0x27c>
 cda:	ae c0       	rjmp	.+348    	; 0xe38 <vfprintf+0x3bc>
 cdc:	80 37       	cpi	r24, 0x70	; 112
 cde:	19 f0       	breq	.+6      	; 0xce6 <vfprintf+0x26a>
 ce0:	88 37       	cpi	r24, 0x78	; 120
 ce2:	21 f0       	breq	.+8      	; 0xcec <vfprintf+0x270>
 ce4:	a9 c0       	rjmp	.+338    	; 0xe38 <vfprintf+0x3bc>
 ce6:	e9 2f       	mov	r30, r25
 ce8:	e0 61       	ori	r30, 0x10	; 16
 cea:	be 2e       	mov	r11, r30
 cec:	b4 fe       	sbrs	r11, 4
 cee:	0d c0       	rjmp	.+26     	; 0xd0a <vfprintf+0x28e>
 cf0:	fb 2d       	mov	r31, r11
 cf2:	f4 60       	ori	r31, 0x04	; 4
 cf4:	bf 2e       	mov	r11, r31
 cf6:	09 c0       	rjmp	.+18     	; 0xd0a <vfprintf+0x28e>
 cf8:	34 fe       	sbrs	r3, 4
 cfa:	0a c0       	rjmp	.+20     	; 0xd10 <vfprintf+0x294>
 cfc:	29 2f       	mov	r18, r25
 cfe:	26 60       	ori	r18, 0x06	; 6
 d00:	b2 2e       	mov	r11, r18
 d02:	06 c0       	rjmp	.+12     	; 0xd10 <vfprintf+0x294>
 d04:	28 e0       	ldi	r18, 0x08	; 8
 d06:	30 e0       	ldi	r19, 0x00	; 0
 d08:	05 c0       	rjmp	.+10     	; 0xd14 <vfprintf+0x298>
 d0a:	20 e1       	ldi	r18, 0x10	; 16
 d0c:	30 e0       	ldi	r19, 0x00	; 0
 d0e:	02 c0       	rjmp	.+4      	; 0xd14 <vfprintf+0x298>
 d10:	20 e1       	ldi	r18, 0x10	; 16
 d12:	32 e0       	ldi	r19, 0x02	; 2
 d14:	f8 01       	movw	r30, r16
 d16:	b7 fe       	sbrs	r11, 7
 d18:	07 c0       	rjmp	.+14     	; 0xd28 <vfprintf+0x2ac>
 d1a:	60 81       	ld	r22, Z
 d1c:	71 81       	ldd	r23, Z+1	; 0x01
 d1e:	82 81       	ldd	r24, Z+2	; 0x02
 d20:	93 81       	ldd	r25, Z+3	; 0x03
 d22:	0c 5f       	subi	r16, 0xFC	; 252
 d24:	1f 4f       	sbci	r17, 0xFF	; 255
 d26:	06 c0       	rjmp	.+12     	; 0xd34 <vfprintf+0x2b8>
 d28:	60 81       	ld	r22, Z
 d2a:	71 81       	ldd	r23, Z+1	; 0x01
 d2c:	80 e0       	ldi	r24, 0x00	; 0
 d2e:	90 e0       	ldi	r25, 0x00	; 0
 d30:	0e 5f       	subi	r16, 0xFE	; 254
 d32:	1f 4f       	sbci	r17, 0xFF	; 255
 d34:	a3 01       	movw	r20, r6
 d36:	f1 d0       	rcall	.+482    	; 0xf1a <__ultoa_invert>
 d38:	88 2e       	mov	r8, r24
 d3a:	86 18       	sub	r8, r6
 d3c:	fb 2d       	mov	r31, r11
 d3e:	ff 77       	andi	r31, 0x7F	; 127
 d40:	3f 2e       	mov	r3, r31
 d42:	36 fe       	sbrs	r3, 6
 d44:	0d c0       	rjmp	.+26     	; 0xd60 <vfprintf+0x2e4>
 d46:	23 2d       	mov	r18, r3
 d48:	2e 7f       	andi	r18, 0xFE	; 254
 d4a:	a2 2e       	mov	r10, r18
 d4c:	89 14       	cp	r8, r9
 d4e:	58 f4       	brcc	.+22     	; 0xd66 <vfprintf+0x2ea>
 d50:	34 fe       	sbrs	r3, 4
 d52:	0b c0       	rjmp	.+22     	; 0xd6a <vfprintf+0x2ee>
 d54:	32 fc       	sbrc	r3, 2
 d56:	09 c0       	rjmp	.+18     	; 0xd6a <vfprintf+0x2ee>
 d58:	83 2d       	mov	r24, r3
 d5a:	8e 7e       	andi	r24, 0xEE	; 238
 d5c:	a8 2e       	mov	r10, r24
 d5e:	05 c0       	rjmp	.+10     	; 0xd6a <vfprintf+0x2ee>
 d60:	b8 2c       	mov	r11, r8
 d62:	a3 2c       	mov	r10, r3
 d64:	03 c0       	rjmp	.+6      	; 0xd6c <vfprintf+0x2f0>
 d66:	b8 2c       	mov	r11, r8
 d68:	01 c0       	rjmp	.+2      	; 0xd6c <vfprintf+0x2f0>
 d6a:	b9 2c       	mov	r11, r9
 d6c:	a4 fe       	sbrs	r10, 4
 d6e:	0f c0       	rjmp	.+30     	; 0xd8e <vfprintf+0x312>
 d70:	fe 01       	movw	r30, r28
 d72:	e8 0d       	add	r30, r8
 d74:	f1 1d       	adc	r31, r1
 d76:	80 81       	ld	r24, Z
 d78:	80 33       	cpi	r24, 0x30	; 48
 d7a:	21 f4       	brne	.+8      	; 0xd84 <vfprintf+0x308>
 d7c:	9a 2d       	mov	r25, r10
 d7e:	99 7e       	andi	r25, 0xE9	; 233
 d80:	a9 2e       	mov	r10, r25
 d82:	09 c0       	rjmp	.+18     	; 0xd96 <vfprintf+0x31a>
 d84:	a2 fe       	sbrs	r10, 2
 d86:	06 c0       	rjmp	.+12     	; 0xd94 <vfprintf+0x318>
 d88:	b3 94       	inc	r11
 d8a:	b3 94       	inc	r11
 d8c:	04 c0       	rjmp	.+8      	; 0xd96 <vfprintf+0x31a>
 d8e:	8a 2d       	mov	r24, r10
 d90:	86 78       	andi	r24, 0x86	; 134
 d92:	09 f0       	breq	.+2      	; 0xd96 <vfprintf+0x31a>
 d94:	b3 94       	inc	r11
 d96:	a3 fc       	sbrc	r10, 3
 d98:	10 c0       	rjmp	.+32     	; 0xdba <vfprintf+0x33e>
 d9a:	a0 fe       	sbrs	r10, 0
 d9c:	06 c0       	rjmp	.+12     	; 0xdaa <vfprintf+0x32e>
 d9e:	b2 14       	cp	r11, r2
 da0:	80 f4       	brcc	.+32     	; 0xdc2 <vfprintf+0x346>
 da2:	28 0c       	add	r2, r8
 da4:	92 2c       	mov	r9, r2
 da6:	9b 18       	sub	r9, r11
 da8:	0d c0       	rjmp	.+26     	; 0xdc4 <vfprintf+0x348>
 daa:	b2 14       	cp	r11, r2
 dac:	58 f4       	brcc	.+22     	; 0xdc4 <vfprintf+0x348>
 dae:	b6 01       	movw	r22, r12
 db0:	80 e2       	ldi	r24, 0x20	; 32
 db2:	90 e0       	ldi	r25, 0x00	; 0
 db4:	76 d0       	rcall	.+236    	; 0xea2 <fputc>
 db6:	b3 94       	inc	r11
 db8:	f8 cf       	rjmp	.-16     	; 0xdaa <vfprintf+0x32e>
 dba:	b2 14       	cp	r11, r2
 dbc:	18 f4       	brcc	.+6      	; 0xdc4 <vfprintf+0x348>
 dbe:	2b 18       	sub	r2, r11
 dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <vfprintf+0x34a>
 dc2:	98 2c       	mov	r9, r8
 dc4:	21 2c       	mov	r2, r1
 dc6:	a4 fe       	sbrs	r10, 4
 dc8:	0f c0       	rjmp	.+30     	; 0xde8 <vfprintf+0x36c>
 dca:	b6 01       	movw	r22, r12
 dcc:	80 e3       	ldi	r24, 0x30	; 48
 dce:	90 e0       	ldi	r25, 0x00	; 0
 dd0:	68 d0       	rcall	.+208    	; 0xea2 <fputc>
 dd2:	a2 fe       	sbrs	r10, 2
 dd4:	16 c0       	rjmp	.+44     	; 0xe02 <vfprintf+0x386>
 dd6:	a1 fc       	sbrc	r10, 1
 dd8:	03 c0       	rjmp	.+6      	; 0xde0 <vfprintf+0x364>
 dda:	88 e7       	ldi	r24, 0x78	; 120
 ddc:	90 e0       	ldi	r25, 0x00	; 0
 dde:	02 c0       	rjmp	.+4      	; 0xde4 <vfprintf+0x368>
 de0:	88 e5       	ldi	r24, 0x58	; 88
 de2:	90 e0       	ldi	r25, 0x00	; 0
 de4:	b6 01       	movw	r22, r12
 de6:	0c c0       	rjmp	.+24     	; 0xe00 <vfprintf+0x384>
 de8:	8a 2d       	mov	r24, r10
 dea:	86 78       	andi	r24, 0x86	; 134
 dec:	51 f0       	breq	.+20     	; 0xe02 <vfprintf+0x386>
 dee:	a1 fe       	sbrs	r10, 1
 df0:	02 c0       	rjmp	.+4      	; 0xdf6 <vfprintf+0x37a>
 df2:	8b e2       	ldi	r24, 0x2B	; 43
 df4:	01 c0       	rjmp	.+2      	; 0xdf8 <vfprintf+0x37c>
 df6:	80 e2       	ldi	r24, 0x20	; 32
 df8:	a7 fc       	sbrc	r10, 7
 dfa:	8d e2       	ldi	r24, 0x2D	; 45
 dfc:	b6 01       	movw	r22, r12
 dfe:	90 e0       	ldi	r25, 0x00	; 0
 e00:	50 d0       	rcall	.+160    	; 0xea2 <fputc>
 e02:	89 14       	cp	r8, r9
 e04:	30 f4       	brcc	.+12     	; 0xe12 <vfprintf+0x396>
 e06:	b6 01       	movw	r22, r12
 e08:	80 e3       	ldi	r24, 0x30	; 48
 e0a:	90 e0       	ldi	r25, 0x00	; 0
 e0c:	4a d0       	rcall	.+148    	; 0xea2 <fputc>
 e0e:	9a 94       	dec	r9
 e10:	f8 cf       	rjmp	.-16     	; 0xe02 <vfprintf+0x386>
 e12:	8a 94       	dec	r8
 e14:	f3 01       	movw	r30, r6
 e16:	e8 0d       	add	r30, r8
 e18:	f1 1d       	adc	r31, r1
 e1a:	80 81       	ld	r24, Z
 e1c:	b6 01       	movw	r22, r12
 e1e:	90 e0       	ldi	r25, 0x00	; 0
 e20:	40 d0       	rcall	.+128    	; 0xea2 <fputc>
 e22:	81 10       	cpse	r8, r1
 e24:	f6 cf       	rjmp	.-20     	; 0xe12 <vfprintf+0x396>
 e26:	22 20       	and	r2, r2
 e28:	09 f4       	brne	.+2      	; 0xe2c <vfprintf+0x3b0>
 e2a:	4e ce       	rjmp	.-868    	; 0xac8 <vfprintf+0x4c>
 e2c:	b6 01       	movw	r22, r12
 e2e:	80 e2       	ldi	r24, 0x20	; 32
 e30:	90 e0       	ldi	r25, 0x00	; 0
 e32:	37 d0       	rcall	.+110    	; 0xea2 <fputc>
 e34:	2a 94       	dec	r2
 e36:	f7 cf       	rjmp	.-18     	; 0xe26 <vfprintf+0x3aa>
 e38:	f6 01       	movw	r30, r12
 e3a:	86 81       	ldd	r24, Z+6	; 0x06
 e3c:	97 81       	ldd	r25, Z+7	; 0x07
 e3e:	02 c0       	rjmp	.+4      	; 0xe44 <vfprintf+0x3c8>
 e40:	8f ef       	ldi	r24, 0xFF	; 255
 e42:	9f ef       	ldi	r25, 0xFF	; 255
 e44:	2b 96       	adiw	r28, 0x0b	; 11
 e46:	0f b6       	in	r0, 0x3f	; 63
 e48:	f8 94       	cli
 e4a:	de bf       	out	0x3e, r29	; 62
 e4c:	0f be       	out	0x3f, r0	; 63
 e4e:	cd bf       	out	0x3d, r28	; 61
 e50:	df 91       	pop	r29
 e52:	cf 91       	pop	r28
 e54:	1f 91       	pop	r17
 e56:	0f 91       	pop	r16
 e58:	ff 90       	pop	r15
 e5a:	ef 90       	pop	r14
 e5c:	df 90       	pop	r13
 e5e:	cf 90       	pop	r12
 e60:	bf 90       	pop	r11
 e62:	af 90       	pop	r10
 e64:	9f 90       	pop	r9
 e66:	8f 90       	pop	r8
 e68:	7f 90       	pop	r7
 e6a:	6f 90       	pop	r6
 e6c:	5f 90       	pop	r5
 e6e:	4f 90       	pop	r4
 e70:	3f 90       	pop	r3
 e72:	2f 90       	pop	r2
 e74:	08 95       	ret

00000e76 <strnlen_P>:
 e76:	fc 01       	movw	r30, r24
 e78:	05 90       	lpm	r0, Z+
 e7a:	61 50       	subi	r22, 0x01	; 1
 e7c:	70 40       	sbci	r23, 0x00	; 0
 e7e:	01 10       	cpse	r0, r1
 e80:	d8 f7       	brcc	.-10     	; 0xe78 <strnlen_P+0x2>
 e82:	80 95       	com	r24
 e84:	90 95       	com	r25
 e86:	8e 0f       	add	r24, r30
 e88:	9f 1f       	adc	r25, r31
 e8a:	08 95       	ret

00000e8c <strnlen>:
 e8c:	fc 01       	movw	r30, r24
 e8e:	61 50       	subi	r22, 0x01	; 1
 e90:	70 40       	sbci	r23, 0x00	; 0
 e92:	01 90       	ld	r0, Z+
 e94:	01 10       	cpse	r0, r1
 e96:	d8 f7       	brcc	.-10     	; 0xe8e <strnlen+0x2>
 e98:	80 95       	com	r24
 e9a:	90 95       	com	r25
 e9c:	8e 0f       	add	r24, r30
 e9e:	9f 1f       	adc	r25, r31
 ea0:	08 95       	ret

00000ea2 <fputc>:
 ea2:	0f 93       	push	r16
 ea4:	1f 93       	push	r17
 ea6:	cf 93       	push	r28
 ea8:	df 93       	push	r29
 eaa:	fb 01       	movw	r30, r22
 eac:	23 81       	ldd	r18, Z+3	; 0x03
 eae:	21 fd       	sbrc	r18, 1
 eb0:	03 c0       	rjmp	.+6      	; 0xeb8 <fputc+0x16>
 eb2:	8f ef       	ldi	r24, 0xFF	; 255
 eb4:	9f ef       	ldi	r25, 0xFF	; 255
 eb6:	2c c0       	rjmp	.+88     	; 0xf10 <fputc+0x6e>
 eb8:	22 ff       	sbrs	r18, 2
 eba:	16 c0       	rjmp	.+44     	; 0xee8 <fputc+0x46>
 ebc:	46 81       	ldd	r20, Z+6	; 0x06
 ebe:	57 81       	ldd	r21, Z+7	; 0x07
 ec0:	24 81       	ldd	r18, Z+4	; 0x04
 ec2:	35 81       	ldd	r19, Z+5	; 0x05
 ec4:	42 17       	cp	r20, r18
 ec6:	53 07       	cpc	r21, r19
 ec8:	44 f4       	brge	.+16     	; 0xeda <fputc+0x38>
 eca:	a0 81       	ld	r26, Z
 ecc:	b1 81       	ldd	r27, Z+1	; 0x01
 ece:	9d 01       	movw	r18, r26
 ed0:	2f 5f       	subi	r18, 0xFF	; 255
 ed2:	3f 4f       	sbci	r19, 0xFF	; 255
 ed4:	31 83       	std	Z+1, r19	; 0x01
 ed6:	20 83       	st	Z, r18
 ed8:	8c 93       	st	X, r24
 eda:	26 81       	ldd	r18, Z+6	; 0x06
 edc:	37 81       	ldd	r19, Z+7	; 0x07
 ede:	2f 5f       	subi	r18, 0xFF	; 255
 ee0:	3f 4f       	sbci	r19, 0xFF	; 255
 ee2:	37 83       	std	Z+7, r19	; 0x07
 ee4:	26 83       	std	Z+6, r18	; 0x06
 ee6:	14 c0       	rjmp	.+40     	; 0xf10 <fputc+0x6e>
 ee8:	8b 01       	movw	r16, r22
 eea:	ec 01       	movw	r28, r24
 eec:	fb 01       	movw	r30, r22
 eee:	00 84       	ldd	r0, Z+8	; 0x08
 ef0:	f1 85       	ldd	r31, Z+9	; 0x09
 ef2:	e0 2d       	mov	r30, r0
 ef4:	09 95       	icall
 ef6:	89 2b       	or	r24, r25
 ef8:	e1 f6       	brne	.-72     	; 0xeb2 <fputc+0x10>
 efa:	d8 01       	movw	r26, r16
 efc:	16 96       	adiw	r26, 0x06	; 6
 efe:	8d 91       	ld	r24, X+
 f00:	9c 91       	ld	r25, X
 f02:	17 97       	sbiw	r26, 0x07	; 7
 f04:	01 96       	adiw	r24, 0x01	; 1
 f06:	17 96       	adiw	r26, 0x07	; 7
 f08:	9c 93       	st	X, r25
 f0a:	8e 93       	st	-X, r24
 f0c:	16 97       	sbiw	r26, 0x06	; 6
 f0e:	ce 01       	movw	r24, r28
 f10:	df 91       	pop	r29
 f12:	cf 91       	pop	r28
 f14:	1f 91       	pop	r17
 f16:	0f 91       	pop	r16
 f18:	08 95       	ret

00000f1a <__ultoa_invert>:
 f1a:	fa 01       	movw	r30, r20
 f1c:	aa 27       	eor	r26, r26
 f1e:	28 30       	cpi	r18, 0x08	; 8
 f20:	51 f1       	breq	.+84     	; 0xf76 <__ultoa_invert+0x5c>
 f22:	20 31       	cpi	r18, 0x10	; 16
 f24:	81 f1       	breq	.+96     	; 0xf86 <__ultoa_invert+0x6c>
 f26:	e8 94       	clt
 f28:	6f 93       	push	r22
 f2a:	6e 7f       	andi	r22, 0xFE	; 254
 f2c:	6e 5f       	subi	r22, 0xFE	; 254
 f2e:	7f 4f       	sbci	r23, 0xFF	; 255
 f30:	8f 4f       	sbci	r24, 0xFF	; 255
 f32:	9f 4f       	sbci	r25, 0xFF	; 255
 f34:	af 4f       	sbci	r26, 0xFF	; 255
 f36:	b1 e0       	ldi	r27, 0x01	; 1
 f38:	3e d0       	rcall	.+124    	; 0xfb6 <__ultoa_invert+0x9c>
 f3a:	b4 e0       	ldi	r27, 0x04	; 4
 f3c:	3c d0       	rcall	.+120    	; 0xfb6 <__ultoa_invert+0x9c>
 f3e:	67 0f       	add	r22, r23
 f40:	78 1f       	adc	r23, r24
 f42:	89 1f       	adc	r24, r25
 f44:	9a 1f       	adc	r25, r26
 f46:	a1 1d       	adc	r26, r1
 f48:	68 0f       	add	r22, r24
 f4a:	79 1f       	adc	r23, r25
 f4c:	8a 1f       	adc	r24, r26
 f4e:	91 1d       	adc	r25, r1
 f50:	a1 1d       	adc	r26, r1
 f52:	6a 0f       	add	r22, r26
 f54:	71 1d       	adc	r23, r1
 f56:	81 1d       	adc	r24, r1
 f58:	91 1d       	adc	r25, r1
 f5a:	a1 1d       	adc	r26, r1
 f5c:	20 d0       	rcall	.+64     	; 0xf9e <__ultoa_invert+0x84>
 f5e:	09 f4       	brne	.+2      	; 0xf62 <__ultoa_invert+0x48>
 f60:	68 94       	set
 f62:	3f 91       	pop	r19
 f64:	2a e0       	ldi	r18, 0x0A	; 10
 f66:	26 9f       	mul	r18, r22
 f68:	11 24       	eor	r1, r1
 f6a:	30 19       	sub	r19, r0
 f6c:	30 5d       	subi	r19, 0xD0	; 208
 f6e:	31 93       	st	Z+, r19
 f70:	de f6       	brtc	.-74     	; 0xf28 <__ultoa_invert+0xe>
 f72:	cf 01       	movw	r24, r30
 f74:	08 95       	ret
 f76:	46 2f       	mov	r20, r22
 f78:	47 70       	andi	r20, 0x07	; 7
 f7a:	40 5d       	subi	r20, 0xD0	; 208
 f7c:	41 93       	st	Z+, r20
 f7e:	b3 e0       	ldi	r27, 0x03	; 3
 f80:	0f d0       	rcall	.+30     	; 0xfa0 <__ultoa_invert+0x86>
 f82:	c9 f7       	brne	.-14     	; 0xf76 <__ultoa_invert+0x5c>
 f84:	f6 cf       	rjmp	.-20     	; 0xf72 <__ultoa_invert+0x58>
 f86:	46 2f       	mov	r20, r22
 f88:	4f 70       	andi	r20, 0x0F	; 15
 f8a:	40 5d       	subi	r20, 0xD0	; 208
 f8c:	4a 33       	cpi	r20, 0x3A	; 58
 f8e:	18 f0       	brcs	.+6      	; 0xf96 <__ultoa_invert+0x7c>
 f90:	49 5d       	subi	r20, 0xD9	; 217
 f92:	31 fd       	sbrc	r19, 1
 f94:	40 52       	subi	r20, 0x20	; 32
 f96:	41 93       	st	Z+, r20
 f98:	02 d0       	rcall	.+4      	; 0xf9e <__ultoa_invert+0x84>
 f9a:	a9 f7       	brne	.-22     	; 0xf86 <__ultoa_invert+0x6c>
 f9c:	ea cf       	rjmp	.-44     	; 0xf72 <__ultoa_invert+0x58>
 f9e:	b4 e0       	ldi	r27, 0x04	; 4
 fa0:	a6 95       	lsr	r26
 fa2:	97 95       	ror	r25
 fa4:	87 95       	ror	r24
 fa6:	77 95       	ror	r23
 fa8:	67 95       	ror	r22
 faa:	ba 95       	dec	r27
 fac:	c9 f7       	brne	.-14     	; 0xfa0 <__ultoa_invert+0x86>
 fae:	00 97       	sbiw	r24, 0x00	; 0
 fb0:	61 05       	cpc	r22, r1
 fb2:	71 05       	cpc	r23, r1
 fb4:	08 95       	ret
 fb6:	9b 01       	movw	r18, r22
 fb8:	ac 01       	movw	r20, r24
 fba:	0a 2e       	mov	r0, r26
 fbc:	06 94       	lsr	r0
 fbe:	57 95       	ror	r21
 fc0:	47 95       	ror	r20
 fc2:	37 95       	ror	r19
 fc4:	27 95       	ror	r18
 fc6:	ba 95       	dec	r27
 fc8:	c9 f7       	brne	.-14     	; 0xfbc <__ultoa_invert+0xa2>
 fca:	62 0f       	add	r22, r18
 fcc:	73 1f       	adc	r23, r19
 fce:	84 1f       	adc	r24, r20
 fd0:	95 1f       	adc	r25, r21
 fd2:	a0 1d       	adc	r26, r0
 fd4:	08 95       	ret

00000fd6 <_exit>:
 fd6:	f8 94       	cli

00000fd8 <__stop_program>:
 fd8:	ff cf       	rjmp	.-2      	; 0xfd8 <__stop_program>
