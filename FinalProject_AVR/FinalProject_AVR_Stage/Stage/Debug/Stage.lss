
Stage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00000da4  00000e38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000da4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008c  0080014c  0080014c  00000e84  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ee0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011cf  00000000  00000000  00000ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa0  00000000  00000000  000021bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000855  00000000  00000000  00002c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000270  00000000  00000000  000034b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c4  00000000  00000000  00003724  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005d7  00000000  00000000  00003de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000043bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	8c c0       	rjmp	.+280    	; 0x15a <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	61 c0       	rjmp	.+194    	; 0x10c <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ea       	ldi	r30, 0xA4	; 164
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 34       	cpi	r26, 0x4C	; 76
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e4       	ldi	r26, 0x4C	; 76
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 3d       	cpi	r26, 0xD8	; 216
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	94 d1       	rcall	.+808    	; 0x3ec <main>
  c4:	6d c6       	rjmp	.+3290   	; 0xda0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_timer0>:
FILE OUTPUT = FDEV_SETUP_STREAM(UART0_transmit, NULL, _FDEV_SETUP_WRITE);
FILE INPUT = FDEV_SETUP_STREAM(NULL, UART0_receive, _FDEV_SETUP_READ);

void init_timer0(void)
{
	TCCR0 |= (1 << CS02) | (1 << CS01) | (1 << CS00);
  c8:	83 b7       	in	r24, 0x33	; 51
  ca:	87 60       	ori	r24, 0x07	; 7
  cc:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);
  ce:	87 b7       	in	r24, 0x37	; 55
  d0:	81 60       	ori	r24, 0x01	; 1
  d2:	87 bf       	out	0x37, r24	; 55
  d4:	08 95       	ret

000000d6 <init_timer1>:
}

void init_timer1(void)
{
	TCCR1A |= (1 << WGM11);
  d6:	8f b5       	in	r24, 0x2f	; 47
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12) | (1 << WGM13);
  dc:	8e b5       	in	r24, 0x2e	; 46
  de:	88 61       	ori	r24, 0x18	; 24
  e0:	8e bd       	out	0x2e, r24	; 46
	
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1);
  e2:	8f b5       	in	r24, 0x2f	; 47
  e4:	88 6a       	ori	r24, 0xA8	; 168
  e6:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << CS11);
  e8:	8e b5       	in	r24, 0x2e	; 46
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 39999;
  ee:	8f e3       	ldi	r24, 0x3F	; 63
  f0:	9c e9       	ldi	r25, 0x9C	; 156
  f2:	97 bd       	out	0x27, r25	; 39
  f4:	86 bd       	out	0x26, r24	; 38
	
	OCR1A = 1000;
  f6:	28 ee       	ldi	r18, 0xE8	; 232
  f8:	33 e0       	ldi	r19, 0x03	; 3
  fa:	3b bd       	out	0x2b, r19	; 43
  fc:	2a bd       	out	0x2a, r18	; 42
	OCR1B = 39999;
  fe:	99 bd       	out	0x29, r25	; 41
 100:	88 bd       	out	0x28, r24	; 40
	OCR1C = 39999;
 102:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 106:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 10a:	08 95       	ret

0000010c <__vector_18>:
}

ISR(USART0_RX_vect)
{
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	0b b6       	in	r0, 0x3b	; 59
 118:	0f 92       	push	r0
 11a:	2f 93       	push	r18
 11c:	3f 93       	push	r19
 11e:	4f 93       	push	r20
 120:	5f 93       	push	r21
 122:	6f 93       	push	r22
 124:	7f 93       	push	r23
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
 12a:	af 93       	push	r26
 12c:	bf 93       	push	r27
 12e:	ef 93       	push	r30
 130:	ff 93       	push	r31
	UART0_ISR_Receive();
 132:	fb d2       	rcall	.+1526   	; 0x72a <UART0_ISR_Receive>
}
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	bf 91       	pop	r27
 13a:	af 91       	pop	r26
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	7f 91       	pop	r23
 142:	6f 91       	pop	r22
 144:	5f 91       	pop	r21
 146:	4f 91       	pop	r20
 148:	3f 91       	pop	r19
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	0b be       	out	0x3b, r0	; 59
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
	delay++;
 168:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <delay>
 16c:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <delay+0x1>
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <delay+0x1>
 176:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <delay>
}
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <Update_Value>:

void Update_Value(void) 
{
	value[0]	 = Seqeunce;
 188:	e6 e1       	ldi	r30, 0x16	; 22
 18a:	f1 e0       	ldi	r31, 0x01	; 1
 18c:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <Seqeunce>
 190:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <Seqeunce+0x1>
 194:	91 83       	std	Z+1, r25	; 0x01
 196:	80 83       	st	Z, r24
	value[1]	 = (PINE&0x01) == 0;
 198:	91 b1       	in	r25, 0x01	; 1
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	98 27       	eor	r25, r24
 19e:	91 70       	andi	r25, 0x01	; 1
 1a0:	92 83       	std	Z+2, r25	; 0x02
 1a2:	13 82       	std	Z+3, r1	; 0x03
	value[2]	 = (PINE&0x02) == 0;
 1a4:	91 b1       	in	r25, 0x01	; 1
 1a6:	96 95       	lsr	r25
 1a8:	98 27       	eor	r25, r24
 1aa:	91 70       	andi	r25, 0x01	; 1
 1ac:	94 83       	std	Z+4, r25	; 0x04
 1ae:	15 82       	std	Z+5, r1	; 0x05
	value[3]	 = (PINE&0x04) == 0;
 1b0:	91 b1       	in	r25, 0x01	; 1
 1b2:	96 95       	lsr	r25
 1b4:	96 95       	lsr	r25
 1b6:	98 27       	eor	r25, r24
 1b8:	91 70       	andi	r25, 0x01	; 1
 1ba:	96 83       	std	Z+6, r25	; 0x06
 1bc:	17 82       	std	Z+7, r1	; 0x07
	value[4]	 = (PINE&0x08) == 0;
 1be:	91 b1       	in	r25, 0x01	; 1
 1c0:	96 95       	lsr	r25
 1c2:	96 95       	lsr	r25
 1c4:	96 95       	lsr	r25
 1c6:	98 27       	eor	r25, r24
 1c8:	91 70       	andi	r25, 0x01	; 1
 1ca:	90 87       	std	Z+8, r25	; 0x08
 1cc:	11 86       	std	Z+9, r1	; 0x09
	value[5]	 = (PINE&0x10) == 0;
 1ce:	91 b1       	in	r25, 0x01	; 1
 1d0:	92 95       	swap	r25
 1d2:	9f 70       	andi	r25, 0x0F	; 15
 1d4:	89 27       	eor	r24, r25
 1d6:	81 70       	andi	r24, 0x01	; 1
 1d8:	82 87       	std	Z+10, r24	; 0x0a
 1da:	13 86       	std	Z+11, r1	; 0x0b
	// TODO : 모터 출력 1,0으로 나오게 하는 연산이 이 연산식이 맞는지 확인 Value 6, 7
	value[6]	 = ((Motor_Port & Motor_Conv_Drop1) | (Motor_Port & Motor_Conv_Drop2))
 1dc:	88 b3       	in	r24, 0x18	; 24
 1de:	98 b3       	in	r25, 0x18	; 24
 1e0:	92 70       	andi	r25, 0x02	; 2
 1e2:	81 70       	andi	r24, 0x01	; 1
 1e4:	89 2b       	or	r24, r25
 1e6:	21 e0       	ldi	r18, 0x01	; 1
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	11 f0       	breq	.+4      	; 0x1f2 <Update_Value+0x6a>
 1ee:	20 e0       	ldi	r18, 0x00	; 0
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	30 93 23 01 	sts	0x0123, r19	; 0x800123 <value+0xd>
 1f6:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <value+0xc>
					== Motor_Conv_Drop1;
	value[7]	 = ((Motor_Port & Motor_Conv_Pick1) | (Motor_Port & Motor_Conv_Pick2))
 1fa:	88 b3       	in	r24, 0x18	; 24
 1fc:	98 b3       	in	r25, 0x18	; 24
 1fe:	98 70       	andi	r25, 0x08	; 8
 200:	84 70       	andi	r24, 0x04	; 4
 202:	89 2b       	or	r24, r25
 204:	21 e0       	ldi	r18, 0x01	; 1
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	84 30       	cpi	r24, 0x04	; 4
 20a:	11 f0       	breq	.+4      	; 0x210 <Update_Value+0x88>
 20c:	20 e0       	ldi	r18, 0x00	; 0
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	30 93 25 01 	sts	0x0125, r19	; 0x800125 <value+0xf>
 214:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <value+0xe>
					== Motor_Conv_Pick1;
	
	value[8]	 = Drop_ready;
 218:	e6 e1       	ldi	r30, 0x16	; 22
 21a:	f1 e0       	ldi	r31, 0x01	; 1
 21c:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <Drop_ready>
 220:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <Drop_ready+0x1>
 224:	91 8b       	std	Z+17, r25	; 0x11
 226:	80 8b       	std	Z+16, r24	; 0x10
	value[9]	 = Pick_ready;
 228:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <Pick_ready>
 22c:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <Pick_ready+0x1>
 230:	93 8b       	std	Z+19, r25	; 0x13
 232:	82 8b       	std	Z+18, r24	; 0x12
	value[10]	 = Motor_Stopper_open;
 234:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Motor_Stopper_open>
 238:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <Motor_Stopper_open+0x1>
 23c:	95 8b       	std	Z+21, r25	; 0x15
 23e:	84 8b       	std	Z+20, r24	; 0x14
 240:	08 95       	ret

00000242 <Send_Value>:
}
void Send_Value(void)
{	
 242:	cf 92       	push	r12
 244:	df 92       	push	r13
 246:	ef 92       	push	r14
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	08 e1       	ldi	r16, 0x18	; 24
 254:	11 e0       	ldi	r17, 0x01	; 1
	for (int i = 1 ; i < 11 ; i++)
 256:	c1 e0       	ldi	r28, 0x01	; 1
 258:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(i < 10) {
			sprintf(buffer, "%d,", value[i]);
 25a:	0f 2e       	mov	r0, r31
 25c:	fc e2       	ldi	r31, 0x2C	; 44
 25e:	cf 2e       	mov	r12, r31
 260:	f1 e0       	ldi	r31, 0x01	; 1
 262:	df 2e       	mov	r13, r31
 264:	f0 2d       	mov	r31, r0
 266:	0f 2e       	mov	r0, r31
 268:	fe e4       	ldi	r31, 0x4E	; 78
 26a:	ef 2e       	mov	r14, r31
 26c:	f1 e0       	ldi	r31, 0x01	; 1
 26e:	ff 2e       	mov	r15, r31
 270:	f0 2d       	mov	r31, r0
}
void Send_Value(void)
{	
	for (int i = 1 ; i < 11 ; i++)
	{
		if(i < 10) {
 272:	ca 30       	cpi	r28, 0x0A	; 10
 274:	d1 05       	cpc	r29, r1
 276:	9c f4       	brge	.+38     	; 0x29e <Send_Value+0x5c>
			sprintf(buffer, "%d,", value[i]);
 278:	f8 01       	movw	r30, r16
 27a:	81 81       	ldd	r24, Z+1	; 0x01
 27c:	8f 93       	push	r24
 27e:	80 81       	ld	r24, Z
 280:	8f 93       	push	r24
 282:	df 92       	push	r13
 284:	cf 92       	push	r12
 286:	ff 92       	push	r15
 288:	ef 92       	push	r14
 28a:	af d2       	rcall	.+1374   	; 0x7ea <sprintf>
			UART0_printf_string(buffer);
 28c:	c7 01       	movw	r24, r14
 28e:	37 d2       	rcall	.+1134   	; 0x6fe <UART0_printf_string>
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
 29c:	1c c0       	rjmp	.+56     	; 0x2d6 <Send_Value+0x94>
		}
		else if(i == 10) {
 29e:	ca 30       	cpi	r28, 0x0A	; 10
 2a0:	d1 05       	cpc	r29, r1
 2a2:	c9 f4       	brne	.+50     	; 0x2d6 <Send_Value+0x94>
			sprintf(buffer, "%d", value[i]);
 2a4:	e6 e1       	ldi	r30, 0x16	; 22
 2a6:	f1 e0       	ldi	r31, 0x01	; 1
 2a8:	85 89       	ldd	r24, Z+21	; 0x15
 2aa:	8f 93       	push	r24
 2ac:	84 89       	ldd	r24, Z+20	; 0x14
 2ae:	8f 93       	push	r24
 2b0:	80 e3       	ldi	r24, 0x30	; 48
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	9f 93       	push	r25
 2b6:	8f 93       	push	r24
 2b8:	8e e4       	ldi	r24, 0x4E	; 78
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	9f 93       	push	r25
 2be:	8f 93       	push	r24
 2c0:	94 d2       	rcall	.+1320   	; 0x7ea <sprintf>
			UART0_printf_string(buffer);
 2c2:	8e e4       	ldi	r24, 0x4E	; 78
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	1b d2       	rcall	.+1078   	; 0x6fe <UART0_printf_string>
 2c8:	0f 90       	pop	r0
 2ca:	0f 90       	pop	r0
 2cc:	0f 90       	pop	r0
 2ce:	0f 90       	pop	r0
 2d0:	0f 90       	pop	r0
 2d2:	0f 90       	pop	r0
 2d4:	06 c0       	rjmp	.+12     	; 0x2e2 <Send_Value+0xa0>
 2d6:	21 96       	adiw	r28, 0x01	; 1
	value[9]	 = Pick_ready;
	value[10]	 = Motor_Stopper_open;
}
void Send_Value(void)
{	
	for (int i = 1 ; i < 11 ; i++)
 2d8:	0e 5f       	subi	r16, 0xFE	; 254
 2da:	1f 4f       	sbci	r17, 0xFF	; 255
 2dc:	cb 30       	cpi	r28, 0x0B	; 11
 2de:	d1 05       	cpc	r29, r1
 2e0:	41 f6       	brne	.-112    	; 0x272 <Send_Value+0x30>
		else if(i == 10) {
			sprintf(buffer, "%d", value[i]);
			UART0_printf_string(buffer);
		}
	}
	UART0_printf_string("\n\r");
 2e2:	83 e3       	ldi	r24, 0x33	; 51
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	0b d2       	rcall	.+1046   	; 0x6fe <UART0_printf_string>
 2e8:	df 91       	pop	r29
}
 2ea:	cf 91       	pop	r28
 2ec:	1f 91       	pop	r17
 2ee:	0f 91       	pop	r16
 2f0:	ff 90       	pop	r15
 2f2:	ef 90       	pop	r14
 2f4:	df 90       	pop	r13
 2f6:	cf 90       	pop	r12
 2f8:	08 95       	ret

000002fa <Send_Event_Value>:
 2fa:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <cnt_event+0x1>

void Send_Event_Value(void)
{
	sprintf(buffer, "e%2d,", cnt_event);
 2fe:	8f 93       	push	r24
 300:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <cnt_event>
 304:	8f 93       	push	r24
 306:	86 e3       	ldi	r24, 0x36	; 54
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	9f 93       	push	r25
 30c:	8f 93       	push	r24
 30e:	8e e4       	ldi	r24, 0x4E	; 78
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	9f 93       	push	r25
 314:	8f 93       	push	r24
 316:	69 d2       	rcall	.+1234   	; 0x7ea <sprintf>
	UART0_printf_string(buffer);
 318:	8e e4       	ldi	r24, 0x4E	; 78
 31a:	91 e0       	ldi	r25, 0x01	; 1
	Send_Value();
 31c:	f0 d1       	rcall	.+992    	; 0x6fe <UART0_printf_string>
 31e:	91 df       	rcall	.-222    	; 0x242 <Send_Value>
	cnt_event++;
 320:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <cnt_event>
 324:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <cnt_event+0x1>
 328:	01 96       	adiw	r24, 0x01	; 1
	if(cnt_event >= 100)
 32a:	0f 90       	pop	r0
 32c:	0f 90       	pop	r0
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	0f 90       	pop	r0
 334:	0f 90       	pop	r0
 336:	84 36       	cpi	r24, 0x64	; 100
 338:	91 05       	cpc	r25, r1
 33a:	2c f4       	brge	.+10     	; 0x346 <Send_Event_Value+0x4c>
void Send_Event_Value(void)
{
	sprintf(buffer, "e%2d,", cnt_event);
	UART0_printf_string(buffer);
	Send_Value();
	cnt_event++;
 33c:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <cnt_event+0x1>
 340:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <cnt_event>
 344:	08 95       	ret
	if(cnt_event >= 100)
	{
		cnt_event = 0;
 346:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <cnt_event+0x1>
 34a:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <cnt_event>
 34e:	08 95       	ret

00000350 <Diff_Value>:
	}
	return;
}

int Diff_Value(int ary1[], int ary2[]) 
{	
 350:	fc 01       	movw	r30, r24
 352:	3c 96       	adiw	r30, 0x0c	; 12
 354:	db 01       	movw	r26, r22
 356:	1c 96       	adiw	r26, 0x0c	; 12
 358:	46 96       	adiw	r24, 0x16	; 22
	int count = 0;
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	70 e0       	ldi	r23, 0x00	; 0
	
	for(int i = 6; i < 11; i++) 
	{
		if(ary1[i] != ary2[i])
 35e:	41 91       	ld	r20, Z+
 360:	51 91       	ld	r21, Z+
 362:	2d 91       	ld	r18, X+
 364:	3d 91       	ld	r19, X+
 366:	42 17       	cp	r20, r18
 368:	53 07       	cpc	r21, r19
 36a:	11 f0       	breq	.+4      	; 0x370 <Diff_Value+0x20>
		{
			count++;
 36c:	6f 5f       	subi	r22, 0xFF	; 255
 36e:	7f 4f       	sbci	r23, 0xFF	; 255

int Diff_Value(int ary1[], int ary2[]) 
{	
	int count = 0;
	
	for(int i = 6; i < 11; i++) 
 370:	e8 17       	cp	r30, r24
 372:	f9 07       	cpc	r31, r25
 374:	a1 f7       	brne	.-24     	; 0x35e <Diff_Value+0xe>
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	67 2b       	or	r22, r23
 37c:	11 f4       	brne	.+4      	; 0x382 <Diff_Value+0x32>
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	90 e0       	ldi	r25, 0x00	; 0
	}
	else 
	{
		return 0;
	}
}
 382:	08 95       	ret

00000384 <Check_Pickable>:

int Check_Pickable(void)
{
	if ((Sensor_Port & Sensor_Pick_stage) == Sensor_Pick_stage	// pick stage에 물건 x
 384:	0b 99       	sbic	0x01, 3	; 1
 386:	0f c0       	rjmp	.+30     	; 0x3a6 <Check_Pickable+0x22>
		|| (Sensor_Port & Sensor_Pick_AGV) == 0					// pick stage에 agv o
 388:	0c 9b       	sbis	0x01, 4	; 1
 38a:	10 c0       	rjmp	.+32     	; 0x3ac <Check_Pickable+0x28>
		|| (Motor_Port & Motor_Conv_Pick1) == Motor_Conv_Pick1	// motor가 돌고있으면
 38c:	c2 99       	sbic	0x18, 2	; 24
 38e:	11 c0       	rjmp	.+34     	; 0x3b2 <Check_Pickable+0x2e>
		|| Motor_Stopper_open == 1)								// stopper가 열려있으면						// agv의 위치가 pick stage가 아니면
	{
		return 0;
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <Motor_Stopper_open>
 398:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <Motor_Stopper_open+0x1>
 39c:	21 30       	cpi	r18, 0x01	; 1
 39e:	31 05       	cpc	r19, r1
 3a0:	51 f4       	brne	.+20     	; 0x3b6 <Check_Pickable+0x32>
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	08 95       	ret
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	08 95       	ret
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	08 95       	ret
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		return 1;
	}
}
 3b6:	08 95       	ret

000003b8 <Check_Dropable>:
int Check_Dropable(void)
{
	if ((Sensor_Port & Sensor_Drop_stage) == 0					// drop stage에 물건 o
 3b8:	08 9b       	sbis	0x01, 0	; 1
 3ba:	0f c0       	rjmp	.+30     	; 0x3da <Check_Dropable+0x22>
		|| (Sensor_Port & Sensor_Drop_AGV) == Sensor_Drop_AGV	// drop stage에 agv x
 3bc:	08 99       	sbic	0x01, 0	; 1
 3be:	10 c0       	rjmp	.+32     	; 0x3e0 <Check_Dropable+0x28>
		|| (Motor_Port & Motor_Conv_Drop1) == Motor_Conv_Drop1	// motor가 돌고있으면
 3c0:	c0 99       	sbic	0x18, 0	; 24
 3c2:	11 c0       	rjmp	.+34     	; 0x3e6 <Check_Dropable+0x2e>
		|| Motor_Stopper_open == 1)								// stopper가 열려있으면
	{
		return 0;
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <Motor_Stopper_open>
 3cc:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <Motor_Stopper_open+0x1>
 3d0:	21 30       	cpi	r18, 0x01	; 1
 3d2:	31 05       	cpc	r19, r1
 3d4:	51 f4       	brne	.+20     	; 0x3ea <Check_Dropable+0x32>
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	08 95       	ret
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	08 95       	ret
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	08 95       	ret
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		return 1;
	}
}
 3ea:	08 95       	ret

000003ec <main>:
	//UART0_printf_string(buffer);
//}

int main(void)
{		
	DDRB |= (1 << PORTB0) | (1 << PORTB1) | (1 << PORTB2) | (1 << PORTB3);
 3ec:	87 b3       	in	r24, 0x17	; 23
 3ee:	8f 60       	ori	r24, 0x0F	; 15
 3f0:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1 << PORTB5) | (1 << PORTB6) | (1 << PORTB7);
 3f2:	87 b3       	in	r24, 0x17	; 23
 3f4:	80 6e       	ori	r24, 0xE0	; 224
 3f6:	87 bb       	out	0x17, r24	; 23
	
	uint8_t *receiveData;
	
	UART0_Init();
 3f8:	71 d1       	rcall	.+738    	; 0x6dc <UART0_Init>
	init_timer0();
 3fa:	66 de       	rcall	.-820    	; 0xc8 <init_timer0>
	init_timer1();
 3fc:	6c de       	rcall	.-808    	; 0xd6 <init_timer1>
 3fe:	78 94       	sei
	
	sei();
 400:	ee 24       	eor	r14, r14
			}
			ptr_cnt = 0;
			
			if(strncmp(cmd,"auto",4) == 0)
			{
				Flag_AutoMode = 1;
 402:	e3 94       	inc	r14
 404:	f1 2c       	mov	r15, r1
 406:	0c e2       	ldi	r16, 0x2C	; 44
 408:	11 e0       	ldi	r17, 0x01	; 1
 40a:	0f 2e       	mov	r0, r31
			break;
			
			case 3:		//Pick stage로 보내기 전에 확인(제품, AGV X)
				if((Sensor_Port & Sensor_Pick_stage) == 0x00 && (Sensor_Port & Sensor_Pick_AGV) == 0x00)
				{
					Seqeunce = 10;
 40c:	fa e0       	ldi	r31, 0x0A	; 10
 40e:	6f 2e       	mov	r6, r31
 410:	71 2c       	mov	r7, r1
 412:	f0 2d       	mov	r31, r0
 414:	0f 2e       	mov	r0, r31
					//buffer에 제품 없어짐, Drop Conv 정지, Stopper close
					if (delay >= Delay_Conv)
					{
						Motor_Port &= ~Motor_Conv_Drop1;
						
						Motor_Stopper = Pos_Stopper_Close;
 416:	f8 ee       	ldi	r31, 0xE8	; 232
 418:	8f 2e       	mov	r8, r31
 41a:	f3 e0       	ldi	r31, 0x03	; 3
 41c:	9f 2e       	mov	r9, r31
 41e:	f0 2d       	mov	r31, r0
 420:	0f 2e       	mov	r0, r31
				}
				else if((Sensor_Port & Sensor_Pick_stage) == Sensor_Pick_stage)
				{
					//pick stage 제품 도착 완료, Pick Conv 정지
					Motor_Port &= ~Motor_Conv_Pick1;
					Seqeunce = 100;
 422:	f4 e6       	ldi	r31, 0x64	; 100
 424:	af 2e       	mov	r10, r31
 426:	b1 2c       	mov	r11, r1
 428:	f0 2d       	mov	r31, r0
 42a:	0f 2e       	mov	r0, r31
					delay = 0;
				}
			break;
			
			case 10:	//Stopper open
				Motor_Stopper = Pos_Stopper_Open;
 42c:	f8 eb       	ldi	r31, 0xB8	; 184
 42e:	cf 2e       	mov	r12, r31
 430:	fb e0       	ldi	r31, 0x0B	; 11
 432:	df 2e       	mov	r13, r31
 434:	f0 2d       	mov	r31, r0
	
	while(1)
	{
		/////////////////////////////////////////////////////////////////////////////
		//MES에서 현재 AGV 위치 보내줌(Pick/Drop Stage일 경우)		
		if (isRxString())    // PC로 부터 수신된 Data가 존재 하는지 확인 있으면 아래를 수행 한다.
 436:	71 d1       	rcall	.+738    	; 0x71a <isRxString>
 438:	88 23       	and	r24, r24
 43a:	09 f4       	brne	.+2      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43c:	77 c0       	rjmp	.+238    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		{
			receiveData = getRxString();
 43e:	70 d1       	rcall	.+736    	; 0x720 <getRxString>
 440:	6e e2       	ldi	r22, 0x2E	; 46
			
			ptr_receiveData = strtok(receiveData, ",");
 442:	71 e0       	ldi	r23, 0x01	; 1
 444:	9a d1       	rcall	.+820    	; 0x77a <strtok>
 446:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <ptr_receiveData+0x1>
 44a:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <ptr_receiveData>
 44e:	00 97       	sbiw	r24, 0x00	; 0
 450:	41 f1       	breq	.+80     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
			while(ptr_receiveData != NULL) {
 452:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <ptr_cnt>
				if(ptr_cnt == 0) {
 456:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <ptr_cnt+0x1>
 45a:	21 15       	cp	r18, r1
 45c:	31 05       	cpc	r19, r1
 45e:	29 f4       	brne	.+10     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 460:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <cnt+0x1>
					cnt = ptr_receiveData;
 464:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <cnt>
 468:	07 c0       	rjmp	.+14     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 46a:	21 30       	cpi	r18, 0x01	; 1
 46c:	31 05       	cpc	r19, r1
				}
				else if(ptr_cnt == 1) {
 46e:	21 f4       	brne	.+8      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 470:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <cmd+0x1>
					cmd = ptr_receiveData;
 474:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <cmd>
 478:	6e e2       	ldi	r22, 0x2E	; 46
				}
				ptr_receiveData = strtok(NULL, ",");
 47a:	71 e0       	ldi	r23, 0x01	; 1
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	7c d1       	rcall	.+760    	; 0x77a <strtok>
 482:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <ptr_receiveData+0x1>
 486:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <ptr_receiveData>
 48a:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <ptr_cnt>
				ptr_cnt++;
 48e:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <ptr_cnt+0x1>
 492:	2f 5f       	subi	r18, 0xFF	; 255
 494:	3f 4f       	sbci	r19, 0xFF	; 255
 496:	30 93 83 01 	sts	0x0183, r19	; 0x800183 <ptr_cnt+0x1>
 49a:	20 93 82 01 	sts	0x0182, r18	; 0x800182 <ptr_cnt>
 49e:	00 97       	sbiw	r24, 0x00	; 0
 4a0:	c1 f6       	brne	.-80     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
		if (isRxString())    // PC로 부터 수신된 Data가 존재 하는지 확인 있으면 아래를 수행 한다.
		{
			receiveData = getRxString();
			
			ptr_receiveData = strtok(receiveData, ",");
			while(ptr_receiveData != NULL) {
 4a2:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <ptr_cnt+0x1>
					cmd = ptr_receiveData;
				}
				ptr_receiveData = strtok(NULL, ",");
				ptr_cnt++;
			}
			ptr_cnt = 0;
 4a6:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <ptr_cnt>
 4aa:	c0 91 d6 01 	lds	r28, 0x01D6	; 0x8001d6 <cmd>
			
			if(strncmp(cmd,"auto",4) == 0)
 4ae:	d0 91 d7 01 	lds	r29, 0x01D7	; 0x8001d7 <cmd+0x1>
 4b2:	44 e0       	ldi	r20, 0x04	; 4
 4b4:	50 e0       	ldi	r21, 0x00	; 0
 4b6:	6c e3       	ldi	r22, 0x3C	; 60
 4b8:	71 e0       	ldi	r23, 0x01	; 1
 4ba:	ce 01       	movw	r24, r28
 4bc:	61 d1       	rcall	.+706    	; 0x780 <strncmp>
 4be:	89 2b       	or	r24, r25
 4c0:	71 f4       	brne	.+28     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4c2:	f0 92 8f 01 	sts	0x018F, r15	; 0x80018f <Flag_AutoMode+0x1>
			{
				Flag_AutoMode = 1;
 4c6:	e0 92 8e 01 	sts	0x018E, r14	; 0x80018e <Flag_AutoMode>
 4ca:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <cnt>
				UART0_printf_string(cnt);
 4ce:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <cnt+0x1>
 4d2:	15 d1       	rcall	.+554    	; 0x6fe <UART0_printf_string>
 4d4:	8e e2       	ldi	r24, 0x2E	; 46
				UART0_printf_string(",");
 4d6:	91 e0       	ldi	r25, 0x01	; 1
 4d8:	12 d1       	rcall	.+548    	; 0x6fe <UART0_printf_string>
 4da:	b3 de       	rcall	.-666    	; 0x242 <Send_Value>
				Send_Value();
 4dc:	27 c0       	rjmp	.+78     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 4de:	44 e0       	ldi	r20, 0x04	; 4
 4e0:	50 e0       	ldi	r21, 0x00	; 0
			}
			else if(strncmp(cmd,"manu",4) == 0)
 4e2:	61 e4       	ldi	r22, 0x41	; 65
 4e4:	71 e0       	ldi	r23, 0x01	; 1
 4e6:	ce 01       	movw	r24, r28
 4e8:	4b d1       	rcall	.+662    	; 0x780 <strncmp>
 4ea:	89 2b       	or	r24, r25
 4ec:	71 f4       	brne	.+28     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 4ee:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <Flag_AutoMode+0x1>
			{
				Flag_AutoMode = 0;
 4f2:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <Flag_AutoMode>
 4f6:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <cnt>
				UART0_printf_string(cnt);
 4fa:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <cnt+0x1>
 4fe:	ff d0       	rcall	.+510    	; 0x6fe <UART0_printf_string>
 500:	8e e2       	ldi	r24, 0x2E	; 46
				UART0_printf_string(",");
 502:	91 e0       	ldi	r25, 0x01	; 1
 504:	fc d0       	rcall	.+504    	; 0x6fe <UART0_printf_string>
 506:	9d de       	rcall	.-710    	; 0x242 <Send_Value>
 508:	11 c0       	rjmp	.+34     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
				Send_Value();
 50a:	44 e0       	ldi	r20, 0x04	; 4
 50c:	50 e0       	ldi	r21, 0x00	; 0
			}
			else if(strncmp(cmd, "stat", 4) == 0)
 50e:	66 e4       	ldi	r22, 0x46	; 70
 510:	71 e0       	ldi	r23, 0x01	; 1
 512:	ce 01       	movw	r24, r28
 514:	35 d1       	rcall	.+618    	; 0x780 <strncmp>
 516:	89 2b       	or	r24, r25
 518:	49 f4       	brne	.+18     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
			{
				UART0_printf_string(cnt);
 51a:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <cnt>
 51e:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <cnt+0x1>
 522:	ed d0       	rcall	.+474    	; 0x6fe <UART0_printf_string>
 524:	8e e2       	ldi	r24, 0x2E	; 46
				UART0_printf_string(",");
 526:	91 e0       	ldi	r25, 0x01	; 1
 528:	ea d0       	rcall	.+468    	; 0x6fe <UART0_printf_string>
 52a:	8b de       	rcall	.-746    	; 0x242 <Send_Value>
				Send_Value();
 52c:	2d de       	rcall	.-934    	; 0x188 <Update_Value>
 52e:	60 e0       	ldi	r22, 0x00	; 0
			}
		}
		/////////////////////////////////////////////////////////////////////////////
		// MES에 보내는 데이터 값 상시 업데이트
		Update_Value();		
 530:	71 e0       	ldi	r23, 0x01	; 1
 532:	86 e1       	ldi	r24, 0x16	; 22
		
		/////////////////////////////////////////////////////////////////////////////
		// 데이터 값이 변할 시 Event 값으로 MES로 전송
		if(Diff_Value(value, comp_value) == 1)
 534:	91 e0       	ldi	r25, 0x01	; 1
 536:	0c df       	rcall	.-488    	; 0x350 <Diff_Value>
 538:	01 97       	sbiw	r24, 0x01	; 1
 53a:	81 f4       	brne	.+32     	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
 53c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
 540:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__DATA_REGION_ORIGIN__+0xd>
		{
			if(comp_value[6] != -1)		// 초기 부팅 시 제외
 544:	01 96       	adiw	r24, 0x01	; 1
 546:	09 f4       	brne	.+2      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 548:	c4 c0       	rjmp	.+392    	; 0x6d2 <__LOCK_REGION_LENGTH__+0x2d2>
 54a:	d7 de       	rcall	.-594    	; 0x2fa <Send_Event_Value>
 54c:	c2 c0       	rjmp	.+388    	; 0x6d2 <__LOCK_REGION_LENGTH__+0x2d2>
			{
				Send_Event_Value();
 54e:	81 91       	ld	r24, Z+
 550:	91 91       	ld	r25, Z+
 552:	8d 93       	st	X+, r24
			}
			for(int i = 6; i < VALUE_SIZE; i++)
			{
				comp_value[i] = value[i];
 554:	9d 93       	st	X+, r25
 556:	e0 17       	cp	r30, r16
 558:	f1 07       	cpc	r31, r17
 55a:	c9 f7       	brne	.-14     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
		{
			if(comp_value[6] != -1)		// 초기 부팅 시 제외
			{
				Send_Event_Value();
			}
			for(int i = 6; i < VALUE_SIZE; i++)
 55c:	13 df       	rcall	.-474    	; 0x384 <Check_Pickable>
 55e:	89 2b       	or	r24, r25
 560:	21 f4       	brne	.+8      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
			}
		}
		
		/////////////////////////////////////////////////////////////////////////////
		// Pick, Drop ready 상태 초기화
		if (Check_Pickable() == 0)
 562:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <Pick_ready+0x1>
 566:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <Pick_ready>
		{
			Pick_ready = 0;
 56a:	26 df       	rcall	.-436    	; 0x3b8 <Check_Dropable>
 56c:	89 2b       	or	r24, r25
 56e:	21 f4       	brne	.+8      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
 570:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <Drop_ready+0x1>
		}
		if (Check_Dropable() == 0)
 574:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <Drop_ready>
 578:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <Seqeunce>
		{
			Drop_ready = 0;
 57c:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <Seqeunce+0x1>
 580:	83 30       	cpi	r24, 0x03	; 3
		}
				
		/////////////////////////////////////////////////////////////////////////////
		//Sequence		
		switch (Seqeunce)
 582:	91 05       	cpc	r25, r1
 584:	09 f4       	brne	.+2      	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 586:	45 c0       	rjmp	.+138    	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 588:	3c f4       	brge	.+14     	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 58a:	81 30       	cpi	r24, 0x01	; 1
 58c:	91 05       	cpc	r25, r1
 58e:	11 f1       	breq	.+68     	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
 590:	7c f5       	brge	.+94     	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 592:	89 2b       	or	r24, r25
 594:	99 f0       	breq	.+38     	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
 596:	4f cf       	rjmp	.-354    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 598:	8b 30       	cpi	r24, 0x0B	; 11
 59a:	91 05       	cpc	r25, r1
 59c:	09 f4       	brne	.+2      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 59e:	5e c0       	rjmp	.+188    	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
 5a0:	24 f4       	brge	.+8      	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
 5a2:	0a 97       	sbiw	r24, 0x0a	; 10
 5a4:	09 f4       	brne	.+2      	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
 5a6:	42 c0       	rjmp	.+132    	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
 5a8:	46 cf       	rjmp	.-372    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 5aa:	8c 30       	cpi	r24, 0x0C	; 12
 5ac:	91 05       	cpc	r25, r1
 5ae:	09 f4       	brne	.+2      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 5b0:	7d c0       	rjmp	.+250    	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
 5b2:	84 36       	cpi	r24, 0x64	; 100
 5b4:	91 05       	cpc	r25, r1
 5b6:	09 f4       	brne	.+2      	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 5b8:	83 c0       	rjmp	.+262    	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
 5ba:	3d cf       	rjmp	.-390    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 5bc:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <Flag_AutoMode>
 5c0:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <Flag_AutoMode+0x1>
		{
			case 0:		// seq start
				if (Flag_AutoMode == 1)
 5c4:	01 97       	sbiw	r24, 0x01	; 1
 5c6:	09 f0       	breq	.+2      	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
 5c8:	36 cf       	rjmp	.-404    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 5ca:	f0 92 87 01 	sts	0x0187, r15	; 0x800187 <Seqeunce+0x1>
 5ce:	e0 92 86 01 	sts	0x0186, r14	; 0x800186 <Seqeunce>
				{
					Seqeunce++;
 5d2:	31 cf       	rjmp	.-414    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 5d4:	f1 de       	rcall	.-542    	; 0x3b8 <Check_Dropable>
 5d6:	01 97       	sbiw	r24, 0x01	; 1
 5d8:	09 f0       	breq	.+2      	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
 5da:	2d cf       	rjmp	.-422    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
				}
			break;
			
			case 1:		//Drop stage에 제품이 있고, AGV가 없을 때
				if(Check_Dropable() == 1)
 5dc:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <Seqeunce>
 5e0:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <Seqeunce+0x1>
 5e4:	01 96       	adiw	r24, 0x01	; 1
				{
					Seqeunce++;
 5e6:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <Seqeunce+0x1>
 5ea:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <Seqeunce>
 5ee:	23 cf       	rjmp	.-442    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 5f0:	0a 99       	sbic	0x01, 2	; 1
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
 5f4:	c0 9a       	sbi	0x18, 0	; 24
 5f6:	1f cf       	rjmp	.-450    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 5f8:	0a 9b       	sbis	0x01, 2	; 1
				} 
			break;
			
			case 2:		// buffer sensor 들어올때까지 Drop Conv 구동
				if((Sensor_Port & Sensor_Buffer_stage) == 0x00)
 5fa:	1d cf       	rjmp	.-454    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 5fc:	c0 98       	cbi	0x18, 0	; 24
				{
					Motor_Port |= Motor_Conv_Drop1;
 5fe:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <Seqeunce>
				}
				else if((Sensor_Port & Sensor_Buffer_stage) == Sensor_Buffer_stage)
 602:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <Seqeunce+0x1>
				{
					Motor_Port &= ~Motor_Conv_Drop1;
 606:	01 96       	adiw	r24, 0x01	; 1
					Seqeunce++;
 608:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <Seqeunce+0x1>
 60c:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <Seqeunce>
 610:	12 cf       	rjmp	.-476    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 612:	0b 99       	sbic	0x01, 3	; 1
 614:	10 cf       	rjmp	.-480    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 616:	0c 99       	sbic	0x01, 4	; 1
 618:	0e cf       	rjmp	.-484    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 61a:	70 92 87 01 	sts	0x0187, r7	; 0x800187 <Seqeunce+0x1>
				}
			break;
			
			case 3:		//Pick stage로 보내기 전에 확인(제품, AGV X)
				if((Sensor_Port & Sensor_Pick_stage) == 0x00 && (Sensor_Port & Sensor_Pick_AGV) == 0x00)
 61e:	60 92 86 01 	sts	0x0186, r6	; 0x800186 <Seqeunce>
 622:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <delay+0x1>
				{
					Seqeunce = 10;
 626:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <delay>
 62a:	05 cf       	rjmp	.-502    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
					delay = 0;
 62c:	db bc       	out	0x2b, r13	; 43
 62e:	ca bc       	out	0x2a, r12	; 42
 630:	f0 92 89 01 	sts	0x0189, r15	; 0x800189 <Motor_Stopper_open+0x1>
 634:	e0 92 88 01 	sts	0x0188, r14	; 0x800188 <Motor_Stopper_open>
				}
			break;
			
			case 10:	//Stopper open
				Motor_Stopper = Pos_Stopper_Open;
 638:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <delay>
				Motor_Stopper_open = 1;
 63c:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <delay+0x1>
 640:	80 38       	cpi	r24, 0x80	; 128
				if(delay >= Delay_Stopper)
 642:	91 05       	cpc	r25, r1
 644:	0c f4       	brge	.+2      	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
 646:	f7 ce       	rjmp	.-530    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 648:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <Seqeunce>
 64c:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <Seqeunce+0x1>
 650:	01 96       	adiw	r24, 0x01	; 1
				{
					Seqeunce++;
 652:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <Seqeunce+0x1>
 656:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <Seqeunce>
 65a:	ed ce       	rjmp	.-550    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 65c:	0a 9b       	sbis	0x01, 2	; 1
 65e:	07 c0       	rjmp	.+14     	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
 660:	c0 9a       	sbi	0x18, 0	; 24
 662:	c2 9a       	sbi	0x18, 2	; 24
 664:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <delay+0x1>
				}
			break;
			
			case 11:		//Buffer stage에서 Pick stage로 제품 보내기
				if((Sensor_Port & Sensor_Buffer_stage) == Sensor_Buffer_stage)
 668:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <delay>
				{
					//buffer에 제품 있으므로 Drop, Pick Conv 계속 구동
					Motor_Port |= Motor_Conv_Drop1;
					Motor_Port |= Motor_Conv_Pick1;
 66c:	e4 ce       	rjmp	.-568    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
					delay = 0;
 66e:	0a 99       	sbic	0x01, 2	; 1
 670:	e2 ce       	rjmp	.-572    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 672:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <delay>
 676:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <delay+0x1>
				}
				else if((Sensor_Port & Sensor_Buffer_stage) == 0x00)
 67a:	80 34       	cpi	r24, 0x40	; 64
				{
					//buffer에 제품 없어짐, Drop Conv 정지, Stopper close
					if (delay >= Delay_Conv)
 67c:	91 05       	cpc	r25, r1
 67e:	0c f4       	brge	.+2      	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
 680:	da ce       	rjmp	.-588    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 682:	c0 98       	cbi	0x18, 0	; 24
 684:	9b bc       	out	0x2b, r9	; 43
 686:	8a bc       	out	0x2a, r8	; 42
 688:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <Motor_Stopper_open+0x1>
					{
						Motor_Port &= ~Motor_Conv_Drop1;
 68c:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <Motor_Stopper_open>
						
						Motor_Stopper = Pos_Stopper_Close;
 690:	f0 92 8d 01 	sts	0x018D, r15	; 0x80018d <Drop_ready+0x1>
						Motor_Stopper_open = 0;
 694:	e0 92 8c 01 	sts	0x018C, r14	; 0x80018c <Drop_ready>
 698:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <Seqeunce>
						Drop_ready = 1;
 69c:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <Seqeunce+0x1>
 6a0:	01 96       	adiw	r24, 0x01	; 1
						
						Seqeunce++;
 6a2:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <Seqeunce+0x1>
 6a6:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <Seqeunce>
 6aa:	c5 ce       	rjmp	.-630    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 6ac:	0b 9b       	sbis	0x01, 3	; 1
 6ae:	c3 ce       	rjmp	.-634    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 6b0:	0b 9b       	sbis	0x01, 3	; 1
 6b2:	c1 ce       	rjmp	.-638    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 6b4:	c2 98       	cbi	0x18, 2	; 24
					}
				}
			break;
			
			case 12:		//Pick stage 감지 후 Pick Conv 정지
				if((Sensor_Port & Sensor_Pick_stage) == 0x00)
 6b6:	b0 92 87 01 	sts	0x0187, r11	; 0x800187 <Seqeunce+0x1>
				{
					//pick stage에 제품 도착 안했으므로 Pick Conv 계속 구동
				}
				else if((Sensor_Port & Sensor_Pick_stage) == Sensor_Pick_stage)
 6ba:	a0 92 86 01 	sts	0x0186, r10	; 0x800186 <Seqeunce>
				{
					//pick stage 제품 도착 완료, Pick Conv 정지
					Motor_Port &= ~Motor_Conv_Pick1;
 6be:	bb ce       	rjmp	.-650    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
					Seqeunce = 100;
 6c0:	f0 92 8b 01 	sts	0x018B, r15	; 0x80018b <Pick_ready+0x1>
 6c4:	e0 92 8a 01 	sts	0x018A, r14	; 0x80018a <Pick_ready>
 6c8:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <Seqeunce+0x1>
				}
			break;
			
			case 100:		//pick ready
				Pick_ready = 1;
 6cc:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <Seqeunce>
 6d0:	b2 ce       	rjmp	.-668    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
				Seqeunce = 0;
 6d2:	e2 e2       	ldi	r30, 0x22	; 34
 6d4:	f1 e0       	ldi	r31, 0x01	; 1
 6d6:	ac e0       	ldi	r26, 0x0C	; 12
 6d8:	b1 e0       	ldi	r27, 0x01	; 1
			break;
 6da:	39 cf       	rjmp	.-398    	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>

000006dc <UART0_Init>:
 6dc:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 6e0:	8f ec       	ldi	r24, 0xCF	; 207
 6e2:	89 b9       	out	0x09, r24	; 9
 6e4:	59 9a       	sbi	0x0b, 1	; 11
   }
}
uint8_t isRxD()
{
   return (UCSR0A & (1<<7));
}
 6e6:	e5 e9       	ldi	r30, 0x95	; 149
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	80 81       	ld	r24, Z
 6ec:	86 60       	ori	r24, 0x06	; 6
 6ee:	80 83       	st	Z, r24
 6f0:	88 e9       	ldi	r24, 0x98	; 152
 6f2:	8a b9       	out	0x0a, r24	; 10
 6f4:	08 95       	ret

000006f6 <UART0_transmit>:
 6f6:	5d 9b       	sbis	0x0b, 5	; 11
 6f8:	fe cf       	rjmp	.-4      	; 0x6f6 <UART0_transmit>
 6fa:	8c b9       	out	0x0c, r24	; 12
 6fc:	08 95       	ret

000006fe <UART0_printf_string>:
 6fe:	cf 93       	push	r28
 700:	df 93       	push	r29
 702:	ec 01       	movw	r28, r24
 704:	88 81       	ld	r24, Y
 706:	88 23       	and	r24, r24
 708:	29 f0       	breq	.+10     	; 0x714 <UART0_printf_string+0x16>
 70a:	21 96       	adiw	r28, 0x01	; 1
 70c:	f4 df       	rcall	.-24     	; 0x6f6 <UART0_transmit>
 70e:	89 91       	ld	r24, Y+
 710:	81 11       	cpse	r24, r1
 712:	fc cf       	rjmp	.-8      	; 0x70c <UART0_printf_string+0xe>
 714:	df 91       	pop	r29
 716:	cf 91       	pop	r28
 718:	08 95       	ret

0000071a <isRxString>:

uint8_t isRxString()
{
   return rxReadyFlag;
 71a:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <rxReadyFlag>
}
 71e:	08 95       	ret

00000720 <getRxString>:

uint8_t* getRxString()
{
   rxReadyFlag = 0;
 720:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <rxReadyFlag>
   return rxString;
}
 724:	82 e9       	ldi	r24, 0x92	; 146
 726:	91 e0       	ldi	r25, 0x01	; 1
 728:	08 95       	ret

0000072a <UART0_ISR_Receive>:

void UART0_ISR_Receive()
{
 72a:	cf 93       	push	r28
 72c:	df 93       	push	r29
 72e:	1f 92       	push	r1
 730:	cd b7       	in	r28, 0x3d	; 61
 732:	de b7       	in	r29, 0x3e	; 62
   static uint8_t head=0;
   volatile uint8_t data;
   
   data = UDR0;
 734:	8c b1       	in	r24, 0x0c	; 12
 736:	89 83       	std	Y+1, r24	; 0x01
   if (data == '\n' || data == '\r')
 738:	89 81       	ldd	r24, Y+1	; 0x01
 73a:	8a 30       	cpi	r24, 0x0A	; 10
 73c:	19 f0       	breq	.+6      	; 0x744 <UART0_ISR_Receive+0x1a>
 73e:	89 81       	ldd	r24, Y+1	; 0x01
 740:	8d 30       	cpi	r24, 0x0D	; 13
 742:	61 f4       	brne	.+24     	; 0x75c <UART0_ISR_Receive+0x32>
   {
      rxString[head] = '\0';
 744:	e0 91 90 01 	lds	r30, 0x0190	; 0x800190 <head.1771>
 748:	f0 e0       	ldi	r31, 0x00	; 0
 74a:	ee 56       	subi	r30, 0x6E	; 110
 74c:	fe 4f       	sbci	r31, 0xFE	; 254
 74e:	10 82       	st	Z, r1
      head=0;
 750:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <head.1771>
      rxReadyFlag = 1;
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <rxReadyFlag>
 75a:	0b c0       	rjmp	.+22     	; 0x772 <UART0_ISR_Receive+0x48>
   }
   else
   {
      rxString[head] = data;
 75c:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <head.1771>
 760:	e8 2f       	mov	r30, r24
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	99 81       	ldd	r25, Y+1	; 0x01
 766:	ee 56       	subi	r30, 0x6E	; 110
 768:	fe 4f       	sbci	r31, 0xFE	; 254
 76a:	90 83       	st	Z, r25
      head++;
 76c:	8f 5f       	subi	r24, 0xFF	; 255
 76e:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <head.1771>
   }
 772:	0f 90       	pop	r0
 774:	df 91       	pop	r29
 776:	cf 91       	pop	r28
 778:	08 95       	ret

0000077a <strtok>:
 77a:	4c e4       	ldi	r20, 0x4C	; 76
 77c:	51 e0       	ldi	r21, 0x01	; 1
 77e:	0e c0       	rjmp	.+28     	; 0x79c <strtok_r>

00000780 <strncmp>:
 780:	fb 01       	movw	r30, r22
 782:	dc 01       	movw	r26, r24
 784:	41 50       	subi	r20, 0x01	; 1
 786:	50 40       	sbci	r21, 0x00	; 0
 788:	30 f0       	brcs	.+12     	; 0x796 <strncmp+0x16>
 78a:	8d 91       	ld	r24, X+
 78c:	01 90       	ld	r0, Z+
 78e:	80 19       	sub	r24, r0
 790:	19 f4       	brne	.+6      	; 0x798 <strncmp+0x18>
 792:	00 20       	and	r0, r0
 794:	b9 f7       	brne	.-18     	; 0x784 <strncmp+0x4>
 796:	88 1b       	sub	r24, r24
 798:	99 0b       	sbc	r25, r25
 79a:	08 95       	ret

0000079c <strtok_r>:
 79c:	fa 01       	movw	r30, r20
 79e:	a1 91       	ld	r26, Z+
 7a0:	b0 81       	ld	r27, Z
 7a2:	00 97       	sbiw	r24, 0x00	; 0
 7a4:	19 f4       	brne	.+6      	; 0x7ac <strtok_r+0x10>
 7a6:	10 97       	sbiw	r26, 0x00	; 0
 7a8:	e1 f0       	breq	.+56     	; 0x7e2 <strtok_r+0x46>
 7aa:	cd 01       	movw	r24, r26
 7ac:	dc 01       	movw	r26, r24
 7ae:	cd 01       	movw	r24, r26
 7b0:	0d 90       	ld	r0, X+
 7b2:	00 20       	and	r0, r0
 7b4:	11 f4       	brne	.+4      	; 0x7ba <strtok_r+0x1e>
 7b6:	c0 01       	movw	r24, r0
 7b8:	13 c0       	rjmp	.+38     	; 0x7e0 <strtok_r+0x44>
 7ba:	fb 01       	movw	r30, r22
 7bc:	21 91       	ld	r18, Z+
 7be:	22 23       	and	r18, r18
 7c0:	19 f0       	breq	.+6      	; 0x7c8 <strtok_r+0x2c>
 7c2:	20 15       	cp	r18, r0
 7c4:	d9 f7       	brne	.-10     	; 0x7bc <strtok_r+0x20>
 7c6:	f3 cf       	rjmp	.-26     	; 0x7ae <strtok_r+0x12>
 7c8:	fb 01       	movw	r30, r22
 7ca:	21 91       	ld	r18, Z+
 7cc:	20 15       	cp	r18, r0
 7ce:	19 f4       	brne	.+6      	; 0x7d6 <strtok_r+0x3a>
 7d0:	1e 92       	st	-X, r1
 7d2:	11 96       	adiw	r26, 0x01	; 1
 7d4:	06 c0       	rjmp	.+12     	; 0x7e2 <strtok_r+0x46>
 7d6:	22 23       	and	r18, r18
 7d8:	c1 f7       	brne	.-16     	; 0x7ca <strtok_r+0x2e>
 7da:	0d 90       	ld	r0, X+
 7dc:	00 20       	and	r0, r0
 7de:	a1 f7       	brne	.-24     	; 0x7c8 <strtok_r+0x2c>
 7e0:	d0 01       	movw	r26, r0
 7e2:	fa 01       	movw	r30, r20
 7e4:	a1 93       	st	Z+, r26
 7e6:	b0 83       	st	Z, r27
 7e8:	08 95       	ret

000007ea <sprintf>:
 7ea:	0f 93       	push	r16
 7ec:	1f 93       	push	r17
 7ee:	cf 93       	push	r28
 7f0:	df 93       	push	r29
 7f2:	cd b7       	in	r28, 0x3d	; 61
 7f4:	de b7       	in	r29, 0x3e	; 62
 7f6:	2e 97       	sbiw	r28, 0x0e	; 14
 7f8:	0f b6       	in	r0, 0x3f	; 63
 7fa:	f8 94       	cli
 7fc:	de bf       	out	0x3e, r29	; 62
 7fe:	0f be       	out	0x3f, r0	; 63
 800:	cd bf       	out	0x3d, r28	; 61
 802:	0d 89       	ldd	r16, Y+21	; 0x15
 804:	1e 89       	ldd	r17, Y+22	; 0x16
 806:	86 e0       	ldi	r24, 0x06	; 6
 808:	8c 83       	std	Y+4, r24	; 0x04
 80a:	1a 83       	std	Y+2, r17	; 0x02
 80c:	09 83       	std	Y+1, r16	; 0x01
 80e:	8f ef       	ldi	r24, 0xFF	; 255
 810:	9f e7       	ldi	r25, 0x7F	; 127
 812:	9e 83       	std	Y+6, r25	; 0x06
 814:	8d 83       	std	Y+5, r24	; 0x05
 816:	ae 01       	movw	r20, r28
 818:	47 5e       	subi	r20, 0xE7	; 231
 81a:	5f 4f       	sbci	r21, 0xFF	; 255
 81c:	6f 89       	ldd	r22, Y+23	; 0x17
 81e:	78 8d       	ldd	r23, Y+24	; 0x18
 820:	ce 01       	movw	r24, r28
 822:	01 96       	adiw	r24, 0x01	; 1
 824:	10 d0       	rcall	.+32     	; 0x846 <vfprintf>
 826:	ef 81       	ldd	r30, Y+7	; 0x07
 828:	f8 85       	ldd	r31, Y+8	; 0x08
 82a:	e0 0f       	add	r30, r16
 82c:	f1 1f       	adc	r31, r17
 82e:	10 82       	st	Z, r1
 830:	2e 96       	adiw	r28, 0x0e	; 14
 832:	0f b6       	in	r0, 0x3f	; 63
 834:	f8 94       	cli
 836:	de bf       	out	0x3e, r29	; 62
 838:	0f be       	out	0x3f, r0	; 63
 83a:	cd bf       	out	0x3d, r28	; 61
 83c:	df 91       	pop	r29
 83e:	cf 91       	pop	r28
 840:	1f 91       	pop	r17
 842:	0f 91       	pop	r16
 844:	08 95       	ret

00000846 <vfprintf>:
 846:	2f 92       	push	r2
 848:	3f 92       	push	r3
 84a:	4f 92       	push	r4
 84c:	5f 92       	push	r5
 84e:	6f 92       	push	r6
 850:	7f 92       	push	r7
 852:	8f 92       	push	r8
 854:	9f 92       	push	r9
 856:	af 92       	push	r10
 858:	bf 92       	push	r11
 85a:	cf 92       	push	r12
 85c:	df 92       	push	r13
 85e:	ef 92       	push	r14
 860:	ff 92       	push	r15
 862:	0f 93       	push	r16
 864:	1f 93       	push	r17
 866:	cf 93       	push	r28
 868:	df 93       	push	r29
 86a:	cd b7       	in	r28, 0x3d	; 61
 86c:	de b7       	in	r29, 0x3e	; 62
 86e:	2b 97       	sbiw	r28, 0x0b	; 11
 870:	0f b6       	in	r0, 0x3f	; 63
 872:	f8 94       	cli
 874:	de bf       	out	0x3e, r29	; 62
 876:	0f be       	out	0x3f, r0	; 63
 878:	cd bf       	out	0x3d, r28	; 61
 87a:	6c 01       	movw	r12, r24
 87c:	7b 01       	movw	r14, r22
 87e:	8a 01       	movw	r16, r20
 880:	fc 01       	movw	r30, r24
 882:	17 82       	std	Z+7, r1	; 0x07
 884:	16 82       	std	Z+6, r1	; 0x06
 886:	83 81       	ldd	r24, Z+3	; 0x03
 888:	81 ff       	sbrs	r24, 1
 88a:	bf c1       	rjmp	.+894    	; 0xc0a <vfprintf+0x3c4>
 88c:	ce 01       	movw	r24, r28
 88e:	01 96       	adiw	r24, 0x01	; 1
 890:	3c 01       	movw	r6, r24
 892:	f6 01       	movw	r30, r12
 894:	93 81       	ldd	r25, Z+3	; 0x03
 896:	f7 01       	movw	r30, r14
 898:	93 fd       	sbrc	r25, 3
 89a:	85 91       	lpm	r24, Z+
 89c:	93 ff       	sbrs	r25, 3
 89e:	81 91       	ld	r24, Z+
 8a0:	7f 01       	movw	r14, r30
 8a2:	88 23       	and	r24, r24
 8a4:	09 f4       	brne	.+2      	; 0x8a8 <vfprintf+0x62>
 8a6:	ad c1       	rjmp	.+858    	; 0xc02 <vfprintf+0x3bc>
 8a8:	85 32       	cpi	r24, 0x25	; 37
 8aa:	39 f4       	brne	.+14     	; 0x8ba <vfprintf+0x74>
 8ac:	93 fd       	sbrc	r25, 3
 8ae:	85 91       	lpm	r24, Z+
 8b0:	93 ff       	sbrs	r25, 3
 8b2:	81 91       	ld	r24, Z+
 8b4:	7f 01       	movw	r14, r30
 8b6:	85 32       	cpi	r24, 0x25	; 37
 8b8:	21 f4       	brne	.+8      	; 0x8c2 <vfprintf+0x7c>
 8ba:	b6 01       	movw	r22, r12
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	d6 d1       	rcall	.+940    	; 0xc6c <fputc>
 8c0:	e8 cf       	rjmp	.-48     	; 0x892 <vfprintf+0x4c>
 8c2:	91 2c       	mov	r9, r1
 8c4:	21 2c       	mov	r2, r1
 8c6:	31 2c       	mov	r3, r1
 8c8:	ff e1       	ldi	r31, 0x1F	; 31
 8ca:	f3 15       	cp	r31, r3
 8cc:	d8 f0       	brcs	.+54     	; 0x904 <vfprintf+0xbe>
 8ce:	8b 32       	cpi	r24, 0x2B	; 43
 8d0:	79 f0       	breq	.+30     	; 0x8f0 <vfprintf+0xaa>
 8d2:	38 f4       	brcc	.+14     	; 0x8e2 <vfprintf+0x9c>
 8d4:	80 32       	cpi	r24, 0x20	; 32
 8d6:	79 f0       	breq	.+30     	; 0x8f6 <vfprintf+0xb0>
 8d8:	83 32       	cpi	r24, 0x23	; 35
 8da:	a1 f4       	brne	.+40     	; 0x904 <vfprintf+0xbe>
 8dc:	23 2d       	mov	r18, r3
 8de:	20 61       	ori	r18, 0x10	; 16
 8e0:	1d c0       	rjmp	.+58     	; 0x91c <vfprintf+0xd6>
 8e2:	8d 32       	cpi	r24, 0x2D	; 45
 8e4:	61 f0       	breq	.+24     	; 0x8fe <vfprintf+0xb8>
 8e6:	80 33       	cpi	r24, 0x30	; 48
 8e8:	69 f4       	brne	.+26     	; 0x904 <vfprintf+0xbe>
 8ea:	23 2d       	mov	r18, r3
 8ec:	21 60       	ori	r18, 0x01	; 1
 8ee:	16 c0       	rjmp	.+44     	; 0x91c <vfprintf+0xd6>
 8f0:	83 2d       	mov	r24, r3
 8f2:	82 60       	ori	r24, 0x02	; 2
 8f4:	38 2e       	mov	r3, r24
 8f6:	e3 2d       	mov	r30, r3
 8f8:	e4 60       	ori	r30, 0x04	; 4
 8fa:	3e 2e       	mov	r3, r30
 8fc:	2a c0       	rjmp	.+84     	; 0x952 <vfprintf+0x10c>
 8fe:	f3 2d       	mov	r31, r3
 900:	f8 60       	ori	r31, 0x08	; 8
 902:	1d c0       	rjmp	.+58     	; 0x93e <vfprintf+0xf8>
 904:	37 fc       	sbrc	r3, 7
 906:	2d c0       	rjmp	.+90     	; 0x962 <vfprintf+0x11c>
 908:	20 ed       	ldi	r18, 0xD0	; 208
 90a:	28 0f       	add	r18, r24
 90c:	2a 30       	cpi	r18, 0x0A	; 10
 90e:	40 f0       	brcs	.+16     	; 0x920 <vfprintf+0xda>
 910:	8e 32       	cpi	r24, 0x2E	; 46
 912:	b9 f4       	brne	.+46     	; 0x942 <vfprintf+0xfc>
 914:	36 fc       	sbrc	r3, 6
 916:	75 c1       	rjmp	.+746    	; 0xc02 <vfprintf+0x3bc>
 918:	23 2d       	mov	r18, r3
 91a:	20 64       	ori	r18, 0x40	; 64
 91c:	32 2e       	mov	r3, r18
 91e:	19 c0       	rjmp	.+50     	; 0x952 <vfprintf+0x10c>
 920:	36 fe       	sbrs	r3, 6
 922:	06 c0       	rjmp	.+12     	; 0x930 <vfprintf+0xea>
 924:	8a e0       	ldi	r24, 0x0A	; 10
 926:	98 9e       	mul	r9, r24
 928:	20 0d       	add	r18, r0
 92a:	11 24       	eor	r1, r1
 92c:	92 2e       	mov	r9, r18
 92e:	11 c0       	rjmp	.+34     	; 0x952 <vfprintf+0x10c>
 930:	ea e0       	ldi	r30, 0x0A	; 10
 932:	2e 9e       	mul	r2, r30
 934:	20 0d       	add	r18, r0
 936:	11 24       	eor	r1, r1
 938:	22 2e       	mov	r2, r18
 93a:	f3 2d       	mov	r31, r3
 93c:	f0 62       	ori	r31, 0x20	; 32
 93e:	3f 2e       	mov	r3, r31
 940:	08 c0       	rjmp	.+16     	; 0x952 <vfprintf+0x10c>
 942:	8c 36       	cpi	r24, 0x6C	; 108
 944:	21 f4       	brne	.+8      	; 0x94e <vfprintf+0x108>
 946:	83 2d       	mov	r24, r3
 948:	80 68       	ori	r24, 0x80	; 128
 94a:	38 2e       	mov	r3, r24
 94c:	02 c0       	rjmp	.+4      	; 0x952 <vfprintf+0x10c>
 94e:	88 36       	cpi	r24, 0x68	; 104
 950:	41 f4       	brne	.+16     	; 0x962 <vfprintf+0x11c>
 952:	f7 01       	movw	r30, r14
 954:	93 fd       	sbrc	r25, 3
 956:	85 91       	lpm	r24, Z+
 958:	93 ff       	sbrs	r25, 3
 95a:	81 91       	ld	r24, Z+
 95c:	7f 01       	movw	r14, r30
 95e:	81 11       	cpse	r24, r1
 960:	b3 cf       	rjmp	.-154    	; 0x8c8 <vfprintf+0x82>
 962:	98 2f       	mov	r25, r24
 964:	9f 7d       	andi	r25, 0xDF	; 223
 966:	95 54       	subi	r25, 0x45	; 69
 968:	93 30       	cpi	r25, 0x03	; 3
 96a:	28 f4       	brcc	.+10     	; 0x976 <vfprintf+0x130>
 96c:	0c 5f       	subi	r16, 0xFC	; 252
 96e:	1f 4f       	sbci	r17, 0xFF	; 255
 970:	9f e3       	ldi	r25, 0x3F	; 63
 972:	99 83       	std	Y+1, r25	; 0x01
 974:	0d c0       	rjmp	.+26     	; 0x990 <vfprintf+0x14a>
 976:	83 36       	cpi	r24, 0x63	; 99
 978:	31 f0       	breq	.+12     	; 0x986 <vfprintf+0x140>
 97a:	83 37       	cpi	r24, 0x73	; 115
 97c:	71 f0       	breq	.+28     	; 0x99a <vfprintf+0x154>
 97e:	83 35       	cpi	r24, 0x53	; 83
 980:	09 f0       	breq	.+2      	; 0x984 <vfprintf+0x13e>
 982:	55 c0       	rjmp	.+170    	; 0xa2e <vfprintf+0x1e8>
 984:	20 c0       	rjmp	.+64     	; 0x9c6 <vfprintf+0x180>
 986:	f8 01       	movw	r30, r16
 988:	80 81       	ld	r24, Z
 98a:	89 83       	std	Y+1, r24	; 0x01
 98c:	0e 5f       	subi	r16, 0xFE	; 254
 98e:	1f 4f       	sbci	r17, 0xFF	; 255
 990:	88 24       	eor	r8, r8
 992:	83 94       	inc	r8
 994:	91 2c       	mov	r9, r1
 996:	53 01       	movw	r10, r6
 998:	12 c0       	rjmp	.+36     	; 0x9be <vfprintf+0x178>
 99a:	28 01       	movw	r4, r16
 99c:	f2 e0       	ldi	r31, 0x02	; 2
 99e:	4f 0e       	add	r4, r31
 9a0:	51 1c       	adc	r5, r1
 9a2:	f8 01       	movw	r30, r16
 9a4:	a0 80       	ld	r10, Z
 9a6:	b1 80       	ldd	r11, Z+1	; 0x01
 9a8:	36 fe       	sbrs	r3, 6
 9aa:	03 c0       	rjmp	.+6      	; 0x9b2 <vfprintf+0x16c>
 9ac:	69 2d       	mov	r22, r9
 9ae:	70 e0       	ldi	r23, 0x00	; 0
 9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <vfprintf+0x170>
 9b2:	6f ef       	ldi	r22, 0xFF	; 255
 9b4:	7f ef       	ldi	r23, 0xFF	; 255
 9b6:	c5 01       	movw	r24, r10
 9b8:	4e d1       	rcall	.+668    	; 0xc56 <strnlen>
 9ba:	4c 01       	movw	r8, r24
 9bc:	82 01       	movw	r16, r4
 9be:	f3 2d       	mov	r31, r3
 9c0:	ff 77       	andi	r31, 0x7F	; 127
 9c2:	3f 2e       	mov	r3, r31
 9c4:	15 c0       	rjmp	.+42     	; 0x9f0 <vfprintf+0x1aa>
 9c6:	28 01       	movw	r4, r16
 9c8:	22 e0       	ldi	r18, 0x02	; 2
 9ca:	42 0e       	add	r4, r18
 9cc:	51 1c       	adc	r5, r1
 9ce:	f8 01       	movw	r30, r16
 9d0:	a0 80       	ld	r10, Z
 9d2:	b1 80       	ldd	r11, Z+1	; 0x01
 9d4:	36 fe       	sbrs	r3, 6
 9d6:	03 c0       	rjmp	.+6      	; 0x9de <vfprintf+0x198>
 9d8:	69 2d       	mov	r22, r9
 9da:	70 e0       	ldi	r23, 0x00	; 0
 9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <vfprintf+0x19c>
 9de:	6f ef       	ldi	r22, 0xFF	; 255
 9e0:	7f ef       	ldi	r23, 0xFF	; 255
 9e2:	c5 01       	movw	r24, r10
 9e4:	2d d1       	rcall	.+602    	; 0xc40 <strnlen_P>
 9e6:	4c 01       	movw	r8, r24
 9e8:	f3 2d       	mov	r31, r3
 9ea:	f0 68       	ori	r31, 0x80	; 128
 9ec:	3f 2e       	mov	r3, r31
 9ee:	82 01       	movw	r16, r4
 9f0:	33 fc       	sbrc	r3, 3
 9f2:	19 c0       	rjmp	.+50     	; 0xa26 <vfprintf+0x1e0>
 9f4:	82 2d       	mov	r24, r2
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	88 16       	cp	r8, r24
 9fa:	99 06       	cpc	r9, r25
 9fc:	a0 f4       	brcc	.+40     	; 0xa26 <vfprintf+0x1e0>
 9fe:	b6 01       	movw	r22, r12
 a00:	80 e2       	ldi	r24, 0x20	; 32
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	33 d1       	rcall	.+614    	; 0xc6c <fputc>
 a06:	2a 94       	dec	r2
 a08:	f5 cf       	rjmp	.-22     	; 0x9f4 <vfprintf+0x1ae>
 a0a:	f5 01       	movw	r30, r10
 a0c:	37 fc       	sbrc	r3, 7
 a0e:	85 91       	lpm	r24, Z+
 a10:	37 fe       	sbrs	r3, 7
 a12:	81 91       	ld	r24, Z+
 a14:	5f 01       	movw	r10, r30
 a16:	b6 01       	movw	r22, r12
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	28 d1       	rcall	.+592    	; 0xc6c <fputc>
 a1c:	21 10       	cpse	r2, r1
 a1e:	2a 94       	dec	r2
 a20:	21 e0       	ldi	r18, 0x01	; 1
 a22:	82 1a       	sub	r8, r18
 a24:	91 08       	sbc	r9, r1
 a26:	81 14       	cp	r8, r1
 a28:	91 04       	cpc	r9, r1
 a2a:	79 f7       	brne	.-34     	; 0xa0a <vfprintf+0x1c4>
 a2c:	e1 c0       	rjmp	.+450    	; 0xbf0 <vfprintf+0x3aa>
 a2e:	84 36       	cpi	r24, 0x64	; 100
 a30:	11 f0       	breq	.+4      	; 0xa36 <vfprintf+0x1f0>
 a32:	89 36       	cpi	r24, 0x69	; 105
 a34:	39 f5       	brne	.+78     	; 0xa84 <vfprintf+0x23e>
 a36:	f8 01       	movw	r30, r16
 a38:	37 fe       	sbrs	r3, 7
 a3a:	07 c0       	rjmp	.+14     	; 0xa4a <vfprintf+0x204>
 a3c:	60 81       	ld	r22, Z
 a3e:	71 81       	ldd	r23, Z+1	; 0x01
 a40:	82 81       	ldd	r24, Z+2	; 0x02
 a42:	93 81       	ldd	r25, Z+3	; 0x03
 a44:	0c 5f       	subi	r16, 0xFC	; 252
 a46:	1f 4f       	sbci	r17, 0xFF	; 255
 a48:	08 c0       	rjmp	.+16     	; 0xa5a <vfprintf+0x214>
 a4a:	60 81       	ld	r22, Z
 a4c:	71 81       	ldd	r23, Z+1	; 0x01
 a4e:	07 2e       	mov	r0, r23
 a50:	00 0c       	add	r0, r0
 a52:	88 0b       	sbc	r24, r24
 a54:	99 0b       	sbc	r25, r25
 a56:	0e 5f       	subi	r16, 0xFE	; 254
 a58:	1f 4f       	sbci	r17, 0xFF	; 255
 a5a:	f3 2d       	mov	r31, r3
 a5c:	ff 76       	andi	r31, 0x6F	; 111
 a5e:	3f 2e       	mov	r3, r31
 a60:	97 ff       	sbrs	r25, 7
 a62:	09 c0       	rjmp	.+18     	; 0xa76 <vfprintf+0x230>
 a64:	90 95       	com	r25
 a66:	80 95       	com	r24
 a68:	70 95       	com	r23
 a6a:	61 95       	neg	r22
 a6c:	7f 4f       	sbci	r23, 0xFF	; 255
 a6e:	8f 4f       	sbci	r24, 0xFF	; 255
 a70:	9f 4f       	sbci	r25, 0xFF	; 255
 a72:	f0 68       	ori	r31, 0x80	; 128
 a74:	3f 2e       	mov	r3, r31
 a76:	2a e0       	ldi	r18, 0x0A	; 10
 a78:	30 e0       	ldi	r19, 0x00	; 0
 a7a:	a3 01       	movw	r20, r6
 a7c:	33 d1       	rcall	.+614    	; 0xce4 <__ultoa_invert>
 a7e:	88 2e       	mov	r8, r24
 a80:	86 18       	sub	r8, r6
 a82:	44 c0       	rjmp	.+136    	; 0xb0c <vfprintf+0x2c6>
 a84:	85 37       	cpi	r24, 0x75	; 117
 a86:	31 f4       	brne	.+12     	; 0xa94 <vfprintf+0x24e>
 a88:	23 2d       	mov	r18, r3
 a8a:	2f 7e       	andi	r18, 0xEF	; 239
 a8c:	b2 2e       	mov	r11, r18
 a8e:	2a e0       	ldi	r18, 0x0A	; 10
 a90:	30 e0       	ldi	r19, 0x00	; 0
 a92:	25 c0       	rjmp	.+74     	; 0xade <vfprintf+0x298>
 a94:	93 2d       	mov	r25, r3
 a96:	99 7f       	andi	r25, 0xF9	; 249
 a98:	b9 2e       	mov	r11, r25
 a9a:	8f 36       	cpi	r24, 0x6F	; 111
 a9c:	c1 f0       	breq	.+48     	; 0xace <vfprintf+0x288>
 a9e:	18 f4       	brcc	.+6      	; 0xaa6 <vfprintf+0x260>
 aa0:	88 35       	cpi	r24, 0x58	; 88
 aa2:	79 f0       	breq	.+30     	; 0xac2 <vfprintf+0x27c>
 aa4:	ae c0       	rjmp	.+348    	; 0xc02 <vfprintf+0x3bc>
 aa6:	80 37       	cpi	r24, 0x70	; 112
 aa8:	19 f0       	breq	.+6      	; 0xab0 <vfprintf+0x26a>
 aaa:	88 37       	cpi	r24, 0x78	; 120
 aac:	21 f0       	breq	.+8      	; 0xab6 <vfprintf+0x270>
 aae:	a9 c0       	rjmp	.+338    	; 0xc02 <vfprintf+0x3bc>
 ab0:	e9 2f       	mov	r30, r25
 ab2:	e0 61       	ori	r30, 0x10	; 16
 ab4:	be 2e       	mov	r11, r30
 ab6:	b4 fe       	sbrs	r11, 4
 ab8:	0d c0       	rjmp	.+26     	; 0xad4 <vfprintf+0x28e>
 aba:	fb 2d       	mov	r31, r11
 abc:	f4 60       	ori	r31, 0x04	; 4
 abe:	bf 2e       	mov	r11, r31
 ac0:	09 c0       	rjmp	.+18     	; 0xad4 <vfprintf+0x28e>
 ac2:	34 fe       	sbrs	r3, 4
 ac4:	0a c0       	rjmp	.+20     	; 0xada <vfprintf+0x294>
 ac6:	29 2f       	mov	r18, r25
 ac8:	26 60       	ori	r18, 0x06	; 6
 aca:	b2 2e       	mov	r11, r18
 acc:	06 c0       	rjmp	.+12     	; 0xada <vfprintf+0x294>
 ace:	28 e0       	ldi	r18, 0x08	; 8
 ad0:	30 e0       	ldi	r19, 0x00	; 0
 ad2:	05 c0       	rjmp	.+10     	; 0xade <vfprintf+0x298>
 ad4:	20 e1       	ldi	r18, 0x10	; 16
 ad6:	30 e0       	ldi	r19, 0x00	; 0
 ad8:	02 c0       	rjmp	.+4      	; 0xade <vfprintf+0x298>
 ada:	20 e1       	ldi	r18, 0x10	; 16
 adc:	32 e0       	ldi	r19, 0x02	; 2
 ade:	f8 01       	movw	r30, r16
 ae0:	b7 fe       	sbrs	r11, 7
 ae2:	07 c0       	rjmp	.+14     	; 0xaf2 <vfprintf+0x2ac>
 ae4:	60 81       	ld	r22, Z
 ae6:	71 81       	ldd	r23, Z+1	; 0x01
 ae8:	82 81       	ldd	r24, Z+2	; 0x02
 aea:	93 81       	ldd	r25, Z+3	; 0x03
 aec:	0c 5f       	subi	r16, 0xFC	; 252
 aee:	1f 4f       	sbci	r17, 0xFF	; 255
 af0:	06 c0       	rjmp	.+12     	; 0xafe <vfprintf+0x2b8>
 af2:	60 81       	ld	r22, Z
 af4:	71 81       	ldd	r23, Z+1	; 0x01
 af6:	80 e0       	ldi	r24, 0x00	; 0
 af8:	90 e0       	ldi	r25, 0x00	; 0
 afa:	0e 5f       	subi	r16, 0xFE	; 254
 afc:	1f 4f       	sbci	r17, 0xFF	; 255
 afe:	a3 01       	movw	r20, r6
 b00:	f1 d0       	rcall	.+482    	; 0xce4 <__ultoa_invert>
 b02:	88 2e       	mov	r8, r24
 b04:	86 18       	sub	r8, r6
 b06:	fb 2d       	mov	r31, r11
 b08:	ff 77       	andi	r31, 0x7F	; 127
 b0a:	3f 2e       	mov	r3, r31
 b0c:	36 fe       	sbrs	r3, 6
 b0e:	0d c0       	rjmp	.+26     	; 0xb2a <vfprintf+0x2e4>
 b10:	23 2d       	mov	r18, r3
 b12:	2e 7f       	andi	r18, 0xFE	; 254
 b14:	a2 2e       	mov	r10, r18
 b16:	89 14       	cp	r8, r9
 b18:	58 f4       	brcc	.+22     	; 0xb30 <vfprintf+0x2ea>
 b1a:	34 fe       	sbrs	r3, 4
 b1c:	0b c0       	rjmp	.+22     	; 0xb34 <vfprintf+0x2ee>
 b1e:	32 fc       	sbrc	r3, 2
 b20:	09 c0       	rjmp	.+18     	; 0xb34 <vfprintf+0x2ee>
 b22:	83 2d       	mov	r24, r3
 b24:	8e 7e       	andi	r24, 0xEE	; 238
 b26:	a8 2e       	mov	r10, r24
 b28:	05 c0       	rjmp	.+10     	; 0xb34 <vfprintf+0x2ee>
 b2a:	b8 2c       	mov	r11, r8
 b2c:	a3 2c       	mov	r10, r3
 b2e:	03 c0       	rjmp	.+6      	; 0xb36 <vfprintf+0x2f0>
 b30:	b8 2c       	mov	r11, r8
 b32:	01 c0       	rjmp	.+2      	; 0xb36 <vfprintf+0x2f0>
 b34:	b9 2c       	mov	r11, r9
 b36:	a4 fe       	sbrs	r10, 4
 b38:	0f c0       	rjmp	.+30     	; 0xb58 <vfprintf+0x312>
 b3a:	fe 01       	movw	r30, r28
 b3c:	e8 0d       	add	r30, r8
 b3e:	f1 1d       	adc	r31, r1
 b40:	80 81       	ld	r24, Z
 b42:	80 33       	cpi	r24, 0x30	; 48
 b44:	21 f4       	brne	.+8      	; 0xb4e <vfprintf+0x308>
 b46:	9a 2d       	mov	r25, r10
 b48:	99 7e       	andi	r25, 0xE9	; 233
 b4a:	a9 2e       	mov	r10, r25
 b4c:	09 c0       	rjmp	.+18     	; 0xb60 <vfprintf+0x31a>
 b4e:	a2 fe       	sbrs	r10, 2
 b50:	06 c0       	rjmp	.+12     	; 0xb5e <vfprintf+0x318>
 b52:	b3 94       	inc	r11
 b54:	b3 94       	inc	r11
 b56:	04 c0       	rjmp	.+8      	; 0xb60 <vfprintf+0x31a>
 b58:	8a 2d       	mov	r24, r10
 b5a:	86 78       	andi	r24, 0x86	; 134
 b5c:	09 f0       	breq	.+2      	; 0xb60 <vfprintf+0x31a>
 b5e:	b3 94       	inc	r11
 b60:	a3 fc       	sbrc	r10, 3
 b62:	10 c0       	rjmp	.+32     	; 0xb84 <vfprintf+0x33e>
 b64:	a0 fe       	sbrs	r10, 0
 b66:	06 c0       	rjmp	.+12     	; 0xb74 <vfprintf+0x32e>
 b68:	b2 14       	cp	r11, r2
 b6a:	80 f4       	brcc	.+32     	; 0xb8c <vfprintf+0x346>
 b6c:	28 0c       	add	r2, r8
 b6e:	92 2c       	mov	r9, r2
 b70:	9b 18       	sub	r9, r11
 b72:	0d c0       	rjmp	.+26     	; 0xb8e <vfprintf+0x348>
 b74:	b2 14       	cp	r11, r2
 b76:	58 f4       	brcc	.+22     	; 0xb8e <vfprintf+0x348>
 b78:	b6 01       	movw	r22, r12
 b7a:	80 e2       	ldi	r24, 0x20	; 32
 b7c:	90 e0       	ldi	r25, 0x00	; 0
 b7e:	76 d0       	rcall	.+236    	; 0xc6c <fputc>
 b80:	b3 94       	inc	r11
 b82:	f8 cf       	rjmp	.-16     	; 0xb74 <vfprintf+0x32e>
 b84:	b2 14       	cp	r11, r2
 b86:	18 f4       	brcc	.+6      	; 0xb8e <vfprintf+0x348>
 b88:	2b 18       	sub	r2, r11
 b8a:	02 c0       	rjmp	.+4      	; 0xb90 <vfprintf+0x34a>
 b8c:	98 2c       	mov	r9, r8
 b8e:	21 2c       	mov	r2, r1
 b90:	a4 fe       	sbrs	r10, 4
 b92:	0f c0       	rjmp	.+30     	; 0xbb2 <vfprintf+0x36c>
 b94:	b6 01       	movw	r22, r12
 b96:	80 e3       	ldi	r24, 0x30	; 48
 b98:	90 e0       	ldi	r25, 0x00	; 0
 b9a:	68 d0       	rcall	.+208    	; 0xc6c <fputc>
 b9c:	a2 fe       	sbrs	r10, 2
 b9e:	16 c0       	rjmp	.+44     	; 0xbcc <vfprintf+0x386>
 ba0:	a1 fc       	sbrc	r10, 1
 ba2:	03 c0       	rjmp	.+6      	; 0xbaa <vfprintf+0x364>
 ba4:	88 e7       	ldi	r24, 0x78	; 120
 ba6:	90 e0       	ldi	r25, 0x00	; 0
 ba8:	02 c0       	rjmp	.+4      	; 0xbae <vfprintf+0x368>
 baa:	88 e5       	ldi	r24, 0x58	; 88
 bac:	90 e0       	ldi	r25, 0x00	; 0
 bae:	b6 01       	movw	r22, r12
 bb0:	0c c0       	rjmp	.+24     	; 0xbca <vfprintf+0x384>
 bb2:	8a 2d       	mov	r24, r10
 bb4:	86 78       	andi	r24, 0x86	; 134
 bb6:	51 f0       	breq	.+20     	; 0xbcc <vfprintf+0x386>
 bb8:	a1 fe       	sbrs	r10, 1
 bba:	02 c0       	rjmp	.+4      	; 0xbc0 <vfprintf+0x37a>
 bbc:	8b e2       	ldi	r24, 0x2B	; 43
 bbe:	01 c0       	rjmp	.+2      	; 0xbc2 <vfprintf+0x37c>
 bc0:	80 e2       	ldi	r24, 0x20	; 32
 bc2:	a7 fc       	sbrc	r10, 7
 bc4:	8d e2       	ldi	r24, 0x2D	; 45
 bc6:	b6 01       	movw	r22, r12
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	50 d0       	rcall	.+160    	; 0xc6c <fputc>
 bcc:	89 14       	cp	r8, r9
 bce:	30 f4       	brcc	.+12     	; 0xbdc <vfprintf+0x396>
 bd0:	b6 01       	movw	r22, r12
 bd2:	80 e3       	ldi	r24, 0x30	; 48
 bd4:	90 e0       	ldi	r25, 0x00	; 0
 bd6:	4a d0       	rcall	.+148    	; 0xc6c <fputc>
 bd8:	9a 94       	dec	r9
 bda:	f8 cf       	rjmp	.-16     	; 0xbcc <vfprintf+0x386>
 bdc:	8a 94       	dec	r8
 bde:	f3 01       	movw	r30, r6
 be0:	e8 0d       	add	r30, r8
 be2:	f1 1d       	adc	r31, r1
 be4:	80 81       	ld	r24, Z
 be6:	b6 01       	movw	r22, r12
 be8:	90 e0       	ldi	r25, 0x00	; 0
 bea:	40 d0       	rcall	.+128    	; 0xc6c <fputc>
 bec:	81 10       	cpse	r8, r1
 bee:	f6 cf       	rjmp	.-20     	; 0xbdc <vfprintf+0x396>
 bf0:	22 20       	and	r2, r2
 bf2:	09 f4       	brne	.+2      	; 0xbf6 <vfprintf+0x3b0>
 bf4:	4e ce       	rjmp	.-868    	; 0x892 <vfprintf+0x4c>
 bf6:	b6 01       	movw	r22, r12
 bf8:	80 e2       	ldi	r24, 0x20	; 32
 bfa:	90 e0       	ldi	r25, 0x00	; 0
 bfc:	37 d0       	rcall	.+110    	; 0xc6c <fputc>
 bfe:	2a 94       	dec	r2
 c00:	f7 cf       	rjmp	.-18     	; 0xbf0 <vfprintf+0x3aa>
 c02:	f6 01       	movw	r30, r12
 c04:	86 81       	ldd	r24, Z+6	; 0x06
 c06:	97 81       	ldd	r25, Z+7	; 0x07
 c08:	02 c0       	rjmp	.+4      	; 0xc0e <vfprintf+0x3c8>
 c0a:	8f ef       	ldi	r24, 0xFF	; 255
 c0c:	9f ef       	ldi	r25, 0xFF	; 255
 c0e:	2b 96       	adiw	r28, 0x0b	; 11
 c10:	0f b6       	in	r0, 0x3f	; 63
 c12:	f8 94       	cli
 c14:	de bf       	out	0x3e, r29	; 62
 c16:	0f be       	out	0x3f, r0	; 63
 c18:	cd bf       	out	0x3d, r28	; 61
 c1a:	df 91       	pop	r29
 c1c:	cf 91       	pop	r28
 c1e:	1f 91       	pop	r17
 c20:	0f 91       	pop	r16
 c22:	ff 90       	pop	r15
 c24:	ef 90       	pop	r14
 c26:	df 90       	pop	r13
 c28:	cf 90       	pop	r12
 c2a:	bf 90       	pop	r11
 c2c:	af 90       	pop	r10
 c2e:	9f 90       	pop	r9
 c30:	8f 90       	pop	r8
 c32:	7f 90       	pop	r7
 c34:	6f 90       	pop	r6
 c36:	5f 90       	pop	r5
 c38:	4f 90       	pop	r4
 c3a:	3f 90       	pop	r3
 c3c:	2f 90       	pop	r2
 c3e:	08 95       	ret

00000c40 <strnlen_P>:
 c40:	fc 01       	movw	r30, r24
 c42:	05 90       	lpm	r0, Z+
 c44:	61 50       	subi	r22, 0x01	; 1
 c46:	70 40       	sbci	r23, 0x00	; 0
 c48:	01 10       	cpse	r0, r1
 c4a:	d8 f7       	brcc	.-10     	; 0xc42 <strnlen_P+0x2>
 c4c:	80 95       	com	r24
 c4e:	90 95       	com	r25
 c50:	8e 0f       	add	r24, r30
 c52:	9f 1f       	adc	r25, r31
 c54:	08 95       	ret

00000c56 <strnlen>:
 c56:	fc 01       	movw	r30, r24
 c58:	61 50       	subi	r22, 0x01	; 1
 c5a:	70 40       	sbci	r23, 0x00	; 0
 c5c:	01 90       	ld	r0, Z+
 c5e:	01 10       	cpse	r0, r1
 c60:	d8 f7       	brcc	.-10     	; 0xc58 <strnlen+0x2>
 c62:	80 95       	com	r24
 c64:	90 95       	com	r25
 c66:	8e 0f       	add	r24, r30
 c68:	9f 1f       	adc	r25, r31
 c6a:	08 95       	ret

00000c6c <fputc>:
 c6c:	0f 93       	push	r16
 c6e:	1f 93       	push	r17
 c70:	cf 93       	push	r28
 c72:	df 93       	push	r29
 c74:	fb 01       	movw	r30, r22
 c76:	23 81       	ldd	r18, Z+3	; 0x03
 c78:	21 fd       	sbrc	r18, 1
 c7a:	03 c0       	rjmp	.+6      	; 0xc82 <fputc+0x16>
 c7c:	8f ef       	ldi	r24, 0xFF	; 255
 c7e:	9f ef       	ldi	r25, 0xFF	; 255
 c80:	2c c0       	rjmp	.+88     	; 0xcda <fputc+0x6e>
 c82:	22 ff       	sbrs	r18, 2
 c84:	16 c0       	rjmp	.+44     	; 0xcb2 <fputc+0x46>
 c86:	46 81       	ldd	r20, Z+6	; 0x06
 c88:	57 81       	ldd	r21, Z+7	; 0x07
 c8a:	24 81       	ldd	r18, Z+4	; 0x04
 c8c:	35 81       	ldd	r19, Z+5	; 0x05
 c8e:	42 17       	cp	r20, r18
 c90:	53 07       	cpc	r21, r19
 c92:	44 f4       	brge	.+16     	; 0xca4 <fputc+0x38>
 c94:	a0 81       	ld	r26, Z
 c96:	b1 81       	ldd	r27, Z+1	; 0x01
 c98:	9d 01       	movw	r18, r26
 c9a:	2f 5f       	subi	r18, 0xFF	; 255
 c9c:	3f 4f       	sbci	r19, 0xFF	; 255
 c9e:	31 83       	std	Z+1, r19	; 0x01
 ca0:	20 83       	st	Z, r18
 ca2:	8c 93       	st	X, r24
 ca4:	26 81       	ldd	r18, Z+6	; 0x06
 ca6:	37 81       	ldd	r19, Z+7	; 0x07
 ca8:	2f 5f       	subi	r18, 0xFF	; 255
 caa:	3f 4f       	sbci	r19, 0xFF	; 255
 cac:	37 83       	std	Z+7, r19	; 0x07
 cae:	26 83       	std	Z+6, r18	; 0x06
 cb0:	14 c0       	rjmp	.+40     	; 0xcda <fputc+0x6e>
 cb2:	8b 01       	movw	r16, r22
 cb4:	ec 01       	movw	r28, r24
 cb6:	fb 01       	movw	r30, r22
 cb8:	00 84       	ldd	r0, Z+8	; 0x08
 cba:	f1 85       	ldd	r31, Z+9	; 0x09
 cbc:	e0 2d       	mov	r30, r0
 cbe:	09 95       	icall
 cc0:	89 2b       	or	r24, r25
 cc2:	e1 f6       	brne	.-72     	; 0xc7c <fputc+0x10>
 cc4:	d8 01       	movw	r26, r16
 cc6:	16 96       	adiw	r26, 0x06	; 6
 cc8:	8d 91       	ld	r24, X+
 cca:	9c 91       	ld	r25, X
 ccc:	17 97       	sbiw	r26, 0x07	; 7
 cce:	01 96       	adiw	r24, 0x01	; 1
 cd0:	17 96       	adiw	r26, 0x07	; 7
 cd2:	9c 93       	st	X, r25
 cd4:	8e 93       	st	-X, r24
 cd6:	16 97       	sbiw	r26, 0x06	; 6
 cd8:	ce 01       	movw	r24, r28
 cda:	df 91       	pop	r29
 cdc:	cf 91       	pop	r28
 cde:	1f 91       	pop	r17
 ce0:	0f 91       	pop	r16
 ce2:	08 95       	ret

00000ce4 <__ultoa_invert>:
 ce4:	fa 01       	movw	r30, r20
 ce6:	aa 27       	eor	r26, r26
 ce8:	28 30       	cpi	r18, 0x08	; 8
 cea:	51 f1       	breq	.+84     	; 0xd40 <__ultoa_invert+0x5c>
 cec:	20 31       	cpi	r18, 0x10	; 16
 cee:	81 f1       	breq	.+96     	; 0xd50 <__ultoa_invert+0x6c>
 cf0:	e8 94       	clt
 cf2:	6f 93       	push	r22
 cf4:	6e 7f       	andi	r22, 0xFE	; 254
 cf6:	6e 5f       	subi	r22, 0xFE	; 254
 cf8:	7f 4f       	sbci	r23, 0xFF	; 255
 cfa:	8f 4f       	sbci	r24, 0xFF	; 255
 cfc:	9f 4f       	sbci	r25, 0xFF	; 255
 cfe:	af 4f       	sbci	r26, 0xFF	; 255
 d00:	b1 e0       	ldi	r27, 0x01	; 1
 d02:	3e d0       	rcall	.+124    	; 0xd80 <__ultoa_invert+0x9c>
 d04:	b4 e0       	ldi	r27, 0x04	; 4
 d06:	3c d0       	rcall	.+120    	; 0xd80 <__ultoa_invert+0x9c>
 d08:	67 0f       	add	r22, r23
 d0a:	78 1f       	adc	r23, r24
 d0c:	89 1f       	adc	r24, r25
 d0e:	9a 1f       	adc	r25, r26
 d10:	a1 1d       	adc	r26, r1
 d12:	68 0f       	add	r22, r24
 d14:	79 1f       	adc	r23, r25
 d16:	8a 1f       	adc	r24, r26
 d18:	91 1d       	adc	r25, r1
 d1a:	a1 1d       	adc	r26, r1
 d1c:	6a 0f       	add	r22, r26
 d1e:	71 1d       	adc	r23, r1
 d20:	81 1d       	adc	r24, r1
 d22:	91 1d       	adc	r25, r1
 d24:	a1 1d       	adc	r26, r1
 d26:	20 d0       	rcall	.+64     	; 0xd68 <__ultoa_invert+0x84>
 d28:	09 f4       	brne	.+2      	; 0xd2c <__ultoa_invert+0x48>
 d2a:	68 94       	set
 d2c:	3f 91       	pop	r19
 d2e:	2a e0       	ldi	r18, 0x0A	; 10
 d30:	26 9f       	mul	r18, r22
 d32:	11 24       	eor	r1, r1
 d34:	30 19       	sub	r19, r0
 d36:	30 5d       	subi	r19, 0xD0	; 208
 d38:	31 93       	st	Z+, r19
 d3a:	de f6       	brtc	.-74     	; 0xcf2 <__ultoa_invert+0xe>
 d3c:	cf 01       	movw	r24, r30
 d3e:	08 95       	ret
 d40:	46 2f       	mov	r20, r22
 d42:	47 70       	andi	r20, 0x07	; 7
 d44:	40 5d       	subi	r20, 0xD0	; 208
 d46:	41 93       	st	Z+, r20
 d48:	b3 e0       	ldi	r27, 0x03	; 3
 d4a:	0f d0       	rcall	.+30     	; 0xd6a <__ultoa_invert+0x86>
 d4c:	c9 f7       	brne	.-14     	; 0xd40 <__ultoa_invert+0x5c>
 d4e:	f6 cf       	rjmp	.-20     	; 0xd3c <__ultoa_invert+0x58>
 d50:	46 2f       	mov	r20, r22
 d52:	4f 70       	andi	r20, 0x0F	; 15
 d54:	40 5d       	subi	r20, 0xD0	; 208
 d56:	4a 33       	cpi	r20, 0x3A	; 58
 d58:	18 f0       	brcs	.+6      	; 0xd60 <__ultoa_invert+0x7c>
 d5a:	49 5d       	subi	r20, 0xD9	; 217
 d5c:	31 fd       	sbrc	r19, 1
 d5e:	40 52       	subi	r20, 0x20	; 32
 d60:	41 93       	st	Z+, r20
 d62:	02 d0       	rcall	.+4      	; 0xd68 <__ultoa_invert+0x84>
 d64:	a9 f7       	brne	.-22     	; 0xd50 <__ultoa_invert+0x6c>
 d66:	ea cf       	rjmp	.-44     	; 0xd3c <__ultoa_invert+0x58>
 d68:	b4 e0       	ldi	r27, 0x04	; 4
 d6a:	a6 95       	lsr	r26
 d6c:	97 95       	ror	r25
 d6e:	87 95       	ror	r24
 d70:	77 95       	ror	r23
 d72:	67 95       	ror	r22
 d74:	ba 95       	dec	r27
 d76:	c9 f7       	brne	.-14     	; 0xd6a <__ultoa_invert+0x86>
 d78:	00 97       	sbiw	r24, 0x00	; 0
 d7a:	61 05       	cpc	r22, r1
 d7c:	71 05       	cpc	r23, r1
 d7e:	08 95       	ret
 d80:	9b 01       	movw	r18, r22
 d82:	ac 01       	movw	r20, r24
 d84:	0a 2e       	mov	r0, r26
 d86:	06 94       	lsr	r0
 d88:	57 95       	ror	r21
 d8a:	47 95       	ror	r20
 d8c:	37 95       	ror	r19
 d8e:	27 95       	ror	r18
 d90:	ba 95       	dec	r27
 d92:	c9 f7       	brne	.-14     	; 0xd86 <__ultoa_invert+0xa2>
 d94:	62 0f       	add	r22, r18
 d96:	73 1f       	adc	r23, r19
 d98:	84 1f       	adc	r24, r20
 d9a:	95 1f       	adc	r25, r21
 d9c:	a0 1d       	adc	r26, r0
 d9e:	08 95       	ret

00000da0 <_exit>:
 da0:	f8 94       	cli

00000da2 <__stop_program>:
 da2:	ff cf       	rjmp	.-2      	; 0xda2 <__stop_program>
